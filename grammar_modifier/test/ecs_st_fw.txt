Compile Time: 0.474s
begin
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "begin"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "stmts"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "ignore"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> repeat_part
            repeat_part -> "{"
            repeat_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "ENDL"
            repeat_part -> "}"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "endline"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "";""
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "stmts"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> repeat_part
            repeat_part -> "{"
            repeat_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "statements"
                term -> part
                  part -> repeat_part
                    repeat_part -> "{"
                    repeat_part -> declaration
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> terminal_symbol
                              terminal_symbol -> "ENDL"
                    repeat_part -> "}"
            repeat_part -> "}"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "decl_stmts"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> repeat_part
            repeat_part -> "{"
            repeat_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "declaration"
                term -> part
                  part -> repeat_part
                    repeat_part -> "{"
                    repeat_part -> declaration
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> terminal_symbol
                              terminal_symbol -> "ENDL"
                    repeat_part -> "}"
            repeat_part -> "}"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "endblock"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "end_stmt"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "else_stmt"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "until_stmt"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "catch_stmt"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "statement"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "prep_stmt"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "package_stmt"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "import_stmt"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "var_stmt"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "block_stmt"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "namespace_stmt"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "using_stmt"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "if_stmt"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "switch_stmt"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "while_stmt"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "loop_stmt"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "for_stmt"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "foreach_stmt"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "control_stmt"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "function_stmt"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "return_stmt"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "try_stmt"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "throw_stmt"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "class_stmt"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "expr_stmt"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "declaration"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "prep_stmt"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "namespace_stmt"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "var_stmt"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "using_stmt"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "function_stmt"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "class_stmt"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "prep_stmt"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "PREP"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "package_stmt"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""package""
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ID"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "endline"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "import_stmt"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""import""
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "import_list"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "endline"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "var_def"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "var_bind"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""=""
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "basic_expr"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "var_list"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "var_stmt"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> declaration_part
            declaration_part -> "("
            declaration_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> ""var""
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> ""link""
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> ""constant""
            declaration_part -> ")"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "var_def"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "endline"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "var_bind"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""(""
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "var_bind_list"
        term -> part
          part -> repeat_part
            repeat_part -> "{"
            repeat_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "",""
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "var_bind_list"
            repeat_part -> "}"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "")""
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "var_bind_list"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ID"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ETC"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "var_bind"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "var_list"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ID"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""=""
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "single_expr"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "",""
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "var_list"
            alternative_part -> "]"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "block_stmt"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""block""
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "stmts"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""end""
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "namespace_stmt"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""namespace""
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ID"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "decl_stmts"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""end""
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "using_stmt"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""using""
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "using_list"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "endline"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "using_list"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "module_list"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "",""
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "using_list"
            alternative_part -> "]"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "if_stmt"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""if""
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "basic_expr"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "stmts"
        term -> part
          part -> repeat_part
            repeat_part -> "{"
            repeat_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "else_stmt"
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "stmts"
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> ""end""
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "ENDL"
            repeat_part -> "}"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "else_stmt"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""else""
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> ""if""
            alternative_part -> "]"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "basic_expr"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "switch_stmt"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""switch""
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "basic_expr"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "switch_stmts"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""end""
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "switch_stmts"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> repeat_part
            repeat_part -> "{"
            repeat_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "switch_case"
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "switch_default"
            repeat_part -> "}"
        term -> part
          part -> repeat_part
            repeat_part -> "{"
            repeat_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "ENDL"
            repeat_part -> "}"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "switch_case"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""case""
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "logic_or_expr"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "stmts"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""end""
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "switch_default"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""default""
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "stmts"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""end""
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "while_stmt"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""while""
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "basic_expr"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "stmts"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""end""
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "loop_stmt"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""loop""
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "stmts"
        term -> part
          part -> declaration_part
            declaration_part -> "("
            declaration_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "until_stmt"
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> ""end""
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "ENDL"
            declaration_part -> ")"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "until_stmt"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""until""
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "basic_expr"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "for_stmt"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""for""
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "var_def"
            alternative_part -> "]"
        term -> part
          part -> declaration_part
            declaration_part -> "("
            declaration_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "";""
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "",""
            declaration_part -> ")"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "basic_expr"
            alternative_part -> "]"
        term -> part
          part -> declaration_part
            declaration_part -> "("
            declaration_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "";""
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "",""
            declaration_part -> ")"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "basic_expr"
            alternative_part -> "]"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "for_body"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "foreach_stmt"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""foreach""
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ID"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""in""
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "basic_expr"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "for_body"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "for_body"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> declaration_part
            declaration_part -> "("
            declaration_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> ""do""
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "basic_expr"
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "endline"
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "ENDL"
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "stmts"
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> ""end""
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "ENDL"
            declaration_part -> ")"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "function_stmt"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""function""
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ID"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""(""
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "argument_list"
            alternative_part -> "]"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "")""
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> ""override""
            alternative_part -> "]"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "function_body"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "function_body"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> declaration_part
            declaration_part -> "("
            declaration_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> ""{""
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "stmts"
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> ""}""
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "ENDL"
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "stmts"
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> ""end""
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "ENDL"
            declaration_part -> ")"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "return_stmt"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""return""
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "expr"
            alternative_part -> "]"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "endline"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "try_stmt"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""try""
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "stmts"
        term -> part
          part -> repeat_part
            repeat_part -> "{"
            repeat_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "catch_stmt"
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "stmts"
            repeat_part -> "}"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""end""
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "catch_stmt"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""catch""
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ID"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "":""
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "visit_expr"
            alternative_part -> "]"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "throw_stmt"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""throw""
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "expr"
            alternative_part -> "]"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "endline"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "class_stmt"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> declaration_part
            declaration_part -> "("
            declaration_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> ""class""
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> ""struct""
            declaration_part -> ")"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ID"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> ""extends""
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "visit_expr"
            alternative_part -> "]"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "decl_stmts"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""end""
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "control_stmt"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> declaration_part
            declaration_part -> "("
            declaration_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> ""break""
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> ""continue""
            declaration_part -> ")"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "endline"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "expr_stmt"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "expr"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "endline"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "end_stmt"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""end""
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "expr"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "single_expr"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "",""
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "expr"
            alternative_part -> "]"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "single_expr"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "lambda_expr"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "basic_expr"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "basic_expr"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "var_bind"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""=""
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "cond_expr"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "cond_expr"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "asi_op"
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "single_expr"
            alternative_part -> "]"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "asi_op"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""=""
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "":=""
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""+=""
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""-=""
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""*=""
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""/=""
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""%=""
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""^=""
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "lambda_expr"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""[""
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "capture_list"
            alternative_part -> "]"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""]""
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""(""
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "argument_list"
            alternative_part -> "]"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "")""
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "lambda_body"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "capture_list"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> ""=""
            alternative_part -> "]"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ID"
        term -> part
          part -> repeat_part
            repeat_part -> "{"
            repeat_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "",""
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "capture_list"
            repeat_part -> "}"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "argument_list"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ETC"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ID"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> ""=""
            alternative_part -> "]"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ID"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "":""
            alternative_part -> "]"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "visit_expr"
        term -> part
          part -> repeat_part
            repeat_part -> "{"
            repeat_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "",""
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "argument_list"
            repeat_part -> "}"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "lambda_body"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""{""
        term -> part
          part -> repeat_part
            repeat_part -> "{"
            repeat_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "statement"
                term -> part
                  part -> repeat_part
                    repeat_part -> "{"
                    repeat_part -> declaration
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> terminal_symbol
                              terminal_symbol -> "ENDL"
                    repeat_part -> "}"
            repeat_part -> "}"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""}""
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""->""
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "cond_expr"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "cond_expr"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "logic_expr"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "cond_postfix"
            alternative_part -> "]"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "cond_postfix"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""?""
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "logic_or_expr"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "":""
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "cond_expr"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "":""
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "logic_or_expr"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "logic_or_expr"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "logic_and_expr"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> ""||""
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> ""or""
            alternative_part -> "]"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "logic_or_expr"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "logic_and_expr"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "equal_expr"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> ""&&""
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> ""and""
            alternative_part -> "]"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "logic_and_expr"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "equal_expr"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "relat_expr"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> declaration_part
                    declaration_part -> "("
                    declaration_part -> declaration
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> terminal_symbol
                              terminal_symbol -> ""==""
                      declaration -> "|"
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> terminal_symbol
                              terminal_symbol -> ""!=""
                    declaration_part -> ")"
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "equal_expr"
            alternative_part -> "]"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "relat_expr"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "add_expr"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> declaration_part
                    declaration_part -> "("
                    declaration_part -> declaration
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> terminal_symbol
                              terminal_symbol -> "">""
                      declaration -> "|"
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> terminal_symbol
                              terminal_symbol -> ""<""
                      declaration -> "|"
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> terminal_symbol
                              terminal_symbol -> "">=""
                      declaration -> "|"
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> terminal_symbol
                              terminal_symbol -> ""<=""
                    declaration_part -> ")"
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "relat_expr"
            alternative_part -> "]"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "add_expr"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "mul_expr"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> declaration_part
                    declaration_part -> "("
                    declaration_part -> declaration
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> terminal_symbol
                              terminal_symbol -> ""+""
                      declaration -> "|"
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> terminal_symbol
                              terminal_symbol -> ""-""
                    declaration_part -> ")"
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "add_expr"
            alternative_part -> "]"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "mul_expr"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "unary_expr"
        term -> part
          part -> declaration_part
            declaration_part -> "("
            declaration_part -> declaration
              declaration -> term
                term -> part
                  part -> alternative_part
                    alternative_part -> "["
                    alternative_part -> declaration
                      declaration -> term
                        term -> part
                          part -> declaration_part
                            declaration_part -> "("
                            declaration_part -> declaration
                              declaration -> term
                                term -> part
                                  part -> simple_part
                                    simple_part -> terminal_symbol
                                      terminal_symbol -> ""/""
                              declaration -> "|"
                              declaration -> term
                                term -> part
                                  part -> simple_part
                                    simple_part -> terminal_symbol
                                      terminal_symbol -> ""%""
                              declaration -> "|"
                              declaration -> term
                                term -> part
                                  part -> simple_part
                                    simple_part -> terminal_symbol
                                      terminal_symbol -> ""^""
                            declaration_part -> ")"
                        term -> part
                          part -> simple_part
                            simple_part -> right_non_terminal_symbol
                              right_non_terminal_symbol -> non_terminal_symbol
                                non_terminal_symbol -> "mul_expr"
                    alternative_part -> "]"
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "ENDL"
            declaration_part -> ")"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "unary_expr"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> declaration_part
            declaration_part -> "("
            declaration_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "unary_op"
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "unary_expr"
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> declaration_part
                    declaration_part -> "("
                    declaration_part -> declaration
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> terminal_symbol
                              terminal_symbol -> ""new""
                      declaration -> "|"
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> terminal_symbol
                              terminal_symbol -> ""gcnew""
                    declaration_part -> ")"
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "unary_expr"
                term -> part
                  part -> alternative_part
                    alternative_part -> "["
                    alternative_part -> declaration
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> right_non_terminal_symbol
                              right_non_terminal_symbol -> non_terminal_symbol
                                non_terminal_symbol -> "array"
                    alternative_part -> "]"
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "prim_expr"
                term -> part
                  part -> declaration_part
                    declaration_part -> "("
                    declaration_part -> declaration
                      declaration -> term
                        term -> part
                          part -> alternative_part
                            alternative_part -> "["
                            alternative_part -> declaration
                              declaration -> term
                                term -> part
                                  part -> simple_part
                                    simple_part -> right_non_terminal_symbol
                                      right_non_terminal_symbol -> non_terminal_symbol
                                        non_terminal_symbol -> "postifx"
                            alternative_part -> "]"
                      declaration -> "|"
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> terminal_symbol
                              terminal_symbol -> "ENDL"
                    declaration_part -> ")"
            declaration_part -> ")"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "unary_op"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""typeid""
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""++""
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""--""
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""*""
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""&""
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""-""
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""!""
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "postfix_expr"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "visit_expr"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "constant"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "visit_expr"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "object"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> ""->""
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "".""
            alternative_part -> "]"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "visit_expr"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "object"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> declaration_part
            declaration_part -> "("
            declaration_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "array"
                term -> part
                  part -> alternative_part
                    alternative_part -> "["
                    alternative_part -> declaration
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> right_non_terminal_symbol
                              right_non_terminal_symbol -> non_terminal_symbol
                                non_terminal_symbol -> "index"
                    alternative_part -> "]"
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "str"
                term -> part
                  part -> alternative_part
                    alternative_part -> "["
                    alternative_part -> declaration
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> right_non_terminal_symbol
                              right_non_terminal_symbol -> non_terminal_symbol
                                non_terminal_symbol -> "index"
                    alternative_part -> "]"
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> ""local""
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> ""global""
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "element"
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "CHAR"
            declaration_part -> ")"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "element"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> declaration_part
            declaration_part -> "("
            declaration_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "ID"
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> ""(""
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "single_expr"
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "")""
            declaration_part -> ")"
        term -> part
          part -> declaration_part
            declaration_part -> "("
            declaration_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "ENDL"
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> repeat_part
                    repeat_part -> "{"
                    repeat_part -> declaration
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> right_non_terminal_symbol
                              right_non_terminal_symbol -> non_terminal_symbol
                                non_terminal_symbol -> "fcall"
                      declaration -> "|"
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> right_non_terminal_symbol
                              right_non_terminal_symbol -> non_terminal_symbol
                                non_terminal_symbol -> "index"
                    repeat_part -> "}"
            declaration_part -> ")"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "constant"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "NUM"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""null""
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""true""
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""false""
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "array"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""{""
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "expr"
            alternative_part -> "]"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""}""
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "fcall"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""(""
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "expr"
            alternative_part -> "]"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "")""
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "index"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""[""
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "basic_expr"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""]""
    statement -> end_op
      end_op -> ";"
#############
New Statement
#############
Left Non-terminal-symbol: begin
Now_name: begin
create now_tree : begin
Start analyze Declaration: 
simple part: non_terminal_symbol: stmts
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: ignore
Now_name: ignore
create now_tree : ignore
Start analyze Declaration: 
add new node: ignore_rep_1
record old tree: ignore
change now tree: ignore_rep_1
simple part: terminal_symbol: ENDL
simple part: non_terminal_symbol: ignore_rep_1
simple part: non_terminal_symbol: NULL
recover from fun, now_tree: ignore
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: endline
Now_name: endline
create now_tree : endline
Start analyze Declaration: 
simple part: terminal_symbol: ENDL
simple part: terminal_symbol: ";"
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: stmts
Now_name: stmts
create now_tree : stmts
Start analyze Declaration: 
add new node: stmts_rep_1
record old tree: stmts
change now tree: stmts_rep_1
simple part: non_terminal_symbol: statements
add new node: stmts_rep_1_rep_2
record old tree: stmts_rep_1
change now tree: stmts_rep_1_rep_2
simple part: terminal_symbol: ENDL
simple part: non_terminal_symbol: stmts_rep_1_rep_2
simple part: non_terminal_symbol: NULL
recover from fun, now_tree: stmts_rep_1
simple part: non_terminal_symbol: stmts_rep_1
simple part: non_terminal_symbol: NULL
recover from fun, now_tree: stmts
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: decl_stmts
Now_name: decl_stmts
create now_tree : decl_stmts
Start analyze Declaration: 
add new node: decl_stmts_rep_1
record old tree: decl_stmts
change now tree: decl_stmts_rep_1
simple part: non_terminal_symbol: declaration
add new node: decl_stmts_rep_1_rep_2
record old tree: decl_stmts_rep_1
change now tree: decl_stmts_rep_1_rep_2
simple part: terminal_symbol: ENDL
simple part: non_terminal_symbol: decl_stmts_rep_1_rep_2
simple part: non_terminal_symbol: NULL
recover from fun, now_tree: decl_stmts_rep_1
simple part: non_terminal_symbol: decl_stmts_rep_1
simple part: non_terminal_symbol: NULL
recover from fun, now_tree: decl_stmts
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: endblock
Now_name: endblock
create now_tree : endblock
Start analyze Declaration: 
simple part: non_terminal_symbol: end_stmt
simple part: non_terminal_symbol: else_stmt
simple part: non_terminal_symbol: until_stmt
simple part: non_terminal_symbol: catch_stmt
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: statement
Now_name: statement
create now_tree : statement
Start analyze Declaration: 
simple part: non_terminal_symbol: prep_stmt
simple part: non_terminal_symbol: package_stmt
simple part: non_terminal_symbol: import_stmt
simple part: non_terminal_symbol: var_stmt
simple part: non_terminal_symbol: block_stmt
simple part: non_terminal_symbol: namespace_stmt
simple part: non_terminal_symbol: using_stmt
simple part: non_terminal_symbol: if_stmt
simple part: non_terminal_symbol: switch_stmt
simple part: non_terminal_symbol: while_stmt
simple part: non_terminal_symbol: loop_stmt
simple part: non_terminal_symbol: for_stmt
simple part: non_terminal_symbol: foreach_stmt
simple part: non_terminal_symbol: control_stmt
simple part: non_terminal_symbol: function_stmt
simple part: non_terminal_symbol: return_stmt
simple part: non_terminal_symbol: try_stmt
simple part: non_terminal_symbol: throw_stmt
simple part: non_terminal_symbol: class_stmt
simple part: non_terminal_symbol: expr_stmt
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: declaration
Now_name: declaration
create now_tree : declaration
Start analyze Declaration: 
simple part: non_terminal_symbol: prep_stmt
simple part: non_terminal_symbol: namespace_stmt
simple part: non_terminal_symbol: var_stmt
simple part: non_terminal_symbol: using_stmt
simple part: non_terminal_symbol: function_stmt
simple part: non_terminal_symbol: class_stmt
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: prep_stmt
Now_name: prep_stmt
create now_tree : prep_stmt
Start analyze Declaration: 
simple part: terminal_symbol: PREP
simple part: terminal_symbol: ENDL
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: package_stmt
Now_name: package_stmt
create now_tree : package_stmt
Start analyze Declaration: 
simple part: terminal_symbol: "package"
simple part: terminal_symbol: ID
simple part: non_terminal_symbol: endline
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: import_stmt
Now_name: import_stmt
create now_tree : import_stmt
Start analyze Declaration: 
simple part: terminal_symbol: "import"
simple part: non_terminal_symbol: import_list
simple part: non_terminal_symbol: endline
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: var_def
Now_name: var_def
create now_tree : var_def
Start analyze Declaration: 
simple part: non_terminal_symbol: var_bind
simple part: terminal_symbol: "="
simple part: non_terminal_symbol: basic_expr
simple part: non_terminal_symbol: var_list
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: var_stmt
Now_name: var_stmt
create now_tree : var_stmt
Start analyze Declaration: 
add new node: var_stmt_decl_1
record old tree: var_stmt
change now tree: var_stmt_decl_1
simple part: terminal_symbol: "var"
simple part: terminal_symbol: "link"
simple part: terminal_symbol: "constant"
recover from fun, now_tree: var_stmt
simple part: non_terminal_symbol: var_def
simple part: non_terminal_symbol: endline
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: var_bind
Now_name: var_bind
create now_tree : var_bind
Start analyze Declaration: 
simple part: terminal_symbol: "("
simple part: non_terminal_symbol: var_bind_list
add new node: var_bind_rep_3
record old tree: var_bind
change now tree: var_bind_rep_3
simple part: terminal_symbol: ","
simple part: non_terminal_symbol: var_bind_list
simple part: non_terminal_symbol: var_bind_rep_3
simple part: non_terminal_symbol: NULL
recover from fun, now_tree: var_bind
simple part: terminal_symbol: ")"
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: var_bind_list
Now_name: var_bind_list
create now_tree : var_bind_list
Start analyze Declaration: 
simple part: terminal_symbol: ID
simple part: terminal_symbol: ETC
simple part: non_terminal_symbol: var_bind
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: var_list
Now_name: var_list
create now_tree : var_list
Start analyze Declaration: 
simple part: terminal_symbol: ID
simple part: terminal_symbol: "="
simple part: non_terminal_symbol: single_expr
add new node: var_list_opt_4
record old tree: var_list
change now tree: var_list_opt_4
simple part: terminal_symbol: ","
simple part: non_terminal_symbol: var_list
simple part: non_terminal_symbol: NULL
recover from fun, now_tree: var_list
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: block_stmt
Now_name: block_stmt
create now_tree : block_stmt
Start analyze Declaration: 
simple part: terminal_symbol: "block"
simple part: terminal_symbol: ENDL
simple part: non_terminal_symbol: stmts
simple part: terminal_symbol: "end"
simple part: terminal_symbol: ENDL
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: namespace_stmt
Now_name: namespace_stmt
create now_tree : namespace_stmt
Start analyze Declaration: 
simple part: terminal_symbol: "namespace"
simple part: terminal_symbol: ID
simple part: terminal_symbol: ENDL
simple part: non_terminal_symbol: decl_stmts
simple part: terminal_symbol: "end"
simple part: terminal_symbol: ENDL
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: using_stmt
Now_name: using_stmt
create now_tree : using_stmt
Start analyze Declaration: 
simple part: terminal_symbol: "using"
simple part: non_terminal_symbol: using_list
simple part: non_terminal_symbol: endline
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: using_list
Now_name: using_list
create now_tree : using_list
Start analyze Declaration: 
simple part: non_terminal_symbol: module_list
add new node: using_list_opt_2
record old tree: using_list
change now tree: using_list_opt_2
simple part: terminal_symbol: ","
simple part: non_terminal_symbol: using_list
simple part: non_terminal_symbol: NULL
recover from fun, now_tree: using_list
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: if_stmt
Now_name: if_stmt
create now_tree : if_stmt
Start analyze Declaration: 
simple part: terminal_symbol: "if"
simple part: non_terminal_symbol: basic_expr
simple part: terminal_symbol: ENDL
simple part: non_terminal_symbol: stmts
add new node: if_stmt_rep_5
record old tree: if_stmt
change now tree: if_stmt_rep_5
simple part: non_terminal_symbol: else_stmt
simple part: non_terminal_symbol: stmts
simple part: terminal_symbol: "end"
simple part: terminal_symbol: ENDL
simple part: non_terminal_symbol: if_stmt_rep_5
simple part: non_terminal_symbol: NULL
recover from fun, now_tree: if_stmt
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: else_stmt
Now_name: else_stmt
create now_tree : else_stmt
Start analyze Declaration: 
simple part: terminal_symbol: "else"
add new node: else_stmt_opt_2
record old tree: else_stmt
change now tree: else_stmt_opt_2
simple part: terminal_symbol: "if"
simple part: non_terminal_symbol: NULL
recover from fun, now_tree: else_stmt
simple part: terminal_symbol: ENDL
simple part: non_terminal_symbol: basic_expr
simple part: terminal_symbol: ENDL
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: switch_stmt
Now_name: switch_stmt
create now_tree : switch_stmt
Start analyze Declaration: 
simple part: terminal_symbol: "switch"
simple part: non_terminal_symbol: basic_expr
simple part: terminal_symbol: ENDL
simple part: non_terminal_symbol: switch_stmts
simple part: terminal_symbol: "end"
simple part: terminal_symbol: ENDL
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: switch_stmts
Now_name: switch_stmts
create now_tree : switch_stmts
Start analyze Declaration: 
add new node: switch_stmts_rep_1
record old tree: switch_stmts
change now tree: switch_stmts_rep_1
simple part: non_terminal_symbol: switch_case
simple part: non_terminal_symbol: switch_stmts_rep_1
simple part: non_terminal_symbol: switch_default
simple part: non_terminal_symbol: switch_stmts_rep_1
simple part: non_terminal_symbol: NULL
recover from fun, now_tree: switch_stmts
add new node: switch_stmts_rep_2
record old tree: switch_stmts
change now tree: switch_stmts_rep_2
simple part: terminal_symbol: ENDL
simple part: non_terminal_symbol: switch_stmts_rep_2
simple part: non_terminal_symbol: NULL
recover from fun, now_tree: switch_stmts
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: switch_case
Now_name: switch_case
create now_tree : switch_case
Start analyze Declaration: 
simple part: terminal_symbol: "case"
simple part: non_terminal_symbol: logic_or_expr
simple part: terminal_symbol: ENDL
simple part: non_terminal_symbol: stmts
simple part: terminal_symbol: "end"
simple part: terminal_symbol: ENDL
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: switch_default
Now_name: switch_default
create now_tree : switch_default
Start analyze Declaration: 
simple part: terminal_symbol: "default"
simple part: terminal_symbol: ENDL
simple part: non_terminal_symbol: stmts
simple part: terminal_symbol: "end"
simple part: terminal_symbol: ENDL
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: while_stmt
Now_name: while_stmt
create now_tree : while_stmt
Start analyze Declaration: 
simple part: terminal_symbol: "while"
simple part: non_terminal_symbol: basic_expr
simple part: terminal_symbol: ENDL
simple part: non_terminal_symbol: stmts
simple part: terminal_symbol: "end"
simple part: terminal_symbol: ENDL
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: loop_stmt
Now_name: loop_stmt
create now_tree : loop_stmt
Start analyze Declaration: 
simple part: terminal_symbol: "loop"
simple part: terminal_symbol: ENDL
simple part: non_terminal_symbol: stmts
add new node: loop_stmt_decl_4
record old tree: loop_stmt
change now tree: loop_stmt_decl_4
simple part: non_terminal_symbol: until_stmt
simple part: terminal_symbol: "end"
simple part: terminal_symbol: ENDL
recover from fun, now_tree: loop_stmt
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: until_stmt
Now_name: until_stmt
create now_tree : until_stmt
Start analyze Declaration: 
simple part: terminal_symbol: "until"
simple part: non_terminal_symbol: basic_expr
simple part: terminal_symbol: ENDL
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: for_stmt
Now_name: for_stmt
create now_tree : for_stmt
Start analyze Declaration: 
simple part: terminal_symbol: "for"
add new node: for_stmt_opt_2
record old tree: for_stmt
change now tree: for_stmt_opt_2
simple part: non_terminal_symbol: var_def
simple part: non_terminal_symbol: NULL
recover from fun, now_tree: for_stmt
add new node: for_stmt_decl_3
record old tree: for_stmt
change now tree: for_stmt_decl_3
simple part: terminal_symbol: ";"
simple part: terminal_symbol: ","
recover from fun, now_tree: for_stmt
add new node: for_stmt_opt_4
record old tree: for_stmt
change now tree: for_stmt_opt_4
simple part: non_terminal_symbol: basic_expr
simple part: non_terminal_symbol: NULL
recover from fun, now_tree: for_stmt
add new node: for_stmt_decl_5
record old tree: for_stmt
change now tree: for_stmt_decl_5
simple part: terminal_symbol: ";"
simple part: terminal_symbol: ","
recover from fun, now_tree: for_stmt
add new node: for_stmt_opt_6
record old tree: for_stmt
change now tree: for_stmt_opt_6
simple part: non_terminal_symbol: basic_expr
simple part: non_terminal_symbol: NULL
recover from fun, now_tree: for_stmt
simple part: non_terminal_symbol: for_body
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: foreach_stmt
Now_name: foreach_stmt
create now_tree : foreach_stmt
Start analyze Declaration: 
simple part: terminal_symbol: "foreach"
simple part: terminal_symbol: ID
simple part: terminal_symbol: "in"
simple part: non_terminal_symbol: basic_expr
simple part: non_terminal_symbol: for_body
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: for_body
Now_name: for_body
create now_tree : for_body
Start analyze Declaration: 
add new node: for_body_decl_1
record old tree: for_body
change now tree: for_body_decl_1
simple part: terminal_symbol: "do"
simple part: non_terminal_symbol: basic_expr
simple part: non_terminal_symbol: endline
simple part: terminal_symbol: ENDL
simple part: non_terminal_symbol: stmts
simple part: terminal_symbol: "end"
simple part: terminal_symbol: ENDL
recover from fun, now_tree: for_body
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: function_stmt
Now_name: function_stmt
create now_tree : function_stmt
Start analyze Declaration: 
simple part: terminal_symbol: "function"
simple part: terminal_symbol: ID
simple part: terminal_symbol: "("
add new node: function_stmt_opt_4
record old tree: function_stmt
change now tree: function_stmt_opt_4
simple part: non_terminal_symbol: argument_list
simple part: non_terminal_symbol: NULL
recover from fun, now_tree: function_stmt
simple part: terminal_symbol: ")"
add new node: function_stmt_opt_6
record old tree: function_stmt
change now tree: function_stmt_opt_6
simple part: terminal_symbol: "override"
simple part: non_terminal_symbol: NULL
recover from fun, now_tree: function_stmt
simple part: non_terminal_symbol: function_body
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: function_body
Now_name: function_body
create now_tree : function_body
Start analyze Declaration: 
add new node: function_body_decl_1
record old tree: function_body
change now tree: function_body_decl_1
simple part: terminal_symbol: "{"
simple part: non_terminal_symbol: stmts
simple part: terminal_symbol: "}"
simple part: terminal_symbol: ENDL
simple part: non_terminal_symbol: stmts
simple part: terminal_symbol: "end"
simple part: terminal_symbol: ENDL
recover from fun, now_tree: function_body
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: return_stmt
Now_name: return_stmt
create now_tree : return_stmt
Start analyze Declaration: 
simple part: terminal_symbol: "return"
add new node: return_stmt_opt_2
record old tree: return_stmt
change now tree: return_stmt_opt_2
simple part: non_terminal_symbol: expr
simple part: non_terminal_symbol: NULL
recover from fun, now_tree: return_stmt
simple part: non_terminal_symbol: endline
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: try_stmt
Now_name: try_stmt
create now_tree : try_stmt
Start analyze Declaration: 
simple part: terminal_symbol: "try"
simple part: terminal_symbol: ENDL
simple part: non_terminal_symbol: stmts
add new node: try_stmt_rep_4
record old tree: try_stmt
change now tree: try_stmt_rep_4
simple part: non_terminal_symbol: catch_stmt
simple part: non_terminal_symbol: stmts
simple part: non_terminal_symbol: try_stmt_rep_4
simple part: non_terminal_symbol: NULL
recover from fun, now_tree: try_stmt
simple part: terminal_symbol: "end"
simple part: terminal_symbol: ENDL
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: catch_stmt
Now_name: catch_stmt
create now_tree : catch_stmt
Start analyze Declaration: 
simple part: terminal_symbol: "catch"
simple part: terminal_symbol: ID
add new node: catch_stmt_opt_3
record old tree: catch_stmt
change now tree: catch_stmt_opt_3
simple part: terminal_symbol: ":"
simple part: non_terminal_symbol: visit_expr
simple part: non_terminal_symbol: NULL
recover from fun, now_tree: catch_stmt
simple part: terminal_symbol: ENDL
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: throw_stmt
Now_name: throw_stmt
create now_tree : throw_stmt
Start analyze Declaration: 
simple part: terminal_symbol: "throw"
add new node: throw_stmt_opt_2
record old tree: throw_stmt
change now tree: throw_stmt_opt_2
simple part: non_terminal_symbol: expr
simple part: non_terminal_symbol: NULL
recover from fun, now_tree: throw_stmt
simple part: non_terminal_symbol: endline
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: class_stmt
Now_name: class_stmt
create now_tree : class_stmt
Start analyze Declaration: 
add new node: class_stmt_decl_1
record old tree: class_stmt
change now tree: class_stmt_decl_1
simple part: terminal_symbol: "class"
simple part: terminal_symbol: "struct"
recover from fun, now_tree: class_stmt
simple part: terminal_symbol: ID
add new node: class_stmt_opt_3
record old tree: class_stmt
change now tree: class_stmt_opt_3
simple part: terminal_symbol: "extends"
simple part: non_terminal_symbol: visit_expr
simple part: non_terminal_symbol: NULL
recover from fun, now_tree: class_stmt
simple part: terminal_symbol: ENDL
simple part: non_terminal_symbol: decl_stmts
simple part: terminal_symbol: "end"
simple part: terminal_symbol: ENDL
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: control_stmt
Now_name: control_stmt
create now_tree : control_stmt
Start analyze Declaration: 
add new node: control_stmt_decl_1
record old tree: control_stmt
change now tree: control_stmt_decl_1
simple part: terminal_symbol: "break"
simple part: terminal_symbol: "continue"
recover from fun, now_tree: control_stmt
simple part: non_terminal_symbol: endline
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: expr_stmt
Now_name: expr_stmt
create now_tree : expr_stmt
Start analyze Declaration: 
simple part: non_terminal_symbol: expr
simple part: non_terminal_symbol: endline
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: end_stmt
Now_name: end_stmt
create now_tree : end_stmt
Start analyze Declaration: 
simple part: terminal_symbol: "end"
simple part: terminal_symbol: ENDL
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: expr
Now_name: expr
create now_tree : expr
Start analyze Declaration: 
simple part: non_terminal_symbol: single_expr
add new node: expr_opt_2
record old tree: expr
change now tree: expr_opt_2
simple part: terminal_symbol: ","
simple part: non_terminal_symbol: expr
simple part: non_terminal_symbol: NULL
recover from fun, now_tree: expr
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: single_expr
Now_name: single_expr
create now_tree : single_expr
Start analyze Declaration: 
simple part: non_terminal_symbol: lambda_expr
simple part: non_terminal_symbol: basic_expr
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: basic_expr
Now_name: basic_expr
create now_tree : basic_expr
Start analyze Declaration: 
simple part: non_terminal_symbol: var_bind
simple part: terminal_symbol: "="
simple part: non_terminal_symbol: cond_expr
simple part: non_terminal_symbol: cond_expr
add new node: basic_expr_opt_2
record old tree: basic_expr
change now tree: basic_expr_opt_2
simple part: non_terminal_symbol: asi_op
simple part: non_terminal_symbol: single_expr
simple part: non_terminal_symbol: NULL
recover from fun, now_tree: basic_expr
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: asi_op
Now_name: asi_op
create now_tree : asi_op
Start analyze Declaration: 
simple part: terminal_symbol: "="
simple part: terminal_symbol: ":="
simple part: terminal_symbol: "+="
simple part: terminal_symbol: "-="
simple part: terminal_symbol: "*="
simple part: terminal_symbol: "/="
simple part: terminal_symbol: "%="
simple part: terminal_symbol: "^="
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: lambda_expr
Now_name: lambda_expr
create now_tree : lambda_expr
Start analyze Declaration: 
simple part: terminal_symbol: "["
add new node: lambda_expr_opt_2
record old tree: lambda_expr
change now tree: lambda_expr_opt_2
simple part: non_terminal_symbol: capture_list
simple part: non_terminal_symbol: NULL
recover from fun, now_tree: lambda_expr
simple part: terminal_symbol: "]"
simple part: terminal_symbol: "("
add new node: lambda_expr_opt_5
record old tree: lambda_expr
change now tree: lambda_expr_opt_5
simple part: non_terminal_symbol: argument_list
simple part: non_terminal_symbol: NULL
recover from fun, now_tree: lambda_expr
simple part: terminal_symbol: ")"
simple part: non_terminal_symbol: lambda_body
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: capture_list
Now_name: capture_list
create now_tree : capture_list
Start analyze Declaration: 
add new node: capture_list_opt_1
record old tree: capture_list
change now tree: capture_list_opt_1
simple part: terminal_symbol: "="
simple part: non_terminal_symbol: NULL
recover from fun, now_tree: capture_list
simple part: terminal_symbol: ID
add new node: capture_list_rep_3
record old tree: capture_list
change now tree: capture_list_rep_3
simple part: terminal_symbol: ","
simple part: non_terminal_symbol: capture_list
simple part: non_terminal_symbol: capture_list_rep_3
simple part: non_terminal_symbol: NULL
recover from fun, now_tree: capture_list
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: argument_list
Now_name: argument_list
create now_tree : argument_list
Start analyze Declaration: 
simple part: terminal_symbol: ETC
simple part: terminal_symbol: ID
add new node: argument_list_opt_1
record old tree: argument_list
change now tree: argument_list_opt_1
simple part: terminal_symbol: "="
simple part: non_terminal_symbol: NULL
recover from fun, now_tree: argument_list
simple part: terminal_symbol: ID
add new node: argument_list_opt_3
record old tree: argument_list
change now tree: argument_list_opt_3
simple part: terminal_symbol: ":"
simple part: non_terminal_symbol: NULL
recover from fun, now_tree: argument_list
simple part: non_terminal_symbol: visit_expr
add new node: argument_list_rep_5
record old tree: argument_list
change now tree: argument_list_rep_5
simple part: terminal_symbol: ","
simple part: non_terminal_symbol: argument_list
simple part: non_terminal_symbol: argument_list_rep_5
simple part: non_terminal_symbol: NULL
recover from fun, now_tree: argument_list
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: lambda_body
Now_name: lambda_body
create now_tree : lambda_body
Start analyze Declaration: 
simple part: terminal_symbol: "{"
add new node: lambda_body_rep_2
record old tree: lambda_body
change now tree: lambda_body_rep_2
simple part: non_terminal_symbol: statement
add new node: lambda_body_rep_2_rep_2
record old tree: lambda_body_rep_2
change now tree: lambda_body_rep_2_rep_2
simple part: terminal_symbol: ENDL
simple part: non_terminal_symbol: lambda_body_rep_2_rep_2
simple part: non_terminal_symbol: NULL
recover from fun, now_tree: lambda_body_rep_2
simple part: non_terminal_symbol: lambda_body_rep_2
simple part: non_terminal_symbol: NULL
recover from fun, now_tree: lambda_body
simple part: terminal_symbol: "}"
simple part: terminal_symbol: "->"
simple part: non_terminal_symbol: cond_expr
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: cond_expr
Now_name: cond_expr
create now_tree : cond_expr
Start analyze Declaration: 
simple part: non_terminal_symbol: logic_expr
add new node: cond_expr_opt_2
record old tree: cond_expr
change now tree: cond_expr_opt_2
simple part: non_terminal_symbol: cond_postfix
simple part: non_terminal_symbol: NULL
recover from fun, now_tree: cond_expr
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: cond_postfix
Now_name: cond_postfix
create now_tree : cond_postfix
Start analyze Declaration: 
simple part: terminal_symbol: "?"
simple part: non_terminal_symbol: logic_or_expr
simple part: terminal_symbol: ":"
simple part: non_terminal_symbol: cond_expr
simple part: terminal_symbol: ":"
simple part: non_terminal_symbol: logic_or_expr
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: logic_or_expr
Now_name: logic_or_expr
create now_tree : logic_or_expr
Start analyze Declaration: 
simple part: non_terminal_symbol: logic_and_expr
add new node: logic_or_expr_opt_2
record old tree: logic_or_expr
change now tree: logic_or_expr_opt_2
simple part: terminal_symbol: "||"
simple part: terminal_symbol: "or"
simple part: non_terminal_symbol: NULL
recover from fun, now_tree: logic_or_expr
simple part: non_terminal_symbol: logic_or_expr
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: logic_and_expr
Now_name: logic_and_expr
create now_tree : logic_and_expr
Start analyze Declaration: 
simple part: non_terminal_symbol: equal_expr
add new node: logic_and_expr_opt_2
record old tree: logic_and_expr
change now tree: logic_and_expr_opt_2
simple part: terminal_symbol: "&&"
simple part: terminal_symbol: "and"
simple part: non_terminal_symbol: NULL
recover from fun, now_tree: logic_and_expr
simple part: non_terminal_symbol: logic_and_expr
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: equal_expr
Now_name: equal_expr
create now_tree : equal_expr
Start analyze Declaration: 
simple part: non_terminal_symbol: relat_expr
add new node: equal_expr_opt_2
record old tree: equal_expr
change now tree: equal_expr_opt_2
add new node: equal_expr_opt_2_decl_1
record old tree: equal_expr_opt_2
change now tree: equal_expr_opt_2_decl_1
simple part: terminal_symbol: "=="
simple part: terminal_symbol: "!="
recover from fun, now_tree: equal_expr_opt_2
simple part: non_terminal_symbol: equal_expr
simple part: non_terminal_symbol: NULL
recover from fun, now_tree: equal_expr
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: relat_expr
Now_name: relat_expr
create now_tree : relat_expr
Start analyze Declaration: 
simple part: non_terminal_symbol: add_expr
add new node: relat_expr_opt_2
record old tree: relat_expr
change now tree: relat_expr_opt_2
add new node: relat_expr_opt_2_decl_1
record old tree: relat_expr_opt_2
change now tree: relat_expr_opt_2_decl_1
simple part: terminal_symbol: ">"
simple part: terminal_symbol: "<"
simple part: terminal_symbol: ">="
simple part: terminal_symbol: "<="
recover from fun, now_tree: relat_expr_opt_2
simple part: non_terminal_symbol: relat_expr
simple part: non_terminal_symbol: NULL
recover from fun, now_tree: relat_expr
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: add_expr
Now_name: add_expr
create now_tree : add_expr
Start analyze Declaration: 
simple part: non_terminal_symbol: mul_expr
add new node: add_expr_opt_2
record old tree: add_expr
change now tree: add_expr_opt_2
add new node: add_expr_opt_2_decl_1
record old tree: add_expr_opt_2
change now tree: add_expr_opt_2_decl_1
simple part: terminal_symbol: "+"
simple part: terminal_symbol: "-"
recover from fun, now_tree: add_expr_opt_2
simple part: non_terminal_symbol: add_expr
simple part: non_terminal_symbol: NULL
recover from fun, now_tree: add_expr
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: mul_expr
Now_name: mul_expr
create now_tree : mul_expr
Start analyze Declaration: 
simple part: non_terminal_symbol: unary_expr
add new node: mul_expr_decl_2
record old tree: mul_expr
change now tree: mul_expr_decl_2
add new node: mul_expr_decl_2_opt_1
record old tree: mul_expr_decl_2
change now tree: mul_expr_decl_2_opt_1
add new node: mul_expr_decl_2_opt_1_decl_1
record old tree: mul_expr_decl_2_opt_1
change now tree: mul_expr_decl_2_opt_1_decl_1
simple part: terminal_symbol: "/"
simple part: terminal_symbol: "%"
simple part: terminal_symbol: "^"
recover from fun, now_tree: mul_expr_decl_2_opt_1
simple part: non_terminal_symbol: mul_expr
simple part: non_terminal_symbol: NULL
recover from fun, now_tree: mul_expr_decl_2
simple part: terminal_symbol: ENDL
recover from fun, now_tree: mul_expr
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: unary_expr
Now_name: unary_expr
create now_tree : unary_expr
Start analyze Declaration: 
add new node: unary_expr_decl_1
record old tree: unary_expr
change now tree: unary_expr_decl_1
simple part: non_terminal_symbol: unary_op
simple part: non_terminal_symbol: unary_expr
add new node: unary_expr_decl_1_decl_1
record old tree: unary_expr_decl_1
change now tree: unary_expr_decl_1_decl_1
simple part: terminal_symbol: "new"
simple part: terminal_symbol: "gcnew"
recover from fun, now_tree: unary_expr_decl_1
simple part: non_terminal_symbol: unary_expr
add new node: unary_expr_decl_1_opt_3
record old tree: unary_expr_decl_1
change now tree: unary_expr_decl_1_opt_3
simple part: non_terminal_symbol: array
simple part: non_terminal_symbol: NULL
recover from fun, now_tree: unary_expr_decl_1
simple part: non_terminal_symbol: prim_expr
add new node: unary_expr_decl_1_decl_2
record old tree: unary_expr_decl_1
change now tree: unary_expr_decl_1_decl_2
add new node: unary_expr_decl_1_decl_2_opt_1
record old tree: unary_expr_decl_1_decl_2
change now tree: unary_expr_decl_1_decl_2_opt_1
simple part: non_terminal_symbol: postifx
simple part: non_terminal_symbol: NULL
recover from fun, now_tree: unary_expr_decl_1_decl_2
simple part: terminal_symbol: ENDL
recover from fun, now_tree: unary_expr_decl_1
recover from fun, now_tree: unary_expr
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: unary_op
Now_name: unary_op
create now_tree : unary_op
Start analyze Declaration: 
simple part: terminal_symbol: "typeid"
simple part: terminal_symbol: "++"
simple part: terminal_symbol: "--"
simple part: terminal_symbol: "*"
simple part: terminal_symbol: "&"
simple part: terminal_symbol: "-"
simple part: terminal_symbol: "!"
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: postfix_expr
Now_name: postfix_expr
create now_tree : postfix_expr
Start analyze Declaration: 
simple part: non_terminal_symbol: visit_expr
simple part: non_terminal_symbol: constant
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: visit_expr
Now_name: visit_expr
create now_tree : visit_expr
Start analyze Declaration: 
simple part: non_terminal_symbol: object
add new node: visit_expr_opt_2
record old tree: visit_expr
change now tree: visit_expr_opt_2
simple part: terminal_symbol: "->"
simple part: terminal_symbol: "."
simple part: non_terminal_symbol: NULL
recover from fun, now_tree: visit_expr
simple part: non_terminal_symbol: visit_expr
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: object
Now_name: object
create now_tree : object
Start analyze Declaration: 
add new node: object_decl_1
record old tree: object
change now tree: object_decl_1
simple part: non_terminal_symbol: array
add new node: object_decl_1_opt_2
record old tree: object_decl_1
change now tree: object_decl_1_opt_2
simple part: non_terminal_symbol: index
simple part: non_terminal_symbol: NULL
recover from fun, now_tree: object_decl_1
simple part: non_terminal_symbol: str
add new node: object_decl_1_opt_2
record old tree: object_decl_1
change now tree: object_decl_1_opt_2
simple part: non_terminal_symbol: index
simple part: non_terminal_symbol: NULL
recover from fun, now_tree: object_decl_1
simple part: terminal_symbol: "local"
simple part: terminal_symbol: "global"
simple part: non_terminal_symbol: element
simple part: terminal_symbol: CHAR
recover from fun, now_tree: object
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: element
Now_name: element
create now_tree : element
Start analyze Declaration: 
add new node: element_decl_1
record old tree: element
change now tree: element_decl_1
simple part: terminal_symbol: ID
simple part: terminal_symbol: "("
simple part: non_terminal_symbol: single_expr
simple part: terminal_symbol: ")"
recover from fun, now_tree: element
add new node: element_decl_2
record old tree: element
change now tree: element_decl_2
simple part: terminal_symbol: ENDL
add new node: element_decl_2_rep_1
record old tree: element_decl_2
change now tree: element_decl_2_rep_1
simple part: non_terminal_symbol: fcall
simple part: non_terminal_symbol: element_decl_2_rep_1
simple part: non_terminal_symbol: index
simple part: non_terminal_symbol: element_decl_2_rep_1
simple part: non_terminal_symbol: NULL
recover from fun, now_tree: element_decl_2
recover from fun, now_tree: element
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: constant
Now_name: constant
create now_tree : constant
Start analyze Declaration: 
simple part: terminal_symbol: NUM
simple part: terminal_symbol: "null"
simple part: terminal_symbol: "true"
simple part: terminal_symbol: "false"
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: array
Now_name: array
create now_tree : array
Start analyze Declaration: 
simple part: terminal_symbol: "{"
add new node: array_opt_2
record old tree: array
change now tree: array_opt_2
simple part: non_terminal_symbol: expr
simple part: non_terminal_symbol: NULL
recover from fun, now_tree: array
simple part: terminal_symbol: "}"
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: fcall
Now_name: fcall
create now_tree : fcall
Start analyze Declaration: 
simple part: terminal_symbol: "("
add new node: fcall_opt_2
record old tree: fcall
change now tree: fcall_opt_2
simple part: non_terminal_symbol: expr
simple part: non_terminal_symbol: NULL
recover from fun, now_tree: fcall
simple part: terminal_symbol: ")"
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: index
Now_name: index
create now_tree : index
Start analyze Declaration: 
simple part: terminal_symbol: "["
simple part: non_terminal_symbol: basic_expr
simple part: terminal_symbol: "]"
End analyze Decalration 



#########
show list
#########
################
show_origin_info
################
begin ::= stmts 
ignore ::= ignore_rep_1 
ignore_rep_1 ::= NULL 
ignore_rep_1 ::= ENDL ignore_rep_1 
endline ::= ";" 
endline ::= ENDL 
stmts ::= stmts_rep_1 
stmts_rep_1 ::= NULL 
stmts_rep_1 ::= statements stmts_rep_1_rep_2 stmts_rep_1 
stmts_rep_1_rep_2 ::= NULL 
stmts_rep_1_rep_2 ::= ENDL stmts_rep_1_rep_2 
decl_stmts ::= decl_stmts_rep_1 
decl_stmts_rep_1 ::= NULL 
decl_stmts_rep_1 ::= declaration decl_stmts_rep_1_rep_2 decl_stmts_rep_1 
decl_stmts_rep_1_rep_2 ::= NULL 
decl_stmts_rep_1_rep_2 ::= ENDL decl_stmts_rep_1_rep_2 
endblock ::= catch_stmt 
endblock ::= until_stmt 
endblock ::= else_stmt 
endblock ::= end_stmt 
statement ::= expr_stmt 
statement ::= class_stmt 
statement ::= throw_stmt 
statement ::= try_stmt 
statement ::= return_stmt 
statement ::= function_stmt 
statement ::= control_stmt 
statement ::= foreach_stmt 
statement ::= for_stmt 
statement ::= loop_stmt 
statement ::= while_stmt 
statement ::= switch_stmt 
statement ::= if_stmt 
statement ::= using_stmt 
statement ::= namespace_stmt 
statement ::= block_stmt 
statement ::= var_stmt 
statement ::= import_stmt 
statement ::= package_stmt 
statement ::= prep_stmt 
declaration ::= class_stmt 
declaration ::= function_stmt 
declaration ::= using_stmt 
declaration ::= var_stmt 
declaration ::= namespace_stmt 
declaration ::= prep_stmt 
prep_stmt ::= PREP ENDL 
package_stmt ::= "package" ID endline 
import_stmt ::= "import" import_list endline 
var_def ::= var_list 
var_def ::= var_bind "=" basic_expr 
var_stmt ::= var_stmt_decl_1 var_def endline 
var_stmt_decl_1 ::= "constant" 
var_stmt_decl_1 ::= "link" 
var_stmt_decl_1 ::= "var" 
var_bind ::= "(" var_bind_list var_bind_rep_3 ")" 
var_bind_rep_3 ::= NULL 
var_bind_rep_3 ::= "," var_bind_list var_bind_rep_3 
var_bind_list ::= var_bind 
var_bind_list ::= ETC 
var_bind_list ::= ID 
var_list ::= ID "=" single_expr var_list_opt_4 
var_list_opt_4 ::= NULL 
var_list_opt_4 ::= "," var_list 
block_stmt ::= "block" ENDL stmts "end" ENDL 
namespace_stmt ::= "namespace" ID ENDL decl_stmts "end" ENDL 
using_stmt ::= "using" using_list endline 
using_list ::= module_list using_list_opt_2 
using_list_opt_2 ::= NULL 
using_list_opt_2 ::= "," using_list 
if_stmt ::= "if" basic_expr ENDL stmts if_stmt_rep_5 
if_stmt_rep_5 ::= NULL 
if_stmt_rep_5 ::= else_stmt stmts "end" ENDL if_stmt_rep_5 
else_stmt ::= "else" else_stmt_opt_2 ENDL basic_expr ENDL 
else_stmt_opt_2 ::= NULL 
else_stmt_opt_2 ::= "if" 
switch_stmt ::= "switch" basic_expr ENDL switch_stmts "end" ENDL 
switch_stmts ::= switch_stmts_rep_1 switch_stmts_rep_2 
switch_stmts_rep_2 ::= NULL 
switch_stmts_rep_2 ::= ENDL switch_stmts_rep_2 
switch_stmts_rep_1 ::= NULL 
switch_stmts_rep_1 ::= switch_default switch_stmts_rep_1 
switch_stmts_rep_1 ::= switch_case switch_stmts_rep_1 
switch_case ::= "case" logic_or_expr ENDL stmts "end" ENDL 
switch_default ::= "default" ENDL stmts "end" ENDL 
while_stmt ::= "while" basic_expr ENDL stmts "end" ENDL 
loop_stmt ::= "loop" ENDL stmts loop_stmt_decl_4 
loop_stmt_decl_4 ::= ENDL 
loop_stmt_decl_4 ::= "end" 
loop_stmt_decl_4 ::= until_stmt 
until_stmt ::= "until" basic_expr ENDL 
for_stmt ::= "for" for_stmt_opt_2 for_stmt_decl_3 for_stmt_opt_4 for_stmt_decl_5 for_stmt_opt_6 for_body 
for_stmt_opt_6 ::= NULL 
for_stmt_opt_6 ::= basic_expr 
for_stmt_decl_5 ::= "," 
for_stmt_decl_5 ::= ";" 
for_stmt_opt_4 ::= NULL 
for_stmt_opt_4 ::= basic_expr 
for_stmt_decl_3 ::= "," 
for_stmt_decl_3 ::= ";" 
for_stmt_opt_2 ::= NULL 
for_stmt_opt_2 ::= var_def 
foreach_stmt ::= "foreach" ID "in" basic_expr for_body 
for_body ::= for_body_decl_1 
for_body_decl_1 ::= ENDL stmts "end" ENDL 
for_body_decl_1 ::= "do" basic_expr endline 
function_stmt ::= "function" ID "(" function_stmt_opt_4 ")" function_stmt_opt_6 function_body 
function_stmt_opt_6 ::= NULL 
function_stmt_opt_6 ::= "override" 
function_stmt_opt_4 ::= NULL 
function_stmt_opt_4 ::= argument_list 
function_body ::= function_body_decl_1 
function_body_decl_1 ::= ENDL stmts "end" ENDL 
function_body_decl_1 ::= "{" stmts "}" 
return_stmt ::= "return" return_stmt_opt_2 endline 
return_stmt_opt_2 ::= NULL 
return_stmt_opt_2 ::= expr 
try_stmt ::= "try" ENDL stmts try_stmt_rep_4 "end" ENDL 
try_stmt_rep_4 ::= NULL 
try_stmt_rep_4 ::= catch_stmt stmts try_stmt_rep_4 
catch_stmt ::= "catch" ID catch_stmt_opt_3 ENDL 
catch_stmt_opt_3 ::= NULL 
catch_stmt_opt_3 ::= ":" visit_expr 
throw_stmt ::= "throw" throw_stmt_opt_2 endline 
throw_stmt_opt_2 ::= NULL 
throw_stmt_opt_2 ::= expr 
class_stmt ::= class_stmt_decl_1 ID class_stmt_opt_3 ENDL decl_stmts "end" ENDL 
class_stmt_opt_3 ::= NULL 
class_stmt_opt_3 ::= "extends" visit_expr 
class_stmt_decl_1 ::= "struct" 
class_stmt_decl_1 ::= "class" 
control_stmt ::= control_stmt_decl_1 endline 
control_stmt_decl_1 ::= "continue" 
control_stmt_decl_1 ::= "break" 
expr_stmt ::= expr endline 
end_stmt ::= "end" ENDL 
expr ::= single_expr expr_opt_2 
expr_opt_2 ::= NULL 
expr_opt_2 ::= "," expr 
single_expr ::= basic_expr 
single_expr ::= lambda_expr 
basic_expr ::= cond_expr basic_expr_opt_2 
basic_expr ::= var_bind "=" cond_expr 
basic_expr_opt_2 ::= NULL 
basic_expr_opt_2 ::= asi_op single_expr 
asi_op ::= "^=" 
asi_op ::= "%=" 
asi_op ::= "/=" 
asi_op ::= "*=" 
asi_op ::= "-=" 
asi_op ::= "+=" 
asi_op ::= ":=" 
asi_op ::= "=" 
lambda_expr ::= "[" lambda_expr_opt_2 "]" "(" lambda_expr_opt_5 ")" lambda_body 
lambda_expr_opt_5 ::= NULL 
lambda_expr_opt_5 ::= argument_list 
lambda_expr_opt_2 ::= NULL 
lambda_expr_opt_2 ::= capture_list 
capture_list ::= capture_list_opt_1 ID capture_list_rep_3 
capture_list_rep_3 ::= NULL 
capture_list_rep_3 ::= "," capture_list capture_list_rep_3 
capture_list_opt_1 ::= NULL 
capture_list_opt_1 ::= "=" 
argument_list ::= argument_list_opt_1 ID argument_list_opt_3 visit_expr argument_list_rep_5 
argument_list ::= ETC ID 
argument_list_rep_5 ::= NULL 
argument_list_rep_5 ::= "," argument_list argument_list_rep_5 
argument_list_opt_3 ::= NULL 
argument_list_opt_3 ::= ":" 
argument_list_opt_1 ::= NULL 
argument_list_opt_1 ::= "=" 
lambda_body ::= "->" cond_expr 
lambda_body ::= "{" lambda_body_rep_2 "}" 
lambda_body_rep_2 ::= NULL 
lambda_body_rep_2 ::= statement lambda_body_rep_2_rep_2 lambda_body_rep_2 
lambda_body_rep_2_rep_2 ::= NULL 
lambda_body_rep_2_rep_2 ::= ENDL lambda_body_rep_2_rep_2 
cond_expr ::= logic_expr cond_expr_opt_2 
cond_expr_opt_2 ::= NULL 
cond_expr_opt_2 ::= cond_postfix 
cond_postfix ::= ":" logic_or_expr 
cond_postfix ::= "?" logic_or_expr ":" cond_expr 
logic_or_expr ::= logic_and_expr logic_or_expr_opt_2 logic_or_expr 
logic_or_expr_opt_2 ::= NULL 
logic_or_expr_opt_2 ::= "or" 
logic_or_expr_opt_2 ::= "||" 
logic_and_expr ::= equal_expr logic_and_expr_opt_2 logic_and_expr 
logic_and_expr_opt_2 ::= NULL 
logic_and_expr_opt_2 ::= "and" 
logic_and_expr_opt_2 ::= "&&" 
equal_expr ::= relat_expr equal_expr_opt_2 
equal_expr_opt_2 ::= NULL 
equal_expr_opt_2 ::= equal_expr_opt_2_decl_1 equal_expr 
equal_expr_opt_2_decl_1 ::= "!=" 
equal_expr_opt_2_decl_1 ::= "==" 
relat_expr ::= add_expr relat_expr_opt_2 
relat_expr_opt_2 ::= NULL 
relat_expr_opt_2 ::= relat_expr_opt_2_decl_1 relat_expr 
relat_expr_opt_2_decl_1 ::= "<=" 
relat_expr_opt_2_decl_1 ::= ">=" 
relat_expr_opt_2_decl_1 ::= "<" 
relat_expr_opt_2_decl_1 ::= ">" 
add_expr ::= mul_expr add_expr_opt_2 
add_expr_opt_2 ::= NULL 
add_expr_opt_2 ::= add_expr_opt_2_decl_1 add_expr 
add_expr_opt_2_decl_1 ::= "-" 
add_expr_opt_2_decl_1 ::= "+" 
mul_expr ::= unary_expr mul_expr_decl_2 
mul_expr_decl_2 ::= ENDL 
mul_expr_decl_2 ::= mul_expr_decl_2_opt_1 
mul_expr_decl_2_opt_1 ::= NULL 
mul_expr_decl_2_opt_1 ::= mul_expr_decl_2_opt_1_decl_1 mul_expr 
mul_expr_decl_2_opt_1_decl_1 ::= "^" 
mul_expr_decl_2_opt_1_decl_1 ::= "%" 
mul_expr_decl_2_opt_1_decl_1 ::= "/" 
unary_expr ::= unary_expr_decl_1 
unary_expr_decl_1 ::= prim_expr unary_expr_decl_1_decl_2 
unary_expr_decl_1 ::= unary_expr_decl_1_decl_1 unary_expr unary_expr_decl_1_opt_3 
unary_expr_decl_1 ::= unary_op unary_expr 
unary_expr_decl_1_decl_2 ::= ENDL 
unary_expr_decl_1_decl_2 ::= unary_expr_decl_1_decl_2_opt_1 
unary_expr_decl_1_decl_2_opt_1 ::= NULL 
unary_expr_decl_1_decl_2_opt_1 ::= postifx 
unary_expr_decl_1_opt_3 ::= NULL 
unary_expr_decl_1_opt_3 ::= array 
unary_expr_decl_1_decl_1 ::= "gcnew" 
unary_expr_decl_1_decl_1 ::= "new" 
unary_op ::= "!" 
unary_op ::= "-" 
unary_op ::= "&" 
unary_op ::= "*" 
unary_op ::= "--" 
unary_op ::= "++" 
unary_op ::= "typeid" 
postfix_expr ::= constant 
postfix_expr ::= visit_expr 
visit_expr ::= object visit_expr_opt_2 visit_expr 
visit_expr_opt_2 ::= NULL 
visit_expr_opt_2 ::= "." 
visit_expr_opt_2 ::= "->" 
object ::= object_decl_1 
object_decl_1 ::= CHAR 
object_decl_1 ::= element 
object_decl_1 ::= "global" 
object_decl_1 ::= "local" 
object_decl_1 ::= str object_decl_1_opt_2 
object_decl_1 ::= array object_decl_1_opt_2 
object_decl_1_opt_2 ::= NULL 
object_decl_1_opt_2 ::= index 
object_decl_1_opt_2 ::= NULL 
object_decl_1_opt_2 ::= index 
element ::= element_decl_1 element_decl_2 
element_decl_2 ::= element_decl_2_rep_1 
element_decl_2 ::= ENDL 
element_decl_2_rep_1 ::= NULL 
element_decl_2_rep_1 ::= index element_decl_2_rep_1 
element_decl_2_rep_1 ::= fcall element_decl_2_rep_1 
element_decl_1 ::= "(" single_expr ")" 
element_decl_1 ::= ID 
constant ::= "false" 
constant ::= "true" 
constant ::= "null" 
constant ::= NUM 
array ::= "{" array_opt_2 "}" 
array_opt_2 ::= NULL 
array_opt_2 ::= expr 
fcall ::= "(" fcall_opt_2 ")" 
fcall_opt_2 ::= NULL 
fcall_opt_2 ::= expr 
index ::= "[" basic_expr "]" 
##############################
show info after add start node
##############################
%start% ::= begin 
begin ::= stmts 
ignore ::= ignore_rep_1 
ignore_rep_1 ::= NULL 
ignore_rep_1 ::= ENDL ignore_rep_1 
endline ::= ";" 
endline ::= ENDL 
stmts ::= stmts_rep_1 
stmts_rep_1 ::= NULL 
stmts_rep_1 ::= statements stmts_rep_1_rep_2 stmts_rep_1 
stmts_rep_1_rep_2 ::= NULL 
stmts_rep_1_rep_2 ::= ENDL stmts_rep_1_rep_2 
decl_stmts ::= decl_stmts_rep_1 
decl_stmts_rep_1 ::= NULL 
decl_stmts_rep_1 ::= declaration decl_stmts_rep_1_rep_2 decl_stmts_rep_1 
decl_stmts_rep_1_rep_2 ::= NULL 
decl_stmts_rep_1_rep_2 ::= ENDL decl_stmts_rep_1_rep_2 
endblock ::= catch_stmt 
endblock ::= until_stmt 
endblock ::= else_stmt 
endblock ::= end_stmt 
statement ::= expr_stmt 
statement ::= class_stmt 
statement ::= throw_stmt 
statement ::= try_stmt 
statement ::= return_stmt 
statement ::= function_stmt 
statement ::= control_stmt 
statement ::= foreach_stmt 
statement ::= for_stmt 
statement ::= loop_stmt 
statement ::= while_stmt 
statement ::= switch_stmt 
statement ::= if_stmt 
statement ::= using_stmt 
statement ::= namespace_stmt 
statement ::= block_stmt 
statement ::= var_stmt 
statement ::= import_stmt 
statement ::= package_stmt 
statement ::= prep_stmt 
declaration ::= class_stmt 
declaration ::= function_stmt 
declaration ::= using_stmt 
declaration ::= var_stmt 
declaration ::= namespace_stmt 
declaration ::= prep_stmt 
prep_stmt ::= PREP ENDL 
package_stmt ::= "package" ID endline 
import_stmt ::= "import" import_list endline 
var_def ::= var_list 
var_def ::= var_bind "=" basic_expr 
var_stmt ::= var_stmt_decl_1 var_def endline 
var_stmt_decl_1 ::= "constant" 
var_stmt_decl_1 ::= "link" 
var_stmt_decl_1 ::= "var" 
var_bind ::= "(" var_bind_list var_bind_rep_3 ")" 
var_bind_rep_3 ::= NULL 
var_bind_rep_3 ::= "," var_bind_list var_bind_rep_3 
var_bind_list ::= var_bind 
var_bind_list ::= ETC 
var_bind_list ::= ID 
var_list ::= ID "=" single_expr var_list_opt_4 
var_list_opt_4 ::= NULL 
var_list_opt_4 ::= "," var_list 
block_stmt ::= "block" ENDL stmts "end" ENDL 
namespace_stmt ::= "namespace" ID ENDL decl_stmts "end" ENDL 
using_stmt ::= "using" using_list endline 
using_list ::= module_list using_list_opt_2 
using_list_opt_2 ::= NULL 
using_list_opt_2 ::= "," using_list 
if_stmt ::= "if" basic_expr ENDL stmts if_stmt_rep_5 
if_stmt_rep_5 ::= NULL 
if_stmt_rep_5 ::= else_stmt stmts "end" ENDL if_stmt_rep_5 
else_stmt ::= "else" else_stmt_opt_2 ENDL basic_expr ENDL 
else_stmt_opt_2 ::= NULL 
else_stmt_opt_2 ::= "if" 
switch_stmt ::= "switch" basic_expr ENDL switch_stmts "end" ENDL 
switch_stmts ::= switch_stmts_rep_1 switch_stmts_rep_2 
switch_stmts_rep_2 ::= NULL 
switch_stmts_rep_2 ::= ENDL switch_stmts_rep_2 
switch_stmts_rep_1 ::= NULL 
switch_stmts_rep_1 ::= switch_default switch_stmts_rep_1 
switch_stmts_rep_1 ::= switch_case switch_stmts_rep_1 
switch_case ::= "case" logic_or_expr ENDL stmts "end" ENDL 
switch_default ::= "default" ENDL stmts "end" ENDL 
while_stmt ::= "while" basic_expr ENDL stmts "end" ENDL 
loop_stmt ::= "loop" ENDL stmts loop_stmt_decl_4 
loop_stmt_decl_4 ::= ENDL 
loop_stmt_decl_4 ::= "end" 
loop_stmt_decl_4 ::= until_stmt 
until_stmt ::= "until" basic_expr ENDL 
for_stmt ::= "for" for_stmt_opt_2 for_stmt_decl_3 for_stmt_opt_4 for_stmt_decl_5 for_stmt_opt_6 for_body 
for_stmt_opt_6 ::= NULL 
for_stmt_opt_6 ::= basic_expr 
for_stmt_decl_5 ::= "," 
for_stmt_decl_5 ::= ";" 
for_stmt_opt_4 ::= NULL 
for_stmt_opt_4 ::= basic_expr 
for_stmt_decl_3 ::= "," 
for_stmt_decl_3 ::= ";" 
for_stmt_opt_2 ::= NULL 
for_stmt_opt_2 ::= var_def 
foreach_stmt ::= "foreach" ID "in" basic_expr for_body 
for_body ::= for_body_decl_1 
for_body_decl_1 ::= ENDL stmts "end" ENDL 
for_body_decl_1 ::= "do" basic_expr endline 
function_stmt ::= "function" ID "(" function_stmt_opt_4 ")" function_stmt_opt_6 function_body 
function_stmt_opt_6 ::= NULL 
function_stmt_opt_6 ::= "override" 
function_stmt_opt_4 ::= NULL 
function_stmt_opt_4 ::= argument_list 
function_body ::= function_body_decl_1 
function_body_decl_1 ::= ENDL stmts "end" ENDL 
function_body_decl_1 ::= "{" stmts "}" 
return_stmt ::= "return" return_stmt_opt_2 endline 
return_stmt_opt_2 ::= NULL 
return_stmt_opt_2 ::= expr 
try_stmt ::= "try" ENDL stmts try_stmt_rep_4 "end" ENDL 
try_stmt_rep_4 ::= NULL 
try_stmt_rep_4 ::= catch_stmt stmts try_stmt_rep_4 
catch_stmt ::= "catch" ID catch_stmt_opt_3 ENDL 
catch_stmt_opt_3 ::= NULL 
catch_stmt_opt_3 ::= ":" visit_expr 
throw_stmt ::= "throw" throw_stmt_opt_2 endline 
throw_stmt_opt_2 ::= NULL 
throw_stmt_opt_2 ::= expr 
class_stmt ::= class_stmt_decl_1 ID class_stmt_opt_3 ENDL decl_stmts "end" ENDL 
class_stmt_opt_3 ::= NULL 
class_stmt_opt_3 ::= "extends" visit_expr 
class_stmt_decl_1 ::= "struct" 
class_stmt_decl_1 ::= "class" 
control_stmt ::= control_stmt_decl_1 endline 
control_stmt_decl_1 ::= "continue" 
control_stmt_decl_1 ::= "break" 
expr_stmt ::= expr endline 
end_stmt ::= "end" ENDL 
expr ::= single_expr expr_opt_2 
expr_opt_2 ::= NULL 
expr_opt_2 ::= "," expr 
single_expr ::= basic_expr 
single_expr ::= lambda_expr 
basic_expr ::= cond_expr basic_expr_opt_2 
basic_expr ::= var_bind "=" cond_expr 
basic_expr_opt_2 ::= NULL 
basic_expr_opt_2 ::= asi_op single_expr 
asi_op ::= "^=" 
asi_op ::= "%=" 
asi_op ::= "/=" 
asi_op ::= "*=" 
asi_op ::= "-=" 
asi_op ::= "+=" 
asi_op ::= ":=" 
asi_op ::= "=" 
lambda_expr ::= "[" lambda_expr_opt_2 "]" "(" lambda_expr_opt_5 ")" lambda_body 
lambda_expr_opt_5 ::= NULL 
lambda_expr_opt_5 ::= argument_list 
lambda_expr_opt_2 ::= NULL 
lambda_expr_opt_2 ::= capture_list 
capture_list ::= capture_list_opt_1 ID capture_list_rep_3 
capture_list_rep_3 ::= NULL 
capture_list_rep_3 ::= "," capture_list capture_list_rep_3 
capture_list_opt_1 ::= NULL 
capture_list_opt_1 ::= "=" 
argument_list ::= argument_list_opt_1 ID argument_list_opt_3 visit_expr argument_list_rep_5 
argument_list ::= ETC ID 
argument_list_rep_5 ::= NULL 
argument_list_rep_5 ::= "," argument_list argument_list_rep_5 
argument_list_opt_3 ::= NULL 
argument_list_opt_3 ::= ":" 
argument_list_opt_1 ::= NULL 
argument_list_opt_1 ::= "=" 
lambda_body ::= "->" cond_expr 
lambda_body ::= "{" lambda_body_rep_2 "}" 
lambda_body_rep_2 ::= NULL 
lambda_body_rep_2 ::= statement lambda_body_rep_2_rep_2 lambda_body_rep_2 
lambda_body_rep_2_rep_2 ::= NULL 
lambda_body_rep_2_rep_2 ::= ENDL lambda_body_rep_2_rep_2 
cond_expr ::= logic_expr cond_expr_opt_2 
cond_expr_opt_2 ::= NULL 
cond_expr_opt_2 ::= cond_postfix 
cond_postfix ::= ":" logic_or_expr 
cond_postfix ::= "?" logic_or_expr ":" cond_expr 
logic_or_expr ::= logic_and_expr logic_or_expr_opt_2 logic_or_expr 
logic_or_expr_opt_2 ::= NULL 
logic_or_expr_opt_2 ::= "or" 
logic_or_expr_opt_2 ::= "||" 
logic_and_expr ::= equal_expr logic_and_expr_opt_2 logic_and_expr 
logic_and_expr_opt_2 ::= NULL 
logic_and_expr_opt_2 ::= "and" 
logic_and_expr_opt_2 ::= "&&" 
equal_expr ::= relat_expr equal_expr_opt_2 
equal_expr_opt_2 ::= NULL 
equal_expr_opt_2 ::= equal_expr_opt_2_decl_1 equal_expr 
equal_expr_opt_2_decl_1 ::= "!=" 
equal_expr_opt_2_decl_1 ::= "==" 
relat_expr ::= add_expr relat_expr_opt_2 
relat_expr_opt_2 ::= NULL 
relat_expr_opt_2 ::= relat_expr_opt_2_decl_1 relat_expr 
relat_expr_opt_2_decl_1 ::= "<=" 
relat_expr_opt_2_decl_1 ::= ">=" 
relat_expr_opt_2_decl_1 ::= "<" 
relat_expr_opt_2_decl_1 ::= ">" 
add_expr ::= mul_expr add_expr_opt_2 
add_expr_opt_2 ::= NULL 
add_expr_opt_2 ::= add_expr_opt_2_decl_1 add_expr 
add_expr_opt_2_decl_1 ::= "-" 
add_expr_opt_2_decl_1 ::= "+" 
mul_expr ::= unary_expr mul_expr_decl_2 
mul_expr_decl_2 ::= ENDL 
mul_expr_decl_2 ::= mul_expr_decl_2_opt_1 
mul_expr_decl_2_opt_1 ::= NULL 
mul_expr_decl_2_opt_1 ::= mul_expr_decl_2_opt_1_decl_1 mul_expr 
mul_expr_decl_2_opt_1_decl_1 ::= "^" 
mul_expr_decl_2_opt_1_decl_1 ::= "%" 
mul_expr_decl_2_opt_1_decl_1 ::= "/" 
unary_expr ::= unary_expr_decl_1 
unary_expr_decl_1 ::= prim_expr unary_expr_decl_1_decl_2 
unary_expr_decl_1 ::= unary_expr_decl_1_decl_1 unary_expr unary_expr_decl_1_opt_3 
unary_expr_decl_1 ::= unary_op unary_expr 
unary_expr_decl_1_decl_2 ::= ENDL 
unary_expr_decl_1_decl_2 ::= unary_expr_decl_1_decl_2_opt_1 
unary_expr_decl_1_decl_2_opt_1 ::= NULL 
unary_expr_decl_1_decl_2_opt_1 ::= postifx 
unary_expr_decl_1_opt_3 ::= NULL 
unary_expr_decl_1_opt_3 ::= array 
unary_expr_decl_1_decl_1 ::= "gcnew" 
unary_expr_decl_1_decl_1 ::= "new" 
unary_op ::= "!" 
unary_op ::= "-" 
unary_op ::= "&" 
unary_op ::= "*" 
unary_op ::= "--" 
unary_op ::= "++" 
unary_op ::= "typeid" 
postfix_expr ::= constant 
postfix_expr ::= visit_expr 
visit_expr ::= object visit_expr_opt_2 visit_expr 
visit_expr_opt_2 ::= NULL 
visit_expr_opt_2 ::= "." 
visit_expr_opt_2 ::= "->" 
object ::= object_decl_1 
object_decl_1 ::= CHAR 
object_decl_1 ::= element 
object_decl_1 ::= "global" 
object_decl_1 ::= "local" 
object_decl_1 ::= str object_decl_1_opt_2 
object_decl_1 ::= array object_decl_1_opt_2 
object_decl_1_opt_2 ::= NULL 
object_decl_1_opt_2 ::= index 
object_decl_1_opt_2 ::= NULL 
object_decl_1_opt_2 ::= index 
element ::= element_decl_1 element_decl_2 
element_decl_2 ::= element_decl_2_rep_1 
element_decl_2 ::= ENDL 
element_decl_2_rep_1 ::= NULL 
element_decl_2_rep_1 ::= index element_decl_2_rep_1 
element_decl_2_rep_1 ::= fcall element_decl_2_rep_1 
element_decl_1 ::= "(" single_expr ")" 
element_decl_1 ::= ID 
constant ::= "false" 
constant ::= "true" 
constant ::= "null" 
constant ::= NUM 
array ::= "{" array_opt_2 "}" 
array_opt_2 ::= NULL 
array_opt_2 ::= expr 
fcall ::= "(" fcall_opt_2 ")" 
fcall_opt_2 ::= NULL 
fcall_opt_2 ::= expr 
index ::= "[" basic_expr "]" 
#############
show_new_info
#############
%start% =  %MARK% begin
%start% =  begin %MARK%
begin =  %MARK% stmts
begin =  stmts %MARK%
ignore =  %MARK% ignore_rep_1
ignore =  ignore_rep_1 %MARK%
ignore_rep_1 =  %MARK%
ignore_rep_1 =  %MARK% ENDL ignore_rep_1
ignore_rep_1 =  ENDL %MARK% ignore_rep_1
ignore_rep_1 =  ENDL ignore_rep_1 %MARK%
endline =  %MARK% ";"
endline =  ";" %MARK%
endline =  %MARK% ENDL
endline =  ENDL %MARK%
stmts =  %MARK% stmts_rep_1
stmts =  stmts_rep_1 %MARK%
stmts_rep_1 =  %MARK%
stmts_rep_1 =  %MARK% statements stmts_rep_1_rep_2 stmts_rep_1
stmts_rep_1 =  statements %MARK% stmts_rep_1_rep_2 stmts_rep_1
stmts_rep_1 =  statements stmts_rep_1_rep_2 %MARK% stmts_rep_1
stmts_rep_1 =  statements stmts_rep_1_rep_2 stmts_rep_1 %MARK%
stmts_rep_1_rep_2 =  %MARK%
stmts_rep_1_rep_2 =  %MARK% ENDL stmts_rep_1_rep_2
stmts_rep_1_rep_2 =  ENDL %MARK% stmts_rep_1_rep_2
stmts_rep_1_rep_2 =  ENDL stmts_rep_1_rep_2 %MARK%
decl_stmts =  %MARK% decl_stmts_rep_1
decl_stmts =  decl_stmts_rep_1 %MARK%
decl_stmts_rep_1 =  %MARK%
decl_stmts_rep_1 =  %MARK% declaration decl_stmts_rep_1_rep_2 decl_stmts_rep_1
decl_stmts_rep_1 =  declaration %MARK% decl_stmts_rep_1_rep_2 decl_stmts_rep_1
decl_stmts_rep_1 =  declaration decl_stmts_rep_1_rep_2 %MARK% decl_stmts_rep_1
decl_stmts_rep_1 =  declaration decl_stmts_rep_1_rep_2 decl_stmts_rep_1 %MARK%
decl_stmts_rep_1_rep_2 =  %MARK%
decl_stmts_rep_1_rep_2 =  %MARK% ENDL decl_stmts_rep_1_rep_2
decl_stmts_rep_1_rep_2 =  ENDL %MARK% decl_stmts_rep_1_rep_2
decl_stmts_rep_1_rep_2 =  ENDL decl_stmts_rep_1_rep_2 %MARK%
endblock =  %MARK% catch_stmt
endblock =  catch_stmt %MARK%
endblock =  %MARK% until_stmt
endblock =  until_stmt %MARK%
endblock =  %MARK% else_stmt
endblock =  else_stmt %MARK%
endblock =  %MARK% end_stmt
endblock =  end_stmt %MARK%
statement =  %MARK% expr_stmt
statement =  expr_stmt %MARK%
statement =  %MARK% class_stmt
statement =  class_stmt %MARK%
statement =  %MARK% throw_stmt
statement =  throw_stmt %MARK%
statement =  %MARK% try_stmt
statement =  try_stmt %MARK%
statement =  %MARK% return_stmt
statement =  return_stmt %MARK%
statement =  %MARK% function_stmt
statement =  function_stmt %MARK%
statement =  %MARK% control_stmt
statement =  control_stmt %MARK%
statement =  %MARK% foreach_stmt
statement =  foreach_stmt %MARK%
statement =  %MARK% for_stmt
statement =  for_stmt %MARK%
statement =  %MARK% loop_stmt
statement =  loop_stmt %MARK%
statement =  %MARK% while_stmt
statement =  while_stmt %MARK%
statement =  %MARK% switch_stmt
statement =  switch_stmt %MARK%
statement =  %MARK% if_stmt
statement =  if_stmt %MARK%
statement =  %MARK% using_stmt
statement =  using_stmt %MARK%
statement =  %MARK% namespace_stmt
statement =  namespace_stmt %MARK%
statement =  %MARK% block_stmt
statement =  block_stmt %MARK%
statement =  %MARK% var_stmt
statement =  var_stmt %MARK%
statement =  %MARK% import_stmt
statement =  import_stmt %MARK%
statement =  %MARK% package_stmt
statement =  package_stmt %MARK%
statement =  %MARK% prep_stmt
statement =  prep_stmt %MARK%
declaration =  %MARK% class_stmt
declaration =  class_stmt %MARK%
declaration =  %MARK% function_stmt
declaration =  function_stmt %MARK%
declaration =  %MARK% using_stmt
declaration =  using_stmt %MARK%
declaration =  %MARK% var_stmt
declaration =  var_stmt %MARK%
declaration =  %MARK% namespace_stmt
declaration =  namespace_stmt %MARK%
declaration =  %MARK% prep_stmt
declaration =  prep_stmt %MARK%
prep_stmt =  %MARK% PREP ENDL
prep_stmt =  PREP %MARK% ENDL
prep_stmt =  PREP ENDL %MARK%
package_stmt =  %MARK% "package" ID endline
package_stmt =  "package" %MARK% ID endline
package_stmt =  "package" ID %MARK% endline
package_stmt =  "package" ID endline %MARK%
import_stmt =  %MARK% "import" import_list endline
import_stmt =  "import" %MARK% import_list endline
import_stmt =  "import" import_list %MARK% endline
import_stmt =  "import" import_list endline %MARK%
var_def =  %MARK% var_list
var_def =  var_list %MARK%
var_def =  %MARK% var_bind "=" basic_expr
var_def =  var_bind %MARK% "=" basic_expr
var_def =  var_bind "=" %MARK% basic_expr
var_def =  var_bind "=" basic_expr %MARK%
var_stmt =  %MARK% var_stmt_decl_1 var_def endline
var_stmt =  var_stmt_decl_1 %MARK% var_def endline
var_stmt =  var_stmt_decl_1 var_def %MARK% endline
var_stmt =  var_stmt_decl_1 var_def endline %MARK%
var_stmt_decl_1 =  %MARK% "constant"
var_stmt_decl_1 =  "constant" %MARK%
var_stmt_decl_1 =  %MARK% "link"
var_stmt_decl_1 =  "link" %MARK%
var_stmt_decl_1 =  %MARK% "var"
var_stmt_decl_1 =  "var" %MARK%
var_bind =  %MARK% "(" var_bind_list var_bind_rep_3 ")"
var_bind =  "(" %MARK% var_bind_list var_bind_rep_3 ")"
var_bind =  "(" var_bind_list %MARK% var_bind_rep_3 ")"
var_bind =  "(" var_bind_list var_bind_rep_3 %MARK% ")"
var_bind =  "(" var_bind_list var_bind_rep_3 ")" %MARK%
var_bind_rep_3 =  %MARK%
var_bind_rep_3 =  %MARK% "," var_bind_list var_bind_rep_3
var_bind_rep_3 =  "," %MARK% var_bind_list var_bind_rep_3
var_bind_rep_3 =  "," var_bind_list %MARK% var_bind_rep_3
var_bind_rep_3 =  "," var_bind_list var_bind_rep_3 %MARK%
var_bind_list =  %MARK% var_bind
var_bind_list =  var_bind %MARK%
var_bind_list =  %MARK% ETC
var_bind_list =  ETC %MARK%
var_bind_list =  %MARK% ID
var_bind_list =  ID %MARK%
var_list =  %MARK% ID "=" single_expr var_list_opt_4
var_list =  ID %MARK% "=" single_expr var_list_opt_4
var_list =  ID "=" %MARK% single_expr var_list_opt_4
var_list =  ID "=" single_expr %MARK% var_list_opt_4
var_list =  ID "=" single_expr var_list_opt_4 %MARK%
var_list_opt_4 =  %MARK%
var_list_opt_4 =  %MARK% "," var_list
var_list_opt_4 =  "," %MARK% var_list
var_list_opt_4 =  "," var_list %MARK%
block_stmt =  %MARK% "block" ENDL stmts "end" ENDL
block_stmt =  "block" %MARK% ENDL stmts "end" ENDL
block_stmt =  "block" ENDL %MARK% stmts "end" ENDL
block_stmt =  "block" ENDL stmts %MARK% "end" ENDL
block_stmt =  "block" ENDL stmts "end" %MARK% ENDL
block_stmt =  "block" ENDL stmts "end" ENDL %MARK%
namespace_stmt =  %MARK% "namespace" ID ENDL decl_stmts "end" ENDL
namespace_stmt =  "namespace" %MARK% ID ENDL decl_stmts "end" ENDL
namespace_stmt =  "namespace" ID %MARK% ENDL decl_stmts "end" ENDL
namespace_stmt =  "namespace" ID ENDL %MARK% decl_stmts "end" ENDL
namespace_stmt =  "namespace" ID ENDL decl_stmts %MARK% "end" ENDL
namespace_stmt =  "namespace" ID ENDL decl_stmts "end" %MARK% ENDL
namespace_stmt =  "namespace" ID ENDL decl_stmts "end" ENDL %MARK%
using_stmt =  %MARK% "using" using_list endline
using_stmt =  "using" %MARK% using_list endline
using_stmt =  "using" using_list %MARK% endline
using_stmt =  "using" using_list endline %MARK%
using_list =  %MARK% module_list using_list_opt_2
using_list =  module_list %MARK% using_list_opt_2
using_list =  module_list using_list_opt_2 %MARK%
using_list_opt_2 =  %MARK%
using_list_opt_2 =  %MARK% "," using_list
using_list_opt_2 =  "," %MARK% using_list
using_list_opt_2 =  "," using_list %MARK%
if_stmt =  %MARK% "if" basic_expr ENDL stmts if_stmt_rep_5
if_stmt =  "if" %MARK% basic_expr ENDL stmts if_stmt_rep_5
if_stmt =  "if" basic_expr %MARK% ENDL stmts if_stmt_rep_5
if_stmt =  "if" basic_expr ENDL %MARK% stmts if_stmt_rep_5
if_stmt =  "if" basic_expr ENDL stmts %MARK% if_stmt_rep_5
if_stmt =  "if" basic_expr ENDL stmts if_stmt_rep_5 %MARK%
if_stmt_rep_5 =  %MARK%
if_stmt_rep_5 =  %MARK% else_stmt stmts "end" ENDL if_stmt_rep_5
if_stmt_rep_5 =  else_stmt %MARK% stmts "end" ENDL if_stmt_rep_5
if_stmt_rep_5 =  else_stmt stmts %MARK% "end" ENDL if_stmt_rep_5
if_stmt_rep_5 =  else_stmt stmts "end" %MARK% ENDL if_stmt_rep_5
if_stmt_rep_5 =  else_stmt stmts "end" ENDL %MARK% if_stmt_rep_5
if_stmt_rep_5 =  else_stmt stmts "end" ENDL if_stmt_rep_5 %MARK%
else_stmt =  %MARK% "else" else_stmt_opt_2 ENDL basic_expr ENDL
else_stmt =  "else" %MARK% else_stmt_opt_2 ENDL basic_expr ENDL
else_stmt =  "else" else_stmt_opt_2 %MARK% ENDL basic_expr ENDL
else_stmt =  "else" else_stmt_opt_2 ENDL %MARK% basic_expr ENDL
else_stmt =  "else" else_stmt_opt_2 ENDL basic_expr %MARK% ENDL
else_stmt =  "else" else_stmt_opt_2 ENDL basic_expr ENDL %MARK%
else_stmt_opt_2 =  %MARK%
else_stmt_opt_2 =  %MARK% "if"
else_stmt_opt_2 =  "if" %MARK%
switch_stmt =  %MARK% "switch" basic_expr ENDL switch_stmts "end" ENDL
switch_stmt =  "switch" %MARK% basic_expr ENDL switch_stmts "end" ENDL
switch_stmt =  "switch" basic_expr %MARK% ENDL switch_stmts "end" ENDL
switch_stmt =  "switch" basic_expr ENDL %MARK% switch_stmts "end" ENDL
switch_stmt =  "switch" basic_expr ENDL switch_stmts %MARK% "end" ENDL
switch_stmt =  "switch" basic_expr ENDL switch_stmts "end" %MARK% ENDL
switch_stmt =  "switch" basic_expr ENDL switch_stmts "end" ENDL %MARK%
switch_stmts =  %MARK% switch_stmts_rep_1 switch_stmts_rep_2
switch_stmts =  switch_stmts_rep_1 %MARK% switch_stmts_rep_2
switch_stmts =  switch_stmts_rep_1 switch_stmts_rep_2 %MARK%
switch_stmts_rep_2 =  %MARK%
switch_stmts_rep_2 =  %MARK% ENDL switch_stmts_rep_2
switch_stmts_rep_2 =  ENDL %MARK% switch_stmts_rep_2
switch_stmts_rep_2 =  ENDL switch_stmts_rep_2 %MARK%
switch_stmts_rep_1 =  %MARK%
switch_stmts_rep_1 =  %MARK% switch_default switch_stmts_rep_1
switch_stmts_rep_1 =  switch_default %MARK% switch_stmts_rep_1
switch_stmts_rep_1 =  switch_default switch_stmts_rep_1 %MARK%
switch_stmts_rep_1 =  %MARK% switch_case switch_stmts_rep_1
switch_stmts_rep_1 =  switch_case %MARK% switch_stmts_rep_1
switch_stmts_rep_1 =  switch_case switch_stmts_rep_1 %MARK%
switch_case =  %MARK% "case" logic_or_expr ENDL stmts "end" ENDL
switch_case =  "case" %MARK% logic_or_expr ENDL stmts "end" ENDL
switch_case =  "case" logic_or_expr %MARK% ENDL stmts "end" ENDL
switch_case =  "case" logic_or_expr ENDL %MARK% stmts "end" ENDL
switch_case =  "case" logic_or_expr ENDL stmts %MARK% "end" ENDL
switch_case =  "case" logic_or_expr ENDL stmts "end" %MARK% ENDL
switch_case =  "case" logic_or_expr ENDL stmts "end" ENDL %MARK%
switch_default =  %MARK% "default" ENDL stmts "end" ENDL
switch_default =  "default" %MARK% ENDL stmts "end" ENDL
switch_default =  "default" ENDL %MARK% stmts "end" ENDL
switch_default =  "default" ENDL stmts %MARK% "end" ENDL
switch_default =  "default" ENDL stmts "end" %MARK% ENDL
switch_default =  "default" ENDL stmts "end" ENDL %MARK%
while_stmt =  %MARK% "while" basic_expr ENDL stmts "end" ENDL
while_stmt =  "while" %MARK% basic_expr ENDL stmts "end" ENDL
while_stmt =  "while" basic_expr %MARK% ENDL stmts "end" ENDL
while_stmt =  "while" basic_expr ENDL %MARK% stmts "end" ENDL
while_stmt =  "while" basic_expr ENDL stmts %MARK% "end" ENDL
while_stmt =  "while" basic_expr ENDL stmts "end" %MARK% ENDL
while_stmt =  "while" basic_expr ENDL stmts "end" ENDL %MARK%
loop_stmt =  %MARK% "loop" ENDL stmts loop_stmt_decl_4
loop_stmt =  "loop" %MARK% ENDL stmts loop_stmt_decl_4
loop_stmt =  "loop" ENDL %MARK% stmts loop_stmt_decl_4
loop_stmt =  "loop" ENDL stmts %MARK% loop_stmt_decl_4
loop_stmt =  "loop" ENDL stmts loop_stmt_decl_4 %MARK%
loop_stmt_decl_4 =  %MARK% ENDL
loop_stmt_decl_4 =  ENDL %MARK%
loop_stmt_decl_4 =  %MARK% "end"
loop_stmt_decl_4 =  "end" %MARK%
loop_stmt_decl_4 =  %MARK% until_stmt
loop_stmt_decl_4 =  until_stmt %MARK%
until_stmt =  %MARK% "until" basic_expr ENDL
until_stmt =  "until" %MARK% basic_expr ENDL
until_stmt =  "until" basic_expr %MARK% ENDL
until_stmt =  "until" basic_expr ENDL %MARK%
for_stmt =  %MARK% "for" for_stmt_opt_2 for_stmt_decl_3 for_stmt_opt_4 for_stmt_decl_5 for_stmt_opt_6 for_body
for_stmt =  "for" %MARK% for_stmt_opt_2 for_stmt_decl_3 for_stmt_opt_4 for_stmt_decl_5 for_stmt_opt_6 for_body
for_stmt =  "for" for_stmt_opt_2 %MARK% for_stmt_decl_3 for_stmt_opt_4 for_stmt_decl_5 for_stmt_opt_6 for_body
for_stmt =  "for" for_stmt_opt_2 for_stmt_decl_3 %MARK% for_stmt_opt_4 for_stmt_decl_5 for_stmt_opt_6 for_body
for_stmt =  "for" for_stmt_opt_2 for_stmt_decl_3 for_stmt_opt_4 %MARK% for_stmt_decl_5 for_stmt_opt_6 for_body
for_stmt =  "for" for_stmt_opt_2 for_stmt_decl_3 for_stmt_opt_4 for_stmt_decl_5 %MARK% for_stmt_opt_6 for_body
for_stmt =  "for" for_stmt_opt_2 for_stmt_decl_3 for_stmt_opt_4 for_stmt_decl_5 for_stmt_opt_6 %MARK% for_body
for_stmt =  "for" for_stmt_opt_2 for_stmt_decl_3 for_stmt_opt_4 for_stmt_decl_5 for_stmt_opt_6 for_body %MARK%
for_stmt_opt_6 =  %MARK%
for_stmt_opt_6 =  %MARK% basic_expr
for_stmt_opt_6 =  basic_expr %MARK%
for_stmt_decl_5 =  %MARK% ","
for_stmt_decl_5 =  "," %MARK%
for_stmt_decl_5 =  %MARK% ";"
for_stmt_decl_5 =  ";" %MARK%
for_stmt_opt_4 =  %MARK%
for_stmt_opt_4 =  %MARK% basic_expr
for_stmt_opt_4 =  basic_expr %MARK%
for_stmt_decl_3 =  %MARK% ","
for_stmt_decl_3 =  "," %MARK%
for_stmt_decl_3 =  %MARK% ";"
for_stmt_decl_3 =  ";" %MARK%
for_stmt_opt_2 =  %MARK%
for_stmt_opt_2 =  %MARK% var_def
for_stmt_opt_2 =  var_def %MARK%
foreach_stmt =  %MARK% "foreach" ID "in" basic_expr for_body
foreach_stmt =  "foreach" %MARK% ID "in" basic_expr for_body
foreach_stmt =  "foreach" ID %MARK% "in" basic_expr for_body
foreach_stmt =  "foreach" ID "in" %MARK% basic_expr for_body
foreach_stmt =  "foreach" ID "in" basic_expr %MARK% for_body
foreach_stmt =  "foreach" ID "in" basic_expr for_body %MARK%
for_body =  %MARK% for_body_decl_1
for_body =  for_body_decl_1 %MARK%
for_body_decl_1 =  %MARK% ENDL stmts "end" ENDL
for_body_decl_1 =  ENDL %MARK% stmts "end" ENDL
for_body_decl_1 =  ENDL stmts %MARK% "end" ENDL
for_body_decl_1 =  ENDL stmts "end" %MARK% ENDL
for_body_decl_1 =  ENDL stmts "end" ENDL %MARK%
for_body_decl_1 =  %MARK% "do" basic_expr endline
for_body_decl_1 =  "do" %MARK% basic_expr endline
for_body_decl_1 =  "do" basic_expr %MARK% endline
for_body_decl_1 =  "do" basic_expr endline %MARK%
function_stmt =  %MARK% "function" ID "(" function_stmt_opt_4 ")" function_stmt_opt_6 function_body
function_stmt =  "function" %MARK% ID "(" function_stmt_opt_4 ")" function_stmt_opt_6 function_body
function_stmt =  "function" ID %MARK% "(" function_stmt_opt_4 ")" function_stmt_opt_6 function_body
function_stmt =  "function" ID "(" %MARK% function_stmt_opt_4 ")" function_stmt_opt_6 function_body
function_stmt =  "function" ID "(" function_stmt_opt_4 %MARK% ")" function_stmt_opt_6 function_body
function_stmt =  "function" ID "(" function_stmt_opt_4 ")" %MARK% function_stmt_opt_6 function_body
function_stmt =  "function" ID "(" function_stmt_opt_4 ")" function_stmt_opt_6 %MARK% function_body
function_stmt =  "function" ID "(" function_stmt_opt_4 ")" function_stmt_opt_6 function_body %MARK%
function_stmt_opt_6 =  %MARK%
function_stmt_opt_6 =  %MARK% "override"
function_stmt_opt_6 =  "override" %MARK%
function_stmt_opt_4 =  %MARK%
function_stmt_opt_4 =  %MARK% argument_list
function_stmt_opt_4 =  argument_list %MARK%
function_body =  %MARK% function_body_decl_1
function_body =  function_body_decl_1 %MARK%
function_body_decl_1 =  %MARK% ENDL stmts "end" ENDL
function_body_decl_1 =  ENDL %MARK% stmts "end" ENDL
function_body_decl_1 =  ENDL stmts %MARK% "end" ENDL
function_body_decl_1 =  ENDL stmts "end" %MARK% ENDL
function_body_decl_1 =  ENDL stmts "end" ENDL %MARK%
function_body_decl_1 =  %MARK% "{" stmts "}"
function_body_decl_1 =  "{" %MARK% stmts "}"
function_body_decl_1 =  "{" stmts %MARK% "}"
function_body_decl_1 =  "{" stmts "}" %MARK%
return_stmt =  %MARK% "return" return_stmt_opt_2 endline
return_stmt =  "return" %MARK% return_stmt_opt_2 endline
return_stmt =  "return" return_stmt_opt_2 %MARK% endline
return_stmt =  "return" return_stmt_opt_2 endline %MARK%
return_stmt_opt_2 =  %MARK%
return_stmt_opt_2 =  %MARK% expr
return_stmt_opt_2 =  expr %MARK%
try_stmt =  %MARK% "try" ENDL stmts try_stmt_rep_4 "end" ENDL
try_stmt =  "try" %MARK% ENDL stmts try_stmt_rep_4 "end" ENDL
try_stmt =  "try" ENDL %MARK% stmts try_stmt_rep_4 "end" ENDL
try_stmt =  "try" ENDL stmts %MARK% try_stmt_rep_4 "end" ENDL
try_stmt =  "try" ENDL stmts try_stmt_rep_4 %MARK% "end" ENDL
try_stmt =  "try" ENDL stmts try_stmt_rep_4 "end" %MARK% ENDL
try_stmt =  "try" ENDL stmts try_stmt_rep_4 "end" ENDL %MARK%
try_stmt_rep_4 =  %MARK%
try_stmt_rep_4 =  %MARK% catch_stmt stmts try_stmt_rep_4
try_stmt_rep_4 =  catch_stmt %MARK% stmts try_stmt_rep_4
try_stmt_rep_4 =  catch_stmt stmts %MARK% try_stmt_rep_4
try_stmt_rep_4 =  catch_stmt stmts try_stmt_rep_4 %MARK%
catch_stmt =  %MARK% "catch" ID catch_stmt_opt_3 ENDL
catch_stmt =  "catch" %MARK% ID catch_stmt_opt_3 ENDL
catch_stmt =  "catch" ID %MARK% catch_stmt_opt_3 ENDL
catch_stmt =  "catch" ID catch_stmt_opt_3 %MARK% ENDL
catch_stmt =  "catch" ID catch_stmt_opt_3 ENDL %MARK%
catch_stmt_opt_3 =  %MARK%
catch_stmt_opt_3 =  %MARK% ":" visit_expr
catch_stmt_opt_3 =  ":" %MARK% visit_expr
catch_stmt_opt_3 =  ":" visit_expr %MARK%
throw_stmt =  %MARK% "throw" throw_stmt_opt_2 endline
throw_stmt =  "throw" %MARK% throw_stmt_opt_2 endline
throw_stmt =  "throw" throw_stmt_opt_2 %MARK% endline
throw_stmt =  "throw" throw_stmt_opt_2 endline %MARK%
throw_stmt_opt_2 =  %MARK%
throw_stmt_opt_2 =  %MARK% expr
throw_stmt_opt_2 =  expr %MARK%
class_stmt =  %MARK% class_stmt_decl_1 ID class_stmt_opt_3 ENDL decl_stmts "end" ENDL
class_stmt =  class_stmt_decl_1 %MARK% ID class_stmt_opt_3 ENDL decl_stmts "end" ENDL
class_stmt =  class_stmt_decl_1 ID %MARK% class_stmt_opt_3 ENDL decl_stmts "end" ENDL
class_stmt =  class_stmt_decl_1 ID class_stmt_opt_3 %MARK% ENDL decl_stmts "end" ENDL
class_stmt =  class_stmt_decl_1 ID class_stmt_opt_3 ENDL %MARK% decl_stmts "end" ENDL
class_stmt =  class_stmt_decl_1 ID class_stmt_opt_3 ENDL decl_stmts %MARK% "end" ENDL
class_stmt =  class_stmt_decl_1 ID class_stmt_opt_3 ENDL decl_stmts "end" %MARK% ENDL
class_stmt =  class_stmt_decl_1 ID class_stmt_opt_3 ENDL decl_stmts "end" ENDL %MARK%
class_stmt_opt_3 =  %MARK%
class_stmt_opt_3 =  %MARK% "extends" visit_expr
class_stmt_opt_3 =  "extends" %MARK% visit_expr
class_stmt_opt_3 =  "extends" visit_expr %MARK%
class_stmt_decl_1 =  %MARK% "struct"
class_stmt_decl_1 =  "struct" %MARK%
class_stmt_decl_1 =  %MARK% "class"
class_stmt_decl_1 =  "class" %MARK%
control_stmt =  %MARK% control_stmt_decl_1 endline
control_stmt =  control_stmt_decl_1 %MARK% endline
control_stmt =  control_stmt_decl_1 endline %MARK%
control_stmt_decl_1 =  %MARK% "continue"
control_stmt_decl_1 =  "continue" %MARK%
control_stmt_decl_1 =  %MARK% "break"
control_stmt_decl_1 =  "break" %MARK%
expr_stmt =  %MARK% expr endline
expr_stmt =  expr %MARK% endline
expr_stmt =  expr endline %MARK%
end_stmt =  %MARK% "end" ENDL
end_stmt =  "end" %MARK% ENDL
end_stmt =  "end" ENDL %MARK%
expr =  %MARK% single_expr expr_opt_2
expr =  single_expr %MARK% expr_opt_2
expr =  single_expr expr_opt_2 %MARK%
expr_opt_2 =  %MARK%
expr_opt_2 =  %MARK% "," expr
expr_opt_2 =  "," %MARK% expr
expr_opt_2 =  "," expr %MARK%
single_expr =  %MARK% basic_expr
single_expr =  basic_expr %MARK%
single_expr =  %MARK% lambda_expr
single_expr =  lambda_expr %MARK%
basic_expr =  %MARK% cond_expr basic_expr_opt_2
basic_expr =  cond_expr %MARK% basic_expr_opt_2
basic_expr =  cond_expr basic_expr_opt_2 %MARK%
basic_expr =  %MARK% var_bind "=" cond_expr
basic_expr =  var_bind %MARK% "=" cond_expr
basic_expr =  var_bind "=" %MARK% cond_expr
basic_expr =  var_bind "=" cond_expr %MARK%
basic_expr_opt_2 =  %MARK%
basic_expr_opt_2 =  %MARK% asi_op single_expr
basic_expr_opt_2 =  asi_op %MARK% single_expr
basic_expr_opt_2 =  asi_op single_expr %MARK%
asi_op =  %MARK% "^="
asi_op =  "^=" %MARK%
asi_op =  %MARK% "%="
asi_op =  "%=" %MARK%
asi_op =  %MARK% "/="
asi_op =  "/=" %MARK%
asi_op =  %MARK% "*="
asi_op =  "*=" %MARK%
asi_op =  %MARK% "-="
asi_op =  "-=" %MARK%
asi_op =  %MARK% "+="
asi_op =  "+=" %MARK%
asi_op =  %MARK% ":="
asi_op =  ":=" %MARK%
asi_op =  %MARK% "="
asi_op =  "=" %MARK%
lambda_expr =  %MARK% "[" lambda_expr_opt_2 "]" "(" lambda_expr_opt_5 ")" lambda_body
lambda_expr =  "[" %MARK% lambda_expr_opt_2 "]" "(" lambda_expr_opt_5 ")" lambda_body
lambda_expr =  "[" lambda_expr_opt_2 %MARK% "]" "(" lambda_expr_opt_5 ")" lambda_body
lambda_expr =  "[" lambda_expr_opt_2 "]" %MARK% "(" lambda_expr_opt_5 ")" lambda_body
lambda_expr =  "[" lambda_expr_opt_2 "]" "(" %MARK% lambda_expr_opt_5 ")" lambda_body
lambda_expr =  "[" lambda_expr_opt_2 "]" "(" lambda_expr_opt_5 %MARK% ")" lambda_body
lambda_expr =  "[" lambda_expr_opt_2 "]" "(" lambda_expr_opt_5 ")" %MARK% lambda_body
lambda_expr =  "[" lambda_expr_opt_2 "]" "(" lambda_expr_opt_5 ")" lambda_body %MARK%
lambda_expr_opt_5 =  %MARK%
lambda_expr_opt_5 =  %MARK% argument_list
lambda_expr_opt_5 =  argument_list %MARK%
lambda_expr_opt_2 =  %MARK%
lambda_expr_opt_2 =  %MARK% capture_list
lambda_expr_opt_2 =  capture_list %MARK%
capture_list =  %MARK% capture_list_opt_1 ID capture_list_rep_3
capture_list =  capture_list_opt_1 %MARK% ID capture_list_rep_3
capture_list =  capture_list_opt_1 ID %MARK% capture_list_rep_3
capture_list =  capture_list_opt_1 ID capture_list_rep_3 %MARK%
capture_list_rep_3 =  %MARK%
capture_list_rep_3 =  %MARK% "," capture_list capture_list_rep_3
capture_list_rep_3 =  "," %MARK% capture_list capture_list_rep_3
capture_list_rep_3 =  "," capture_list %MARK% capture_list_rep_3
capture_list_rep_3 =  "," capture_list capture_list_rep_3 %MARK%
capture_list_opt_1 =  %MARK%
capture_list_opt_1 =  %MARK% "="
capture_list_opt_1 =  "=" %MARK%
argument_list =  %MARK% argument_list_opt_1 ID argument_list_opt_3 visit_expr argument_list_rep_5
argument_list =  argument_list_opt_1 %MARK% ID argument_list_opt_3 visit_expr argument_list_rep_5
argument_list =  argument_list_opt_1 ID %MARK% argument_list_opt_3 visit_expr argument_list_rep_5
argument_list =  argument_list_opt_1 ID argument_list_opt_3 %MARK% visit_expr argument_list_rep_5
argument_list =  argument_list_opt_1 ID argument_list_opt_3 visit_expr %MARK% argument_list_rep_5
argument_list =  argument_list_opt_1 ID argument_list_opt_3 visit_expr argument_list_rep_5 %MARK%
argument_list =  %MARK% ETC ID
argument_list =  ETC %MARK% ID
argument_list =  ETC ID %MARK%
argument_list_rep_5 =  %MARK%
argument_list_rep_5 =  %MARK% "," argument_list argument_list_rep_5
argument_list_rep_5 =  "," %MARK% argument_list argument_list_rep_5
argument_list_rep_5 =  "," argument_list %MARK% argument_list_rep_5
argument_list_rep_5 =  "," argument_list argument_list_rep_5 %MARK%
argument_list_opt_3 =  %MARK%
argument_list_opt_3 =  %MARK% ":"
argument_list_opt_3 =  ":" %MARK%
argument_list_opt_1 =  %MARK%
argument_list_opt_1 =  %MARK% "="
argument_list_opt_1 =  "=" %MARK%
lambda_body =  %MARK% "->" cond_expr
lambda_body =  "->" %MARK% cond_expr
lambda_body =  "->" cond_expr %MARK%
lambda_body =  %MARK% "{" lambda_body_rep_2 "}"
lambda_body =  "{" %MARK% lambda_body_rep_2 "}"
lambda_body =  "{" lambda_body_rep_2 %MARK% "}"
lambda_body =  "{" lambda_body_rep_2 "}" %MARK%
lambda_body_rep_2 =  %MARK%
lambda_body_rep_2 =  %MARK% statement lambda_body_rep_2_rep_2 lambda_body_rep_2
lambda_body_rep_2 =  statement %MARK% lambda_body_rep_2_rep_2 lambda_body_rep_2
lambda_body_rep_2 =  statement lambda_body_rep_2_rep_2 %MARK% lambda_body_rep_2
lambda_body_rep_2 =  statement lambda_body_rep_2_rep_2 lambda_body_rep_2 %MARK%
lambda_body_rep_2_rep_2 =  %MARK%
lambda_body_rep_2_rep_2 =  %MARK% ENDL lambda_body_rep_2_rep_2
lambda_body_rep_2_rep_2 =  ENDL %MARK% lambda_body_rep_2_rep_2
lambda_body_rep_2_rep_2 =  ENDL lambda_body_rep_2_rep_2 %MARK%
cond_expr =  %MARK% logic_expr cond_expr_opt_2
cond_expr =  logic_expr %MARK% cond_expr_opt_2
cond_expr =  logic_expr cond_expr_opt_2 %MARK%
cond_expr_opt_2 =  %MARK%
cond_expr_opt_2 =  %MARK% cond_postfix
cond_expr_opt_2 =  cond_postfix %MARK%
cond_postfix =  %MARK% ":" logic_or_expr
cond_postfix =  ":" %MARK% logic_or_expr
cond_postfix =  ":" logic_or_expr %MARK%
cond_postfix =  %MARK% "?" logic_or_expr ":" cond_expr
cond_postfix =  "?" %MARK% logic_or_expr ":" cond_expr
cond_postfix =  "?" logic_or_expr %MARK% ":" cond_expr
cond_postfix =  "?" logic_or_expr ":" %MARK% cond_expr
cond_postfix =  "?" logic_or_expr ":" cond_expr %MARK%
logic_or_expr =  %MARK% logic_and_expr logic_or_expr_opt_2 logic_or_expr
logic_or_expr =  logic_and_expr %MARK% logic_or_expr_opt_2 logic_or_expr
logic_or_expr =  logic_and_expr logic_or_expr_opt_2 %MARK% logic_or_expr
logic_or_expr =  logic_and_expr logic_or_expr_opt_2 logic_or_expr %MARK%
logic_or_expr_opt_2 =  %MARK%
logic_or_expr_opt_2 =  %MARK% "or"
logic_or_expr_opt_2 =  "or" %MARK%
logic_or_expr_opt_2 =  %MARK% "||"
logic_or_expr_opt_2 =  "||" %MARK%
logic_and_expr =  %MARK% equal_expr logic_and_expr_opt_2 logic_and_expr
logic_and_expr =  equal_expr %MARK% logic_and_expr_opt_2 logic_and_expr
logic_and_expr =  equal_expr logic_and_expr_opt_2 %MARK% logic_and_expr
logic_and_expr =  equal_expr logic_and_expr_opt_2 logic_and_expr %MARK%
logic_and_expr_opt_2 =  %MARK%
logic_and_expr_opt_2 =  %MARK% "and"
logic_and_expr_opt_2 =  "and" %MARK%
logic_and_expr_opt_2 =  %MARK% "&&"
logic_and_expr_opt_2 =  "&&" %MARK%
equal_expr =  %MARK% relat_expr equal_expr_opt_2
equal_expr =  relat_expr %MARK% equal_expr_opt_2
equal_expr =  relat_expr equal_expr_opt_2 %MARK%
equal_expr_opt_2 =  %MARK%
equal_expr_opt_2 =  %MARK% equal_expr_opt_2_decl_1 equal_expr
equal_expr_opt_2 =  equal_expr_opt_2_decl_1 %MARK% equal_expr
equal_expr_opt_2 =  equal_expr_opt_2_decl_1 equal_expr %MARK%
equal_expr_opt_2_decl_1 =  %MARK% "!="
equal_expr_opt_2_decl_1 =  "!=" %MARK%
equal_expr_opt_2_decl_1 =  %MARK% "=="
equal_expr_opt_2_decl_1 =  "==" %MARK%
relat_expr =  %MARK% add_expr relat_expr_opt_2
relat_expr =  add_expr %MARK% relat_expr_opt_2
relat_expr =  add_expr relat_expr_opt_2 %MARK%
relat_expr_opt_2 =  %MARK%
relat_expr_opt_2 =  %MARK% relat_expr_opt_2_decl_1 relat_expr
relat_expr_opt_2 =  relat_expr_opt_2_decl_1 %MARK% relat_expr
relat_expr_opt_2 =  relat_expr_opt_2_decl_1 relat_expr %MARK%
relat_expr_opt_2_decl_1 =  %MARK% "<="
relat_expr_opt_2_decl_1 =  "<=" %MARK%
relat_expr_opt_2_decl_1 =  %MARK% ">="
relat_expr_opt_2_decl_1 =  ">=" %MARK%
relat_expr_opt_2_decl_1 =  %MARK% "<"
relat_expr_opt_2_decl_1 =  "<" %MARK%
relat_expr_opt_2_decl_1 =  %MARK% ">"
relat_expr_opt_2_decl_1 =  ">" %MARK%
add_expr =  %MARK% mul_expr add_expr_opt_2
add_expr =  mul_expr %MARK% add_expr_opt_2
add_expr =  mul_expr add_expr_opt_2 %MARK%
add_expr_opt_2 =  %MARK%
add_expr_opt_2 =  %MARK% add_expr_opt_2_decl_1 add_expr
add_expr_opt_2 =  add_expr_opt_2_decl_1 %MARK% add_expr
add_expr_opt_2 =  add_expr_opt_2_decl_1 add_expr %MARK%
add_expr_opt_2_decl_1 =  %MARK% "-"
add_expr_opt_2_decl_1 =  "-" %MARK%
add_expr_opt_2_decl_1 =  %MARK% "+"
add_expr_opt_2_decl_1 =  "+" %MARK%
mul_expr =  %MARK% unary_expr mul_expr_decl_2
mul_expr =  unary_expr %MARK% mul_expr_decl_2
mul_expr =  unary_expr mul_expr_decl_2 %MARK%
mul_expr_decl_2 =  %MARK% ENDL
mul_expr_decl_2 =  ENDL %MARK%
mul_expr_decl_2 =  %MARK% mul_expr_decl_2_opt_1
mul_expr_decl_2 =  mul_expr_decl_2_opt_1 %MARK%
mul_expr_decl_2_opt_1 =  %MARK%
mul_expr_decl_2_opt_1 =  %MARK% mul_expr_decl_2_opt_1_decl_1 mul_expr
mul_expr_decl_2_opt_1 =  mul_expr_decl_2_opt_1_decl_1 %MARK% mul_expr
mul_expr_decl_2_opt_1 =  mul_expr_decl_2_opt_1_decl_1 mul_expr %MARK%
mul_expr_decl_2_opt_1_decl_1 =  %MARK% "^"
mul_expr_decl_2_opt_1_decl_1 =  "^" %MARK%
mul_expr_decl_2_opt_1_decl_1 =  %MARK% "%"
mul_expr_decl_2_opt_1_decl_1 =  "%" %MARK%
mul_expr_decl_2_opt_1_decl_1 =  %MARK% "/"
mul_expr_decl_2_opt_1_decl_1 =  "/" %MARK%
unary_expr =  %MARK% unary_expr_decl_1
unary_expr =  unary_expr_decl_1 %MARK%
unary_expr_decl_1 =  %MARK% prim_expr unary_expr_decl_1_decl_2
unary_expr_decl_1 =  prim_expr %MARK% unary_expr_decl_1_decl_2
unary_expr_decl_1 =  prim_expr unary_expr_decl_1_decl_2 %MARK%
unary_expr_decl_1 =  %MARK% unary_expr_decl_1_decl_1 unary_expr unary_expr_decl_1_opt_3
unary_expr_decl_1 =  unary_expr_decl_1_decl_1 %MARK% unary_expr unary_expr_decl_1_opt_3
unary_expr_decl_1 =  unary_expr_decl_1_decl_1 unary_expr %MARK% unary_expr_decl_1_opt_3
unary_expr_decl_1 =  unary_expr_decl_1_decl_1 unary_expr unary_expr_decl_1_opt_3 %MARK%
unary_expr_decl_1 =  %MARK% unary_op unary_expr
unary_expr_decl_1 =  unary_op %MARK% unary_expr
unary_expr_decl_1 =  unary_op unary_expr %MARK%
unary_expr_decl_1_decl_2 =  %MARK% ENDL
unary_expr_decl_1_decl_2 =  ENDL %MARK%
unary_expr_decl_1_decl_2 =  %MARK% unary_expr_decl_1_decl_2_opt_1
unary_expr_decl_1_decl_2 =  unary_expr_decl_1_decl_2_opt_1 %MARK%
unary_expr_decl_1_decl_2_opt_1 =  %MARK%
unary_expr_decl_1_decl_2_opt_1 =  %MARK% postifx
unary_expr_decl_1_decl_2_opt_1 =  postifx %MARK%
unary_expr_decl_1_opt_3 =  %MARK%
unary_expr_decl_1_opt_3 =  %MARK% array
unary_expr_decl_1_opt_3 =  array %MARK%
unary_expr_decl_1_decl_1 =  %MARK% "gcnew"
unary_expr_decl_1_decl_1 =  "gcnew" %MARK%
unary_expr_decl_1_decl_1 =  %MARK% "new"
unary_expr_decl_1_decl_1 =  "new" %MARK%
unary_op =  %MARK% "!"
unary_op =  "!" %MARK%
unary_op =  %MARK% "-"
unary_op =  "-" %MARK%
unary_op =  %MARK% "&"
unary_op =  "&" %MARK%
unary_op =  %MARK% "*"
unary_op =  "*" %MARK%
unary_op =  %MARK% "--"
unary_op =  "--" %MARK%
unary_op =  %MARK% "++"
unary_op =  "++" %MARK%
unary_op =  %MARK% "typeid"
unary_op =  "typeid" %MARK%
postfix_expr =  %MARK% constant
postfix_expr =  constant %MARK%
postfix_expr =  %MARK% visit_expr
postfix_expr =  visit_expr %MARK%
visit_expr =  %MARK% object visit_expr_opt_2 visit_expr
visit_expr =  object %MARK% visit_expr_opt_2 visit_expr
visit_expr =  object visit_expr_opt_2 %MARK% visit_expr
visit_expr =  object visit_expr_opt_2 visit_expr %MARK%
visit_expr_opt_2 =  %MARK%
visit_expr_opt_2 =  %MARK% "."
visit_expr_opt_2 =  "." %MARK%
visit_expr_opt_2 =  %MARK% "->"
visit_expr_opt_2 =  "->" %MARK%
object =  %MARK% object_decl_1
object =  object_decl_1 %MARK%
object_decl_1 =  %MARK% CHAR
object_decl_1 =  CHAR %MARK%
object_decl_1 =  %MARK% element
object_decl_1 =  element %MARK%
object_decl_1 =  %MARK% "global"
object_decl_1 =  "global" %MARK%
object_decl_1 =  %MARK% "local"
object_decl_1 =  "local" %MARK%
object_decl_1 =  %MARK% str object_decl_1_opt_2
object_decl_1 =  str %MARK% object_decl_1_opt_2
object_decl_1 =  str object_decl_1_opt_2 %MARK%
object_decl_1 =  %MARK% array object_decl_1_opt_2
object_decl_1 =  array %MARK% object_decl_1_opt_2
object_decl_1 =  array object_decl_1_opt_2 %MARK%
object_decl_1_opt_2 =  %MARK%
object_decl_1_opt_2 =  %MARK% index
object_decl_1_opt_2 =  index %MARK%
object_decl_1_opt_2 =  %MARK%
object_decl_1_opt_2 =  %MARK% index
object_decl_1_opt_2 =  index %MARK%
element =  %MARK% element_decl_1 element_decl_2
element =  element_decl_1 %MARK% element_decl_2
element =  element_decl_1 element_decl_2 %MARK%
element_decl_2 =  %MARK% element_decl_2_rep_1
element_decl_2 =  element_decl_2_rep_1 %MARK%
element_decl_2 =  %MARK% ENDL
element_decl_2 =  ENDL %MARK%
element_decl_2_rep_1 =  %MARK%
element_decl_2_rep_1 =  %MARK% index element_decl_2_rep_1
element_decl_2_rep_1 =  index %MARK% element_decl_2_rep_1
element_decl_2_rep_1 =  index element_decl_2_rep_1 %MARK%
element_decl_2_rep_1 =  %MARK% fcall element_decl_2_rep_1
element_decl_2_rep_1 =  fcall %MARK% element_decl_2_rep_1
element_decl_2_rep_1 =  fcall element_decl_2_rep_1 %MARK%
element_decl_1 =  %MARK% "(" single_expr ")"
element_decl_1 =  "(" %MARK% single_expr ")"
element_decl_1 =  "(" single_expr %MARK% ")"
element_decl_1 =  "(" single_expr ")" %MARK%
element_decl_1 =  %MARK% ID
element_decl_1 =  ID %MARK%
constant =  %MARK% "false"
constant =  "false" %MARK%
constant =  %MARK% "true"
constant =  "true" %MARK%
constant =  %MARK% "null"
constant =  "null" %MARK%
constant =  %MARK% NUM
constant =  NUM %MARK%
array =  %MARK% "{" array_opt_2 "}"
array =  "{" %MARK% array_opt_2 "}"
array =  "{" array_opt_2 %MARK% "}"
array =  "{" array_opt_2 "}" %MARK%
array_opt_2 =  %MARK%
array_opt_2 =  %MARK% expr
array_opt_2 =  expr %MARK%
fcall =  %MARK% "(" fcall_opt_2 ")"
fcall =  "(" %MARK% fcall_opt_2 ")"
fcall =  "(" fcall_opt_2 %MARK% ")"
fcall =  "(" fcall_opt_2 ")" %MARK%
fcall_opt_2 =  %MARK%
fcall_opt_2 =  %MARK% expr
fcall_opt_2 =  expr %MARK%
index =  %MARK% "[" basic_expr "]"
index =  "[" %MARK% basic_expr "]"
index =  "[" basic_expr %MARK% "]"
index =  "[" basic_expr "]" %MARK%
##############
show FIRST SET
##############
###################
TERM  if_stmt_rep_5
###################
NULL  "else"  


####################
TERM  add_expr_opt_2
####################
"-"  NULL  "+"  


#################
TERM  declaration
#################
PREP  "var"  "namespace"  "struct"  "link"  "using"  "function"  "constant"  "class"  


##############
TERM  unary_op
##############
"++"  "typeid"  "-"  "--"  "&"  "!"  "*"  


######################
TERM  basic_expr_opt_2
######################
"="  "-="  NULL  "^="  "/="  "%="  ":="  "+="  "*="  


###############
TERM  else_stmt
###############
"else"  


################
TERM  block_stmt
################
"block"  


###########
TERM  stmts
###########
NULL  


###########
TERM  begin
###########
NULL  


#########################
TERM  argument_list_opt_1
#########################
"="  NULL  


###############
TERM  statement
###############
PREP  "loop"  "import"  "try"  "var"  "namespace"  "struct"  "block"  "return"  "for"  "function"  "constant"  "("  "while"  "switch"  "foreach"  "break"  "package"  "link"  "using"  "if"  "class"  "throw"  "continue"  "["  


#########################
TERM  function_stmt_opt_4
#########################
"="  NULL  ID  ETC  


######################
TERM  using_list_opt_2
######################
","  NULL  


###################
TERM  argument_list
###################
ID  ETC  "="  


################
TERM  visit_expr
################
CHAR  "local"  "("  "global"  "{"  ID  


##############
TERM  try_stmt
##############
"try"  


####################
TERM  switch_default
####################
"default"  


#########################
TERM  function_stmt_opt_6
#########################
"override"  NULL  


#####################
TERM  for_stmt_decl_5
#####################
","  ";"  


########################
TERM  capture_list_opt_1
########################
"="  NULL  


##############
TERM  mul_expr
##############
"++"  "typeid"  "gcnew"  "&"  "new"  "-"  "*"  "--"  "!"  


#################
TERM  lambda_expr
#################
"["  


##################
TERM  capture_list
##################
ID  "="  


###############
TERM  prep_stmt
###############
PREP  


#############################
TERM  lambda_body_rep_2_rep_2
#############################
ENDL  NULL  


################
TERM  using_stmt
################
"using"  


##################
TERM  postfix_expr
##################
CHAR  ID  "{"  "true"  "false"  NUM  "null"  "local"  "("  "global"  


########################
TERM  capture_list_rep_3
########################
","  NULL  


#################
TERM  fcall_opt_2
#################
NULL  "["  "("  


################
TERM  equal_expr
################
"++"  "gcnew"  "typeid"  "&"  "new"  "-"  "*"  "--"  "!"  


###################
TERM  logic_or_expr
###################
"++"  "gcnew"  "typeid"  "&"  "new"  "-"  "*"  "--"  "!"  


##############
TERM  var_bind
##############
"("  


#####################
TERM  var_stmt_decl_1
#####################
"var"  "link"  "constant"  


#################
TERM  return_stmt
#################
"return"  


###################
TERM  function_stmt
###################
"function"  


#########################
TERM  argument_list_opt_3
#########################
NULL  ":"  


###########
TERM  index
###########
"["  


####################################
TERM  unary_expr_decl_1_decl_2_opt_1
####################################
NULL  


##########################
TERM  element_decl_2_rep_1
##########################
NULL  "["  "("  


################
TERM  class_stmt
################
"class"  "struct"  


##############################
TERM  unary_expr_decl_1_decl_1
##############################
"new"  "gcnew"  


#####################
TERM  cond_expr_opt_2
#####################
NULL  "?"  ":"  


#######################
TERM  stmts_rep_1_rep_2
#######################
ENDL  NULL  


##################
TERM  control_stmt
##################
"continue"  "break"  


########################
TERM  switch_stmts_rep_2
########################
ENDL  NULL  


##############
TERM  for_stmt
##############
"for"  


#############
TERM  var_def
#############
ID  "("  


#############
TERM  element
#############
ID  "("  


######################
TERM  loop_stmt_decl_4
######################
"end"  "until"  ENDL  


##################
TERM  cond_postfix
##################
"?"  ":"  


#################
TERM  import_stmt
#################
"import"  


#################
TERM  switch_stmt
#################
"switch"  


####################
TERM  element_decl_1
####################
ID  "("  


#####################
TERM  for_stmt_decl_3
#####################
","  ";"  


#########################
TERM  logic_or_expr_opt_2
#########################
"||"  NULL  "or"  


#################
TERM  stmts_rep_1
#################
NULL  


######################
TERM  class_stmt_opt_3
######################
"extends"  NULL  


######################
TERM  throw_stmt_opt_2
######################
NULL  "["  "("  


#############
TERM  endline
#############
ENDL  ";"  


##################
TERM  switch_stmts
##################
NULL  ENDL  "default"  "case"  


###################
TERM  object_decl_1
###################
CHAR  "local"  "("  "global"  "{"  ID  


##################
TERM  foreach_stmt
##################
"foreach"  


#########################
TERM  argument_list_rep_5
#########################
","  NULL  


##################################
TERM  mul_expr_decl_2_opt_1_decl_1
##################################
"%"  "/"  "^"  


##############
TERM  add_expr
##############
"++"  "gcnew"  "typeid"  "*"  "new"  "-"  "--"  "&"  "!"  


######################
TERM  relat_expr_opt_2
######################
"<"  NULL  ">"  "<="  ">="  


###########
TERM  fcall
###########
"("  


####################
TERM  logic_and_expr
####################
"++"  "typeid"  "gcnew"  "*"  "new"  "-"  "--"  "&"  "!"  


###############
TERM  expr_stmt
###############
"["  "("  


################
TERM  throw_stmt
################
"throw"  


################
TERM  basic_expr
################
"("  


#############################
TERM  equal_expr_opt_2_decl_1
#############################
"=="  "!="  


##############
TERM  for_body
##############
ENDL  "do"  


######################
TERM  decl_stmts_rep_1
######################
PREP  "var"  "namespace"  "struct"  NULL  "link"  "function"  "using"  "class"  "constant"  


##########
TERM  expr
##########
"["  "("  


##############
TERM  var_stmt
##############
"constant"  "link"  "var"  


##############
TERM  endblock
##############
"until"  "catch"  "end"  "else"  


#############
TERM  %start%
#############
NULL  


#####################
TERM  mul_expr_decl_2
#####################
NULL  ENDL  "/"  "%"  "^"  


################
TERM  relat_expr
################
"++"  "typeid"  "gcnew"  "--"  "new"  "-"  "&"  "*"  "!"  


##############
TERM  constant
##############
NUM  "false"  "null"  "true"  


####################
TERM  try_stmt_rep_4
####################
NULL  "catch"  


######################
TERM  catch_stmt_opt_3
######################
NULL  ":"  


#########################
TERM  object_decl_1_opt_2
#########################
NULL  "["  


###########################
TERM  add_expr_opt_2_decl_1
###########################
"-"  "+"  


##########################
TERM  function_body_decl_1
##########################
"{"  ENDL  


#######################
TERM  unary_expr_decl_1
#######################
"++"  "typeid"  "gcnew"  "*"  "new"  "-"  "--"  "&"  "!"  


#####################
TERM  else_stmt_opt_2
#####################
NULL  "if"  


#######################
TERM  return_stmt_opt_2
#######################
NULL  "["  "("  


####################
TERM  for_stmt_opt_2
####################
ID  NULL  "("  


#############################
TERM  unary_expr_decl_1_opt_3
#############################
"{"  NULL  


##################
TERM  package_stmt
##################
"package"  


#####################
TERM  for_body_decl_1
#####################
"do"  ENDL  


#################
TERM  array_opt_2
#################
NULL  "["  "("  


##################
TERM  ignore_rep_1
##################
ENDL  NULL  


####################
TERM  var_bind_rep_3
####################
","  NULL  


###########################
TERM  mul_expr_decl_2_opt_1
###########################
NULL  "/"  "^"  "%"  


####################
TERM  for_stmt_opt_6
####################
NULL  "("  


###################
TERM  function_body
###################
ENDL  "{"  


######################
TERM  equal_expr_opt_2
######################
"!="  "=="  NULL  


######################
TERM  visit_expr_opt_2
######################
"->"  NULL  "."  


################
TERM  while_stmt
################
"while"  


#######################
TERM  lambda_expr_opt_5
#######################
"="  NULL  ID  ETC  


####################
TERM  namespace_stmt
####################
"namespace"  


#############
TERM  if_stmt
#############
"if"  


###################
TERM  var_bind_list
###################
ID  ETC  "("  


################
TERM  expr_opt_2
################
","  NULL  


############
TERM  object
############
CHAR  "local"  "("  "global"  ID  "{"  


############################
TERM  decl_stmts_rep_1_rep_2
############################
ENDL  NULL  


################
TERM  catch_stmt
################
"catch"  


###############
TERM  loop_stmt
###############
"loop"  


#################
TERM  lambda_body
#################
"{"  "->"  


###########
TERM  array
###########
"{"  


############
TERM  ignore
############
NULL  ENDL  


################
TERM  decl_stmts
################
PREP  "var"  "namespace"  "struct"  NULL  "link"  "using"  "function"  "constant"  "class"  


############
TERM  asi_op
############
"="  "-="  "/="  "^="  "%="  ":="  "+="  "*="  


################
TERM  unary_expr
################
"++"  "gcnew"  "typeid"  "--"  "new"  "-"  "&"  "*"  "!"  


#######################
TERM  lambda_expr_opt_2
#######################
"="  ID  NULL  


#######################
TERM  class_stmt_decl_1
#######################
"class"  "struct"  


####################
TERM  for_stmt_opt_4
####################
NULL  "("  


#######################
TERM  lambda_body_rep_2
#######################
PREP  "loop"  "try"  "var"  "import"  "namespace"  "struct"  NULL  "return"  "function"  "("  "for"  "constant"  "while"  "switch"  "block"  "foreach"  "break"  "package"  "link"  "["  "using"  "class"  "throw"  "continue"  "if"  


########################
TERM  switch_stmts_rep_1
########################
"case"  NULL  "default"  


################
TERM  until_stmt
################
"until"  


#################
TERM  switch_case
#################
"case"  


####################
TERM  var_list_opt_4
####################
","  NULL  


##############################
TERM  unary_expr_decl_1_decl_2
##############################
NULL  ENDL  


#################
TERM  single_expr
#################
"["  "("  


####################
TERM  element_decl_2
####################
ENDL  NULL  "["  "("  


##############
TERM  var_list
##############
ID  


#############################
TERM  relat_expr_opt_2_decl_1
#############################
"<"  ">"  "<="  ">="  


##############
TERM  end_stmt
##############
"end"  


##########################
TERM  logic_and_expr_opt_2
##########################
NULL  "and"  "&&"  


#########################
TERM  control_stmt_decl_1
#########################
"continue"  "break"  


###############
show FOLLOW SET
###############
#################
TERM  declaration
#################
PREP  ENDL  "var"  "namespace"  "struct"  "link"  "using"  "function"  "end"  "constant"  "class"  


####################
TERM  add_expr_opt_2
####################
"=="  ">="  "*"  "new"  "!="  "++"  "<"  "and"  "typeid"  ">"  "<="  "gcnew"  "&"  "--"  "-"  "&&"  "!"  


###################
TERM  if_stmt_rep_5
###################
PREP  "loop"  "try"  "var"  "import"  "namespace"  "struct"  "while"  "return"  "function"  "("  "for"  "constant"  "}"  "switch"  "block"  ENDL  "foreach"  "break"  "package"  "link"  "using"  "["  "class"  "throw"  "if"  "continue"  


##############
TERM  unary_op
##############
"++"  "typeid"  "gcnew"  "&"  "new"  "-"  "*"  "--"  "!"  


######################
TERM  basic_expr_opt_2
######################
ENDL  ","  ")"  "do"  "}"  "]"  ";"  


###############
TERM  else_stmt
###############
"end"  


################
TERM  block_stmt
################
PREP  "loop"  "try"  "var"  "import"  "namespace"  "struct"  "while"  "return"  "function"  "("  "for"  "constant"  "}"  "switch"  "block"  ENDL  "foreach"  "break"  "package"  "continue"  "using"  "if"  "class"  "throw"  "link"  "["  


###########
TERM  stmts
###########
"namespace"  "else"  "return"  "for"  "catch"  "function"  "("  %END%  ENDL  "foreach"  "break"  "if"  "using"  "class"  "block"  "throw"  PREP  "loop"  "import"  "try"  "var"  "struct"  "constant"  "}"  "continue"  "package"  "link"  "until"  "end"  "["  "while"  "switch"  


###########
TERM  begin
###########
%END%  


#########################
TERM  argument_list_opt_1
#########################
ID  


###############
TERM  statement
###############
PREP  "loop"  "import"  "try"  "var"  "namespace"  "struct"  "block"  "return"  "for"  "function"  "constant"  "}"  "("  "while"  "switch"  ENDL  "foreach"  "break"  "package"  "continue"  "using"  "link"  "if"  "throw"  "["  "class"  


#########################
TERM  function_stmt_opt_4
#########################
")"  


######################
TERM  using_list_opt_2
######################
ENDL  ";"  


###################
TERM  argument_list
###################
","  ")"  


################
TERM  visit_expr
################
ENDL  ","  ")"  


##############
TERM  try_stmt
##############
PREP  "loop"  "try"  "var"  "import"  "namespace"  "struct"  "while"  "return"  "function"  "("  "for"  "constant"  "}"  "switch"  "block"  ENDL  "foreach"  "break"  "package"  "continue"  "using"  "if"  "class"  "throw"  "link"  "["  


####################
TERM  switch_default
####################
ENDL  "default"  "end"  "case"  


#########################
TERM  function_stmt_opt_6
#########################
"{"  ENDL  


#####################
TERM  for_stmt_decl_5
#####################
"do"  ENDL  "("  


########################
TERM  capture_list_opt_1
########################
ID  


##############
TERM  mul_expr
##############
"=="  ">="  "*"  "new"  "!="  "+"  "++"  "<"  "gcnew"  "typeid"  "and"  ">"  "<="  "--"  "&"  "-"  "&&"  "!"  


#################
TERM  lambda_expr
#################
"do"  ","  ENDL  "]"  ")"  "}"  ";"  


##################
TERM  capture_list
##################
"]"  ","  


###############
TERM  prep_stmt
###############
PREP  "loop"  "try"  "var"  "import"  "namespace"  "struct"  "class"  "return"  "function"  "("  "constant"  "for"  "}"  "end"  "while"  ENDL  "foreach"  "switch"  "break"  "continue"  "package"  "["  "link"  "using"  "block"  "throw"  "if"  


#############################
TERM  lambda_body_rep_2_rep_2
#############################
PREP  "loop"  "try"  "var"  "import"  "namespace"  "struct"  "while"  "return"  "function"  "("  "for"  "constant"  "}"  "switch"  "block"  "foreach"  "break"  "package"  "continue"  "using"  "link"  "["  "throw"  "if"  "class"  


################
TERM  using_stmt
################
PREP  "loop"  "try"  "var"  "import"  "namespace"  "struct"  "class"  "return"  "function"  "("  "constant"  "for"  "}"  "end"  "while"  ENDL  "foreach"  "switch"  "break"  "continue"  "package"  "["  "link"  "using"  "block"  "throw"  "if"  


###################
TERM  logic_or_expr
###################
":"  ";"  "/="  "^="  ":="  "}"  "+="  "do"  ENDL  "="  ")"  "-="  ","  "%="  "]"  "*="  


########################
TERM  capture_list_rep_3
########################
"]"  ","  


#################
TERM  fcall_opt_2
#################
")"  


################
TERM  equal_expr
################
"++"  "gcnew"  "typeid"  "and"  "*"  "new"  "&"  "--"  "-"  "&&"  "!"  


##############
TERM  var_bind
##############
"="  ","  ")"  


#####################
TERM  var_stmt_decl_1
#####################
ID  "("  


#########################
TERM  argument_list_opt_3
#########################
CHAR  "local"  "("  "global"  ID  "{"  


###################
TERM  function_stmt
###################
PREP  "loop"  "try"  "var"  "import"  "namespace"  "struct"  "class"  "return"  "function"  "("  "constant"  "for"  "}"  "end"  "while"  ENDL  "foreach"  "switch"  "break"  "continue"  "package"  "["  "link"  "using"  "block"  "throw"  "if"  


###########
TERM  index
###########
CHAR  "{"  ID  "->"  "local"  "("  "global"  "["  "."  


#################
TERM  return_stmt
#################
PREP  "loop"  "try"  "var"  "import"  "namespace"  "struct"  "while"  "return"  "function"  "("  "for"  "constant"  "}"  "switch"  "block"  ENDL  "foreach"  "break"  "package"  "continue"  "using"  "if"  "class"  "throw"  "link"  "["  


####################################
TERM  unary_expr_decl_1_decl_2_opt_1
####################################
"=="  "{"  ">="  "new"  "*"  "!="  "+"  "++"  ENDL  "/"  "<"  "and"  "typeid"  ">"  "<="  "gcnew"  "&"  "--"  "-"  "%"  "^"  "&&"  "!"  


################
TERM  class_stmt
################
PREP  "loop"  "try"  "var"  "import"  "namespace"  "struct"  "class"  "return"  "function"  "("  "constant"  "for"  "}"  "end"  "while"  ENDL  "foreach"  "switch"  "break"  "continue"  "package"  "["  "link"  "using"  "block"  "throw"  "if"  


#################
TERM  import_list
#################
ENDL  ";"  


##########################
TERM  element_decl_2_rep_1
##########################
CHAR  ID  "{"  "->"  "local"  "("  "global"  "."  


################
TERM  logic_expr
################
"*="  ";"  "^="  "/="  ":="  "}"  "+="  "="  "do"  ENDL  ")"  "-="  ","  "?"  "%="  "]"  ":"  


##############################
TERM  unary_expr_decl_1_decl_1
##############################
"++"  "typeid"  "gcnew"  "&"  "new"  "-"  "*"  "--"  "!"  


#####################
TERM  cond_expr_opt_2
#####################
";"  "^="  "/="  ":="  "}"  "+="  "="  "do"  ENDL  ")"  "-="  ","  "%="  "]"  "*="  


#######################
TERM  stmts_rep_1_rep_2
#######################
"namespace"  "else"  "return"  "function"  "("  "for"  "catch"  %END%  ENDL  "foreach"  "break"  "using"  "if"  "class"  "throw"  "block"  PREP  "loop"  "try"  "var"  "import"  "struct"  "constant"  "}"  "package"  "continue"  "["  "until"  "link"  "while"  "switch"  "end"  


##################
TERM  control_stmt
##################
PREP  "loop"  "try"  "var"  "import"  "namespace"  "struct"  "while"  "return"  "function"  "("  "for"  "constant"  "}"  "switch"  "block"  ENDL  "foreach"  "break"  "package"  "continue"  "using"  "if"  "class"  "throw"  "link"  "["  


#############
TERM  var_def
#############
","  ENDL  ";"  


########################
TERM  switch_stmts_rep_2
########################
"end"  


##############
TERM  for_stmt
##############
PREP  "loop"  "try"  "var"  "import"  "namespace"  "struct"  "while"  "return"  "function"  "("  "for"  "constant"  "}"  "switch"  "block"  ENDL  "foreach"  "break"  "package"  "continue"  "using"  "if"  "class"  "throw"  "link"  "["  


#############
TERM  element
#############
CHAR  ID  "{"  "->"  "local"  "("  "global"  "."  


######################
TERM  loop_stmt_decl_4
######################
PREP  "loop"  "import"  "try"  "var"  "namespace"  "struct"  "block"  "return"  "for"  "function"  "constant"  "}"  "("  "while"  "switch"  ENDL  "foreach"  "break"  "package"  "continue"  "if"  "using"  "class"  "throw"  "["  "link"  


##################
TERM  cond_postfix
##################
";"  "/="  "^="  ":="  "}"  "+="  "do"  ENDL  "="  ")"  "-="  ","  "%="  "]"  "*="  


#################
TERM  module_list
#################
ENDL  ","  ";"  


#################
TERM  switch_stmt
#################
PREP  "loop"  "try"  "var"  "import"  "namespace"  "struct"  "while"  "return"  "function"  "("  "for"  "constant"  "}"  "switch"  "block"  ENDL  "foreach"  "break"  "package"  "continue"  "using"  "if"  "class"  "throw"  "link"  "["  


#################
TERM  import_stmt
#################
PREP  "loop"  "try"  "var"  "import"  "namespace"  "struct"  "while"  "return"  "function"  "("  "for"  "constant"  "}"  "switch"  "block"  ENDL  "foreach"  "break"  "package"  "continue"  "using"  "if"  "class"  "throw"  "link"  "["  


####################
TERM  element_decl_1
####################
CHAR  ENDL  "{"  ID  "->"  "local"  "("  "global"  "["  "."  


#####################
TERM  for_stmt_decl_3
#####################
","  ";"  "("  


#########################
TERM  logic_or_expr_opt_2
#########################
"++"  "typeid"  "gcnew"  "*"  "new"  "-"  "--"  "&"  "!"  


#################
TERM  stmts_rep_1
#################
"namespace"  "else"  "return"  %END%  "for"  "catch"  "function"  "("  ENDL  "foreach"  "break"  "if"  "using"  "class"  "block"  "throw"  PREP  "loop"  "import"  "try"  "var"  "struct"  "constant"  "}"  "package"  "link"  "until"  "continue"  "end"  "["  "while"  "switch"  


######################
TERM  class_stmt_opt_3
######################
ENDL  


######################
TERM  throw_stmt_opt_2
######################
ENDL  ";"  


#############
TERM  endline
#############
PREP  "loop"  "import"  "try"  "var"  "namespace"  "struct"  "class"  "return"  "for"  "function"  "constant"  "}"  "("  "block"  "while"  ENDL  "foreach"  "switch"  "break"  "continue"  "package"  "using"  "["  "end"  "throw"  "if"  "link"  


##################
TERM  switch_stmts
##################
"end"  


###############
TERM  prim_expr
###############
"{"  "=="  "*"  "new"  ">="  "!="  "+"  "++"  "<"  "gcnew"  "typeid"  "and"  ">"  "<="  "--"  "&"  "-"  ENDL  "&&"  "/"  "^"  "!"  "%"  


###################
TERM  object_decl_1
###################
CHAR  "{"  ID  "->"  "local"  "("  "global"  "."  


##################################
TERM  mul_expr_decl_2_opt_1_decl_1
##################################
"++"  "gcnew"  "typeid"  "*"  "new"  "-"  "--"  "&"  "!"  


#########################
TERM  argument_list_rep_5
#########################
","  ")"  


#############
TERM  postifx
#############
"{"  "=="  "*"  "new"  ">="  "!="  "+"  "++"  "<"  "gcnew"  "typeid"  "and"  ">"  "<="  "--"  "&"  "-"  ENDL  "&&"  "/"  "^"  "!"  "%"  


##############
TERM  add_expr
##############
"=="  ">="  "*"  "new"  "!="  "++"  "<"  "gcnew"  "typeid"  "and"  ">"  "<="  "--"  "&"  "-"  "&&"  "!"  


####################
TERM  logic_and_expr
####################
"++"  "gcnew"  "typeid"  "||"  "&"  "new"  "-"  "*"  "--"  "!"  "or"  


###########
TERM  fcall
###########
CHAR  ID  "{"  "->"  "local"  "("  "global"  "["  "."  


######################
TERM  relat_expr_opt_2
######################
"++"  "gcnew"  "typeid"  "and"  "=="  "*"  "new"  "--"  "-"  "&&"  "&"  "!="  "!"  


###############
TERM  expr_stmt
###############
PREP  "loop"  "try"  "var"  "import"  "namespace"  "struct"  "while"  "return"  "function"  "("  "for"  "constant"  "}"  "switch"  "block"  ENDL  "foreach"  "break"  "package"  "continue"  "using"  "if"  "class"  "throw"  "link"  "["  


##################
TERM  foreach_stmt
##################
PREP  "loop"  "try"  "var"  "import"  "namespace"  "struct"  "while"  "return"  "function"  "("  "for"  "constant"  "}"  "switch"  "block"  ENDL  "foreach"  "break"  "package"  "continue"  "using"  "if"  "class"  "throw"  "link"  "["  


#############
TERM  %start%
#############
%END%  


################
TERM  basic_expr
################
"do"  ","  ENDL  "]"  ")"  "}"  ";"  


##########
TERM  expr
##########
ENDL  ")"  "}"  ";"  


#############################
TERM  equal_expr_opt_2_decl_1
#############################
"++"  "typeid"  "gcnew"  "*"  "new"  "-"  "--"  "&"  "!"  


################
TERM  using_list
################
ENDL  ";"  


################
TERM  relat_expr
################
"++"  "and"  "typeid"  "gcnew"  "=="  "--"  "&"  "new"  "-"  "*"  "&&"  "!="  "!"  


##############
TERM  var_stmt
##############
PREP  "loop"  "try"  "var"  "import"  "namespace"  "struct"  "class"  "return"  "function"  "("  "constant"  "for"  "}"  "end"  "while"  ENDL  "foreach"  "switch"  "break"  "continue"  "package"  "["  "link"  "using"  "block"  "throw"  "if"  


######################
TERM  decl_stmts_rep_1
######################
"end"  


################
TERM  throw_stmt
################
PREP  "loop"  "try"  "var"  "import"  "namespace"  "struct"  "while"  "return"  "function"  "("  "for"  "constant"  "}"  "switch"  "block"  ENDL  "foreach"  "break"  "package"  "continue"  "using"  "if"  "class"  "throw"  "link"  "["  


#####################
TERM  mul_expr_decl_2
#####################
"=="  ">="  "*"  "new"  "!="  "+"  "++"  "<"  "gcnew"  "typeid"  "and"  ">"  "<="  "--"  "&"  "-"  "&&"  "!"  


##############
TERM  for_body
##############
PREP  "loop"  "import"  "try"  "var"  "namespace"  "struct"  "block"  "return"  "for"  "function"  "constant"  "}"  "("  "while"  "switch"  ENDL  "foreach"  "break"  "package"  "link"  "if"  "using"  "class"  "throw"  "["  "continue"  


####################
TERM  try_stmt_rep_4
####################
"end"  


######################
TERM  catch_stmt_opt_3
######################
ENDL  


#########################
TERM  object_decl_1_opt_2
#########################
CHAR  ID  "{"  "->"  "local"  "("  "global"  "."  


###########################
TERM  add_expr_opt_2_decl_1
###########################
"++"  "typeid"  "gcnew"  "--"  "new"  "-"  "&"  "*"  "!"  


##########################
TERM  function_body_decl_1
##########################
PREP  "loop"  "try"  "var"  "import"  "namespace"  "struct"  "class"  "return"  "function"  "("  "constant"  "for"  "}"  "end"  "while"  ENDL  "foreach"  "switch"  "break"  "continue"  "link"  "["  "package"  "if"  "block"  "throw"  "using"  


#######################
TERM  unary_expr_decl_1
#######################
"=="  "{"  ">="  "new"  "*"  "!="  "+"  "++"  ENDL  "/"  "<"  "and"  "typeid"  ">"  "<="  "gcnew"  "&"  "--"  "-"  "%"  "^"  "&&"  "!"  


#####################
TERM  else_stmt_opt_2
#####################
ENDL  


#######################
TERM  return_stmt_opt_2
#######################
ENDL  ";"  


####################
TERM  for_stmt_opt_2
####################
","  ";"  


#############################
TERM  unary_expr_decl_1_opt_3
#############################
"{"  "=="  "*"  "new"  ">="  "!="  "+"  "++"  "<"  "gcnew"  "typeid"  "and"  ">"  "<="  "--"  "&"  "-"  ENDL  "&&"  "/"  "^"  "!"  "%"  


##################
TERM  package_stmt
##################
PREP  "loop"  "try"  "var"  "import"  "namespace"  "struct"  "while"  "return"  "function"  "("  "for"  "constant"  "}"  "switch"  "block"  ENDL  "foreach"  "break"  "package"  "continue"  "using"  "if"  "class"  "throw"  "link"  "["  


#####################
TERM  for_body_decl_1
#####################
PREP  "loop"  "try"  "var"  "import"  "namespace"  "struct"  "while"  "return"  "function"  "("  "for"  "constant"  "}"  "switch"  "block"  ENDL  "foreach"  "break"  "continue"  "link"  "["  "if"  "class"  "throw"  "package"  "using"  


#################
TERM  array_opt_2
#################
"}"  


####################
TERM  var_bind_rep_3
####################
")"  


###########################
TERM  mul_expr_decl_2_opt_1
###########################
"=="  ">="  "*"  "new"  "!="  "+"  "++"  "<"  "and"  "typeid"  ">"  "<="  "gcnew"  "&"  "--"  "-"  "&&"  "!"  


####################
TERM  for_stmt_opt_6
####################
"do"  ENDL  


###################
TERM  function_body
###################
PREP  "loop"  "import"  "try"  "var"  "namespace"  "struct"  "end"  "return"  "for"  "function"  "("  "}"  "constant"  "while"  "switch"  ENDL  "foreach"  "class"  "break"  "continue"  "link"  "["  "if"  "using"  "throw"  "block"  "package"  


######################
TERM  equal_expr_opt_2
######################
"++"  "and"  "typeid"  "gcnew"  "*"  "new"  "-"  "--"  "&&"  "&"  "!"  


######################
TERM  visit_expr_opt_2
######################
CHAR  "local"  "("  "global"  ID  "{"  


################
TERM  while_stmt
################
PREP  "loop"  "try"  "var"  "import"  "namespace"  "struct"  "while"  "return"  "function"  "("  "for"  "constant"  "}"  "switch"  "block"  ENDL  "foreach"  "break"  "package"  "continue"  "using"  "if"  "class"  "throw"  "link"  "["  


#######################
TERM  lambda_expr_opt_5
#######################
")"  


####################
TERM  namespace_stmt
####################
PREP  "loop"  "try"  "var"  "import"  "namespace"  "struct"  "class"  "return"  "function"  "("  "constant"  "for"  "}"  "end"  "while"  ENDL  "foreach"  "switch"  "break"  "continue"  "package"  "["  "link"  "using"  "block"  "throw"  "if"  


################
TERM  expr_opt_2
################
ENDL  ")"  "}"  ";"  


###################
TERM  var_bind_list
###################
","  ")"  


#############
TERM  if_stmt
#############
PREP  "loop"  "try"  "var"  "import"  "namespace"  "struct"  "while"  "return"  "function"  "("  "for"  "constant"  "}"  "switch"  "block"  ENDL  "foreach"  "break"  "package"  "continue"  "using"  "if"  "class"  "throw"  "link"  "["  


############
TERM  object
############
CHAR  ID  "{"  "->"  "local"  "("  "global"  "."  


############################
TERM  decl_stmts_rep_1_rep_2
############################
PREP  "var"  "namespace"  "struct"  "link"  "function"  "using"  "class"  "constant"  "end"  


################
TERM  catch_stmt
################
"end"  "catch"  


###############
TERM  loop_stmt
###############
PREP  "loop"  "try"  "var"  "import"  "namespace"  "struct"  "while"  "return"  "function"  "("  "for"  "constant"  "}"  "switch"  "block"  ENDL  "foreach"  "break"  "package"  "continue"  "using"  "if"  "class"  "throw"  "link"  "["  


#################
TERM  lambda_body
#################
ENDL  ","  ")"  "do"  "}"  "]"  ";"  


################
TERM  unary_expr
################
"{"  "=="  "*"  "new"  ">="  "!="  "+"  "++"  "<"  "gcnew"  "typeid"  "and"  ">"  "<="  "--"  "&"  "-"  ENDL  "&&"  "/"  "^"  "!"  "%"  


###########
TERM  array
###########
CHAR  "{"  "*"  "new"  "->"  "("  "!="  ENDL  "<"  "and"  "gcnew"  ">"  "&"  "--"  "&&"  "^"  "."  "=="  ">="  "local"  "global"  "+"  "++"  "/"  "typeid"  ID  "<="  "-"  "["  "%"  "!"  


################
TERM  decl_stmts
################
"end"  


############
TERM  asi_op
############
"["  "("  


#########
TERM  str
#########
CHAR  ID  "{"  "->"  "local"  "("  "global"  "["  "."  


#######################
TERM  lambda_expr_opt_2
#######################
"]"  


#######################
TERM  class_stmt_decl_1
#######################
ID  


####################
TERM  for_stmt_opt_4
####################
","  ";"  


#######################
TERM  lambda_body_rep_2
#######################
"}"  


########################
TERM  switch_stmts_rep_1
########################
"end"  ENDL  


################
TERM  until_stmt
################
PREP  "loop"  "try"  "var"  "import"  "namespace"  "struct"  "while"  "return"  "function"  "("  "for"  "constant"  "}"  "switch"  "block"  ENDL  "foreach"  "break"  "package"  "continue"  "["  "if"  "class"  "throw"  "link"  "using"  


#################
TERM  switch_case
#################
ENDL  "default"  "end"  "case"  


#################
TERM  single_expr
#################
"do"  ","  ")"  ENDL  "]"  "}"  ";"  


################
TERM  statements
################
"namespace"  "else"  "return"  %END%  "for"  "catch"  "function"  "("  ENDL  "foreach"  "break"  "if"  "using"  "class"  "block"  "throw"  PREP  "loop"  "import"  "try"  "var"  "struct"  "constant"  "}"  "continue"  "link"  "["  "package"  "end"  "until"  "while"  "switch"  


##############################
TERM  unary_expr_decl_1_decl_2
##############################
"{"  "=="  "*"  "new"  ">="  "!="  "+"  "++"  "<"  "gcnew"  "typeid"  "and"  ">"  "<="  "--"  "&"  "-"  ENDL  "&&"  "/"  "^"  "!"  "%"  


####################
TERM  var_list_opt_4
####################
","  ENDL  ";"  


####################
TERM  element_decl_2
####################
CHAR  "{"  ID  "->"  "local"  "("  "global"  "."  


###############
TERM  cond_expr
###############
";"  "^="  "/="  ":="  "}"  "+="  "="  "do"  ENDL  ")"  "-="  ","  "%="  "]"  "*="  


##############
TERM  var_list
##############
ENDL  ","  ";"  


#############################
TERM  relat_expr_opt_2_decl_1
#############################
"++"  "gcnew"  "typeid"  "&"  "new"  "-"  "*"  "--"  "!"  


##########################
TERM  logic_and_expr_opt_2
##########################
"++"  "gcnew"  "typeid"  "--"  "new"  "-"  "&"  "*"  "!"  


#########################
TERM  control_stmt_decl_1
#########################
ENDL  ";"  


