Compile Time: 0.078s
begin
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "begin"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> repeat_part
            repeat_part -> "{"
            repeat_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "statement"
            repeat_part -> "}"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "statement"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "non_terminal_symbol"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "assign_op"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "declaration"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "end_op"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "assign_op"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'='"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'::='"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "end_op"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "';'"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "".""
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "declaration"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "term"
        term -> part
          part -> repeat_part
            repeat_part -> "{"
            repeat_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "'|'"
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "term"
            repeat_part -> "}"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "term"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "part"
        term -> part
          part -> repeat_part
            repeat_part -> "{"
            repeat_part -> declaration
              declaration -> term
                term -> part
                  part -> alternative_part
                    alternative_part -> "["
                    alternative_part -> declaration
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> terminal_symbol
                              terminal_symbol -> "','"
                    alternative_part -> "]"
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "part"
            repeat_part -> "}"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "part"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "repeat_part"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "declaration_part"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "alternative_part"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "simple_part"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "repeat_part"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'{'"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "declaration"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'}'"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "declaration_part"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'('"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "declaration"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "')'"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "alternative_part"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'['"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "declaration"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "']'"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "simple_part"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "non_terminal_symbol"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "terminal_symbol"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "terminal_symbol"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "LIT"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "TOKEN"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "non_terminal_symbol"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ID"
    statement -> end_op
      end_op -> ";"
#############
New Statement
#############
Left Non-terminal-symbol: begin
Now_name: begin
create now_tree : begin
Start analyze Declaration: 
add new node: begin_rep_1
record old tree: begin
change now tree: begin_rep_1
simple part: non_terminal_symbol: statement
simple part: non_terminal_symbol: begin_rep_1
simple part: non_terminal_symbol: NULL
recover from fun, now_tree: begin
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: statement
Now_name: statement
create now_tree : statement
Start analyze Declaration: 
simple part: non_terminal_symbol: non_terminal_symbol
simple part: non_terminal_symbol: assign_op
simple part: non_terminal_symbol: declaration
simple part: non_terminal_symbol: end_op
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: assign_op
Now_name: assign_op
create now_tree : assign_op
Start analyze Declaration: 
simple part: terminal_symbol: '='
simple part: terminal_symbol: '::='
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: end_op
Now_name: end_op
create now_tree : end_op
Start analyze Declaration: 
simple part: terminal_symbol: ';'
simple part: terminal_symbol: "."
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: declaration
Now_name: declaration
create now_tree : declaration
Start analyze Declaration: 
simple part: non_terminal_symbol: term
add new node: declaration_rep_2
record old tree: declaration
change now tree: declaration_rep_2
simple part: terminal_symbol: '|'
simple part: non_terminal_symbol: term
simple part: non_terminal_symbol: declaration_rep_2
simple part: non_terminal_symbol: NULL
recover from fun, now_tree: declaration
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: term
Now_name: term
create now_tree : term
Start analyze Declaration: 
simple part: non_terminal_symbol: part
add new node: term_rep_2
record old tree: term
change now tree: term_rep_2
add new node: term_rep_2_opt_1
record old tree: term_rep_2
change now tree: term_rep_2_opt_1
simple part: terminal_symbol: ','
simple part: non_terminal_symbol: NULL
recover from fun, now_tree: term_rep_2
simple part: non_terminal_symbol: part
simple part: non_terminal_symbol: term_rep_2
simple part: non_terminal_symbol: NULL
recover from fun, now_tree: term
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: part
Now_name: part
create now_tree : part
Start analyze Declaration: 
simple part: non_terminal_symbol: repeat_part
simple part: non_terminal_symbol: declaration_part
simple part: non_terminal_symbol: alternative_part
simple part: non_terminal_symbol: simple_part
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: repeat_part
Now_name: repeat_part
create now_tree : repeat_part
Start analyze Declaration: 
simple part: terminal_symbol: '{'
simple part: non_terminal_symbol: declaration
simple part: terminal_symbol: '}'
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: declaration_part
Now_name: declaration_part
create now_tree : declaration_part
Start analyze Declaration: 
simple part: terminal_symbol: '('
simple part: non_terminal_symbol: declaration
simple part: terminal_symbol: ')'
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: alternative_part
Now_name: alternative_part
create now_tree : alternative_part
Start analyze Declaration: 
simple part: terminal_symbol: '['
simple part: non_terminal_symbol: declaration
simple part: terminal_symbol: ']'
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: simple_part
Now_name: simple_part
create now_tree : simple_part
Start analyze Declaration: 
simple part: non_terminal_symbol: non_terminal_symbol
simple part: non_terminal_symbol: terminal_symbol
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: terminal_symbol
Now_name: terminal_symbol
create now_tree : terminal_symbol
Start analyze Declaration: 
simple part: terminal_symbol: LIT
simple part: terminal_symbol: TOKEN
End analyze Decalration 
#############
New Statement
#############
Left Non-terminal-symbol: non_terminal_symbol
Now_name: non_terminal_symbol
create now_tree : non_terminal_symbol
Start analyze Declaration: 
simple part: terminal_symbol: ID
End analyze Decalration 



#########
show list
#########
################
show_origin_info
################
begin ::= begin_rep_1 
begin_rep_1 ::= NULL 
begin_rep_1 ::= statement begin_rep_1 
statement ::= non_terminal_symbol assign_op declaration end_op 
assign_op ::= '::=' 
assign_op ::= '=' 
end_op ::= "." 
end_op ::= ';' 
declaration ::= term declaration_rep_2 
declaration_rep_2 ::= NULL 
declaration_rep_2 ::= '|' term declaration_rep_2 
term ::= part term_rep_2 
term_rep_2 ::= NULL 
term_rep_2 ::= term_rep_2_opt_1 part term_rep_2 
term_rep_2_opt_1 ::= NULL 
term_rep_2_opt_1 ::= ',' 
part ::= simple_part 
part ::= alternative_part 
part ::= declaration_part 
part ::= repeat_part 
repeat_part ::= '{' declaration '}' 
declaration_part ::= '(' declaration ')' 
alternative_part ::= '[' declaration ']' 
simple_part ::= terminal_symbol 
simple_part ::= non_terminal_symbol 
terminal_symbol ::= TOKEN 
terminal_symbol ::= LIT 
non_terminal_symbol ::= ID 
##############################
show info after add start node
##############################
%start% ::= begin 
begin ::= begin_rep_1 
begin_rep_1 ::= NULL 
begin_rep_1 ::= statement begin_rep_1 
statement ::= non_terminal_symbol assign_op declaration end_op 
assign_op ::= '::=' 
assign_op ::= '=' 
end_op ::= "." 
end_op ::= ';' 
declaration ::= term declaration_rep_2 
declaration_rep_2 ::= NULL 
declaration_rep_2 ::= '|' term declaration_rep_2 
term ::= part term_rep_2 
term_rep_2 ::= NULL 
term_rep_2 ::= term_rep_2_opt_1 part term_rep_2 
term_rep_2_opt_1 ::= NULL 
term_rep_2_opt_1 ::= ',' 
part ::= simple_part 
part ::= alternative_part 
part ::= declaration_part 
part ::= repeat_part 
repeat_part ::= '{' declaration '}' 
declaration_part ::= '(' declaration ')' 
alternative_part ::= '[' declaration ']' 
simple_part ::= terminal_symbol 
simple_part ::= non_terminal_symbol 
terminal_symbol ::= TOKEN 
terminal_symbol ::= LIT 
non_terminal_symbol ::= ID 
#############
show_new_info
#############
%start% =  %MARK% begin
%start% =  begin %MARK%
begin =  %MARK% begin_rep_1
begin =  begin_rep_1 %MARK%
begin_rep_1 =  %MARK%
begin_rep_1 =  %MARK% statement begin_rep_1
begin_rep_1 =  statement %MARK% begin_rep_1
begin_rep_1 =  statement begin_rep_1 %MARK%
statement =  %MARK% non_terminal_symbol assign_op declaration end_op
statement =  non_terminal_symbol %MARK% assign_op declaration end_op
statement =  non_terminal_symbol assign_op %MARK% declaration end_op
statement =  non_terminal_symbol assign_op declaration %MARK% end_op
statement =  non_terminal_symbol assign_op declaration end_op %MARK%
assign_op =  %MARK% '::='
assign_op =  '::=' %MARK%
assign_op =  %MARK% '='
assign_op =  '=' %MARK%
end_op =  %MARK% "."
end_op =  "." %MARK%
end_op =  %MARK% ';'
end_op =  ';' %MARK%
declaration =  %MARK% term declaration_rep_2
declaration =  term %MARK% declaration_rep_2
declaration =  term declaration_rep_2 %MARK%
declaration_rep_2 =  %MARK%
declaration_rep_2 =  %MARK% '|' term declaration_rep_2
declaration_rep_2 =  '|' %MARK% term declaration_rep_2
declaration_rep_2 =  '|' term %MARK% declaration_rep_2
declaration_rep_2 =  '|' term declaration_rep_2 %MARK%
term =  %MARK% part term_rep_2
term =  part %MARK% term_rep_2
term =  part term_rep_2 %MARK%
term_rep_2 =  %MARK%
term_rep_2 =  %MARK% term_rep_2_opt_1 part term_rep_2
term_rep_2 =  term_rep_2_opt_1 %MARK% part term_rep_2
term_rep_2 =  term_rep_2_opt_1 part %MARK% term_rep_2
term_rep_2 =  term_rep_2_opt_1 part term_rep_2 %MARK%
term_rep_2_opt_1 =  %MARK%
term_rep_2_opt_1 =  %MARK% ','
term_rep_2_opt_1 =  ',' %MARK%
part =  %MARK% simple_part
part =  simple_part %MARK%
part =  %MARK% alternative_part
part =  alternative_part %MARK%
part =  %MARK% declaration_part
part =  declaration_part %MARK%
part =  %MARK% repeat_part
part =  repeat_part %MARK%
repeat_part =  %MARK% '{' declaration '}'
repeat_part =  '{' %MARK% declaration '}'
repeat_part =  '{' declaration %MARK% '}'
repeat_part =  '{' declaration '}' %MARK%
declaration_part =  %MARK% '(' declaration ')'
declaration_part =  '(' %MARK% declaration ')'
declaration_part =  '(' declaration %MARK% ')'
declaration_part =  '(' declaration ')' %MARK%
alternative_part =  %MARK% '[' declaration ']'
alternative_part =  '[' %MARK% declaration ']'
alternative_part =  '[' declaration %MARK% ']'
alternative_part =  '[' declaration ']' %MARK%
simple_part =  %MARK% terminal_symbol
simple_part =  terminal_symbol %MARK%
simple_part =  %MARK% non_terminal_symbol
simple_part =  non_terminal_symbol %MARK%
terminal_symbol =  %MARK% TOKEN
terminal_symbol =  TOKEN %MARK%
terminal_symbol =  %MARK% LIT
terminal_symbol =  LIT %MARK%
non_terminal_symbol =  %MARK% ID
non_terminal_symbol =  ID %MARK%
##############
show FIRST SET
##############
#############
TERM  %start%
#############
NULL  ID  


#################
TERM  declaration
#################
'('  TOKEN  '['  '{'  LIT  ID  


######################
TERM  alternative_part
######################
'['  


#########################
TERM  non_terminal_symbol
#########################
ID  


#####################
TERM  terminal_symbol
#####################
TOKEN  LIT  


######################
TERM  declaration_part
######################
'('  


#######################
TERM  declaration_rep_2
#######################
NULL  '|'  


###########
TERM  begin
###########
NULL  ID  


###############
TERM  statement
###############
ID  


#################
TERM  repeat_part
#################
'{'  


##########
TERM  term
##########
'('  TOKEN  '['  '{'  ID  LIT  


###############
TERM  assign_op
###############
'='  '::='  


######################
TERM  term_rep_2_opt_1
######################
NULL  ','  


#################
TERM  simple_part
#################
TOKEN  LIT  ID  


################
TERM  term_rep_2
################
'('  TOKEN  '['  '{'  ID  NULL  ','  LIT  


#################
TERM  begin_rep_1
#################
NULL  ID  


##########
TERM  part
##########
'('  TOKEN  '['  '{'  ID  LIT  


############
TERM  end_op
############
"."  ';'  


