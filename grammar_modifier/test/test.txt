Compile Time: 0.025s
begin
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "s"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'('"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "s"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "')'"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "s"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "NULL"
    statement -> end_op
      end_op -> ";"



#########
show list
#########



######################
show origin terms info
######################
s ::= NULL 
s ::= '(' s ')' s 



##############################
show info after add start node
##############################
%start% ::= s 
s ::= NULL 
s ::= '(' s ')' s 



##############
show FIRST SET
##############
TERM  s : '('  NULL  

TERM  %start% : NULL  '('  




###############
show FOLLOW SET
###############
TERM  %start% : %END%  

TERM  s : %END%  ')'  

##############
show_mark_info
##############
%start% =  %MARK% s
%start% =  s %MARK%
s =  %MARK%
s =  %MARK% '(' s ')' s
s =  '(' %MARK% s ')' s
s =  '(' s %MARK% ')' s
s =  '(' s ')' %MARK% s
s =  '(' s ')' s %MARK%



########
DNF TERM
########
%start%  :  %MARK%  s  
 index is: 0, source_index: 0, before: %NULL%, after: s
%start%  :  s  %MARK%  
 index is: 1, source_index: 0, before: s, after: %NULL%
s  :  %MARK%  
 index is: 2, source_index: 1, before: %NULL%, after: %NULL%
s  :  %MARK%  '('  s  ')'  s  
 index is: 3, source_index: 2, before: %NULL%, after: '('
s  :  '('  %MARK%  s  ')'  s  
 index is: 4, source_index: 2, before: '(', after: s
s  :  '('  s  %MARK%  ')'  s  
 index is: 5, source_index: 2, before: s, after: ')'
s  :  '('  s  ')'  %MARK%  s  
 index is: 6, source_index: 2, before: ')', after: s
s  :  '('  s  ')'  s  %MARK%  
 index is: 7, source_index: 2, before: s, after: %NULL%



###########
ADD TARGETS
###########
%start%  :  %MARK%  s  
 index is: 0, term type: to_deduce, before: %NULL%, after: s
TARGET LIST: 
target index: 1  , change_value: s
target index: 2  , change_value: %NULL%
target index: 3  , change_value: %NULL%

%start%  :  s  %MARK%  
 index is: 1, term type: accept, before: s, after: %NULL%
TARGET LIST: 

s  :  %MARK%  
 index is: 2, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

s  :  %MARK%  '('  s  ')'  s  
 index is: 3, term type: shift, before: %NULL%, after: '('
TARGET LIST: 
target index: 4  , change_value: '('

s  :  '('  %MARK%  s  ')'  s  
 index is: 4, term type: to_deduce, before: '(', after: s
TARGET LIST: 
target index: 2  , change_value: %NULL%
target index: 3  , change_value: %NULL%
target index: 5  , change_value: s

s  :  '('  s  %MARK%  ')'  s  
 index is: 5, term type: shift, before: s, after: ')'
TARGET LIST: 
target index: 6  , change_value: ')'

s  :  '('  s  ')'  %MARK%  s  
 index is: 6, term type: to_deduce, before: ')', after: s
TARGET LIST: 
target index: 2  , change_value: %NULL%
target index: 3  , change_value: %NULL%
target index: 7  , change_value: s

s  :  '('  s  ')'  s  %MARK%  
 index is: 7, term type: deduce, before: s, after: %NULL%
TARGET LIST: 

#####
#DFA#
#####
#########
#0  TERM#
#########


##########
#FROM SET#
##########
%start%  :  %MARK%  s  
 index is: 0, term type: to_deduce, before: %NULL%, after: s
TARGET LIST: 
target index: 1  , change_value: s
target index: 2  , change_value: %NULL%
target index: 3  , change_value: %NULL%

########
#SUBSET#
########
%start%  :  %MARK%  s  
 index is: 0, term type: to_deduce, before: %NULL%, after: s
TARGET LIST: 
target index: 1  , change_value: s
target index: 2  , change_value: %NULL%
target index: 3  , change_value: %NULL%

s  :  %MARK%  
 index is: 2, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

s  :  %MARK%  '('  s  ')'  s  
 index is: 3, term type: shift, before: %NULL%, after: '('
TARGET LIST: 
target index: 4  , change_value: '('

########
#TO SET#
########
index: 1, target_source: s

index: 2, target_source: '('



#########
#1  TERM#
#########


##########
#FROM SET#
##########
%start%  :  s  %MARK%  
 index is: 1, term type: accept, before: s, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
%start%  :  s  %MARK%  
 index is: 1, term type: accept, before: s, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


#########
#2  TERM#
#########


##########
#FROM SET#
##########
s  :  '('  %MARK%  s  ')'  s  
 index is: 4, term type: to_deduce, before: '(', after: s
TARGET LIST: 
target index: 2  , change_value: %NULL%
target index: 3  , change_value: %NULL%
target index: 5  , change_value: s

########
#SUBSET#
########
s  :  '('  %MARK%  s  ')'  s  
 index is: 4, term type: to_deduce, before: '(', after: s
TARGET LIST: 
target index: 2  , change_value: %NULL%
target index: 3  , change_value: %NULL%
target index: 5  , change_value: s

s  :  %MARK%  
 index is: 2, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

s  :  %MARK%  '('  s  ')'  s  
 index is: 3, term type: shift, before: %NULL%, after: '('
TARGET LIST: 
target index: 4  , change_value: '('

########
#TO SET#
########
index: 3, target_source: s

index: 2, target_source: '('



#########
#3  TERM#
#########


##########
#FROM SET#
##########
s  :  '('  s  %MARK%  ')'  s  
 index is: 5, term type: shift, before: s, after: ')'
TARGET LIST: 
target index: 6  , change_value: ')'

########
#SUBSET#
########
s  :  '('  s  %MARK%  ')'  s  
 index is: 5, term type: shift, before: s, after: ')'
TARGET LIST: 
target index: 6  , change_value: ')'

########
#TO SET#
########
index: 4, target_source: ')'



#########
#4  TERM#
#########


##########
#FROM SET#
##########
s  :  '('  s  ')'  %MARK%  s  
 index is: 6, term type: to_deduce, before: ')', after: s
TARGET LIST: 
target index: 2  , change_value: %NULL%
target index: 3  , change_value: %NULL%
target index: 7  , change_value: s

########
#SUBSET#
########
s  :  '('  s  ')'  %MARK%  s  
 index is: 6, term type: to_deduce, before: ')', after: s
TARGET LIST: 
target index: 2  , change_value: %NULL%
target index: 3  , change_value: %NULL%
target index: 7  , change_value: s

s  :  %MARK%  
 index is: 2, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

s  :  %MARK%  '('  s  ')'  s  
 index is: 3, term type: shift, before: %NULL%, after: '('
TARGET LIST: 
target index: 4  , change_value: '('

########
#TO SET#
########
index: 5, target_source: s

index: 2, target_source: '('



#########
#5  TERM#
#########


##########
#FROM SET#
##########
s  :  '('  s  ')'  s  %MARK%  
 index is: 7, term type: deduce, before: s, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
s  :  '('  s  ')'  s  %MARK%  
 index is: 7, term type: deduce, before: s, after: %NULL%
TARGET LIST: 

########
#TO SET#
########





########
LOG INFO
########
0  has shift-deduce conflict
s   s shift-deduce(NOT CONFLICT)
2  has shift-deduce conflict
s   s shift-deduce(NOT CONFLICT)
4  has shift-deduce conflict
s   s shift-deduce(NOT CONFLICT)



##########
ERROR INFO
##########



####################
CREATE PREDICT TABLE
####################



##################
SHOW PREDICT TABLE
##################
State 0 : 
	s :  1;
	%END% : s ::=  NULL;
	')' : s ::=  NULL;
	'(' :  2;

State 1 : 
	%END% :  -1;

State 2 : 
	s :  3;
	%END% : s ::=  NULL;
	')' : s ::=  NULL;
	'(' :  2;

State 3 : 
	')' :  4;

State 4 : 
	s :  5;
	%END% : s ::=  NULL;
	')' : s ::=  NULL;
	'(' :  2;

State 5 : 
	%END% : s ::=  '(' s ')' s;
	')' : s ::=  '(' s ')' s;




############
PARSING CODE
############
#########################
Begin Lexical Analysis...
#########################
  Type = id	Data = s	Pos = (0, 0)
  Type = sig	Data = ::=	Pos = (1, 0)
  Type = slit	Data = '('	Pos = (5, 0)
  Type = id	Data = s	Pos = (9, 0)
  Type = slit	Data = ')'	Pos = (11, 0)
  Type = id	Data = s	Pos = (14, 0)
  Type = sig	Data = |	Pos = (16, 0)
  Type = token	Data = NULL	Pos = (18, 0)
  Type = sig	Data = ;	Pos = (22, 0)
###################
SHOW PARSING STACKS
###################
Parsing stack: 
	0 
Input: 
	EOF %END%,sig ;,token NULL,sig |,id s,slit ')',id s,slit '(',sig ::=,id s,
###################
SHOW PARSING STACKS
###################
Parsing stack: 
	0 
Input: 
	EOF %END%,sig ;,token NULL,sig |,id s,slit ')',id s,slit '(',sig ::=,id s,
PARSING ERROR
END PARSING



#########
SHOW TREE
#########
