Compile Time: 0.518s
begin
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "begin"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "stmts"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "ignore"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> repeat_part
            repeat_part -> "{"
            repeat_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "ENDL"
            repeat_part -> "}"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "endline"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "";""
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "stmts"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> repeat_part
            repeat_part -> "{"
            repeat_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "statements"
                term -> part
                  part -> repeat_part
                    repeat_part -> "{"
                    repeat_part -> declaration
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> terminal_symbol
                              terminal_symbol -> "ENDL"
                    repeat_part -> "}"
            repeat_part -> "}"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "decl_stmts"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> repeat_part
            repeat_part -> "{"
            repeat_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "declaration"
                term -> part
                  part -> repeat_part
                    repeat_part -> "{"
                    repeat_part -> declaration
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> terminal_symbol
                              terminal_symbol -> "ENDL"
                    repeat_part -> "}"
            repeat_part -> "}"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "endblock"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "end_stmt"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "else_stmt"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "until_stmt"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "catch_stmt"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "statement"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "prep_stmt"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "package_stmt"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "import_stmt"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "var_stmt"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "block_stmt"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "namespace_stmt"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "using_stmt"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "if_stmt"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "switch_stmt"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "while_stmt"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "loop_stmt"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "for_stmt"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "foreach_stmt"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "control_stmt"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "function_stmt"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "return_stmt"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "try_stmt"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "throw_stmt"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "class_stmt"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "expr_stmt"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "declaration"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "prep_stmt"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "namespace_stmt"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "var_stmt"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "using_stmt"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "function_stmt"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "class_stmt"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "prep_stmt"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "PREP"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "package_stmt"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""package""
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ID"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "endline"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "import_stmt"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""import""
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "import_list"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "endline"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "var_def"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "var_bind"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""=""
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "basic_expr"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "var_list"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "var_stmt"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> declaration_part
            declaration_part -> "("
            declaration_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> ""var""
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> ""link""
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> ""constant""
            declaration_part -> ")"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "var_def"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "endline"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "var_bind"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""(""
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "var_bind_list"
        term -> part
          part -> repeat_part
            repeat_part -> "{"
            repeat_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "",""
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "var_bind_list"
            repeat_part -> "}"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "")""
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "var_bind_list"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ID"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ETC"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "var_bind"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "var_list"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ID"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""=""
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "single_expr"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "",""
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "var_list"
            alternative_part -> "]"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "block_stmt"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""block""
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "stmts"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""end""
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "namespace_stmt"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""namespace""
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ID"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "decl_stmts"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""end""
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "using_stmt"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""using""
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "using_list"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "endline"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "using_list"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "module_list"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "",""
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "using_list"
            alternative_part -> "]"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "if_stmt"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""if""
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "basic_expr"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "stmts"
        term -> part
          part -> repeat_part
            repeat_part -> "{"
            repeat_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "else_stmt"
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "stmts"
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> ""end""
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "ENDL"
            repeat_part -> "}"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "else_stmt"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""else""
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> ""if""
            alternative_part -> "]"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "basic_expr"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "switch_stmt"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""switch""
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "basic_expr"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "switch_stmts"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""end""
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "switch_stmts"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> repeat_part
            repeat_part -> "{"
            repeat_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "switch_case"
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "switch_default"
            repeat_part -> "}"
        term -> part
          part -> repeat_part
            repeat_part -> "{"
            repeat_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "ENDL"
            repeat_part -> "}"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "switch_case"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""case""
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "logic_or_expr"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "stmts"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""end""
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "switch_default"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""default""
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "stmts"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""end""
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "while_stmt"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""while""
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "basic_expr"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "stmts"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""end""
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "loop_stmt"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""loop""
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "stmts"
        term -> part
          part -> declaration_part
            declaration_part -> "("
            declaration_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "until_stmt"
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> ""end""
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "ENDL"
            declaration_part -> ")"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "until_stmt"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""until""
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "basic_expr"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "for_stmt"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""for""
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "var_def"
            alternative_part -> "]"
        term -> part
          part -> declaration_part
            declaration_part -> "("
            declaration_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "";""
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "",""
            declaration_part -> ")"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "basic_expr"
            alternative_part -> "]"
        term -> part
          part -> declaration_part
            declaration_part -> "("
            declaration_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "";""
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "",""
            declaration_part -> ")"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "basic_expr"
            alternative_part -> "]"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "for_body"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "foreach_stmt"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""foreach""
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ID"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""in""
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "basic_expr"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "for_body"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "for_body"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> declaration_part
            declaration_part -> "("
            declaration_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> ""do""
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "basic_expr"
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "endline"
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "ENDL"
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "stmts"
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> ""end""
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "ENDL"
            declaration_part -> ")"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "function_stmt"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""function""
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ID"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""(""
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "argument_list"
            alternative_part -> "]"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "")""
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> ""override""
            alternative_part -> "]"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "function_body"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "function_body"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> declaration_part
            declaration_part -> "("
            declaration_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> ""{""
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "stmts"
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> ""}""
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "ENDL"
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "stmts"
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> ""end""
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "ENDL"
            declaration_part -> ")"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "return_stmt"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""return""
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "expr"
            alternative_part -> "]"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "endline"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "try_stmt"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""try""
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "stmts"
        term -> part
          part -> repeat_part
            repeat_part -> "{"
            repeat_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "catch_stmt"
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "stmts"
            repeat_part -> "}"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""end""
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "catch_stmt"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""catch""
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ID"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "":""
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "visit_expr"
            alternative_part -> "]"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "throw_stmt"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""throw""
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "expr"
            alternative_part -> "]"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "endline"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "class_stmt"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> declaration_part
            declaration_part -> "("
            declaration_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> ""class""
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> ""struct""
            declaration_part -> ")"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ID"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> ""extends""
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "visit_expr"
            alternative_part -> "]"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "decl_stmts"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""end""
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "control_stmt"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> declaration_part
            declaration_part -> "("
            declaration_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> ""break""
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> ""continue""
            declaration_part -> ")"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "endline"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "expr_stmt"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "expr"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "endline"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "end_stmt"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""end""
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "expr"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "single_expr"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "",""
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "expr"
            alternative_part -> "]"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "single_expr"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "lambda_expr"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "basic_expr"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "basic_expr"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "var_bind"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""=""
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "cond_expr"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "cond_expr"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "asi_op"
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "single_expr"
            alternative_part -> "]"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "asi_op"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""=""
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "":=""
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""+=""
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""-=""
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""*=""
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""/=""
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""%=""
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""^=""
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "lambda_expr"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""[""
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "capture_list"
            alternative_part -> "]"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""]""
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""(""
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "argument_list"
            alternative_part -> "]"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "")""
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "lambda_body"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "capture_list"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> ""=""
            alternative_part -> "]"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ID"
        term -> part
          part -> repeat_part
            repeat_part -> "{"
            repeat_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "",""
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "capture_list"
            repeat_part -> "}"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "argument_list"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ETC"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ID"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> ""=""
            alternative_part -> "]"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ID"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "":""
            alternative_part -> "]"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "visit_expr"
        term -> part
          part -> repeat_part
            repeat_part -> "{"
            repeat_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "",""
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "argument_list"
            repeat_part -> "}"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "lambda_body"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""{""
        term -> part
          part -> repeat_part
            repeat_part -> "{"
            repeat_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "statement"
                term -> part
                  part -> repeat_part
                    repeat_part -> "{"
                    repeat_part -> declaration
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> terminal_symbol
                              terminal_symbol -> "ENDL"
                    repeat_part -> "}"
            repeat_part -> "}"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""}""
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""->""
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "cond_expr"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "cond_expr"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "logic_expr"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "cond_postfix"
            alternative_part -> "]"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "cond_postfix"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""?""
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "logic_or_expr"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "":""
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "cond_expr"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "":""
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "logic_or_expr"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "logic_or_expr"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "logic_and_expr"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> ""||""
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> ""or""
            alternative_part -> "]"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "logic_or_expr"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "logic_and_expr"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "equal_expr"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> ""&&""
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> ""and""
            alternative_part -> "]"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "logic_and_expr"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "equal_expr"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "relat_expr"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> declaration_part
                    declaration_part -> "("
                    declaration_part -> declaration
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> terminal_symbol
                              terminal_symbol -> ""==""
                      declaration -> "|"
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> terminal_symbol
                              terminal_symbol -> ""!=""
                    declaration_part -> ")"
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "equal_expr"
            alternative_part -> "]"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "relat_expr"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "add_expr"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> declaration_part
                    declaration_part -> "("
                    declaration_part -> declaration
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> terminal_symbol
                              terminal_symbol -> "">""
                      declaration -> "|"
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> terminal_symbol
                              terminal_symbol -> ""<""
                      declaration -> "|"
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> terminal_symbol
                              terminal_symbol -> "">=""
                      declaration -> "|"
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> terminal_symbol
                              terminal_symbol -> ""<=""
                    declaration_part -> ")"
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "relat_expr"
            alternative_part -> "]"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "add_expr"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "mul_expr"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> declaration_part
                    declaration_part -> "("
                    declaration_part -> declaration
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> terminal_symbol
                              terminal_symbol -> ""+""
                      declaration -> "|"
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> terminal_symbol
                              terminal_symbol -> ""-""
                    declaration_part -> ")"
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "add_expr"
            alternative_part -> "]"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "mul_expr"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "unary_expr"
        term -> part
          part -> declaration_part
            declaration_part -> "("
            declaration_part -> declaration
              declaration -> term
                term -> part
                  part -> alternative_part
                    alternative_part -> "["
                    alternative_part -> declaration
                      declaration -> term
                        term -> part
                          part -> declaration_part
                            declaration_part -> "("
                            declaration_part -> declaration
                              declaration -> term
                                term -> part
                                  part -> simple_part
                                    simple_part -> terminal_symbol
                                      terminal_symbol -> ""/""
                              declaration -> "|"
                              declaration -> term
                                term -> part
                                  part -> simple_part
                                    simple_part -> terminal_symbol
                                      terminal_symbol -> ""%""
                              declaration -> "|"
                              declaration -> term
                                term -> part
                                  part -> simple_part
                                    simple_part -> terminal_symbol
                                      terminal_symbol -> ""^""
                            declaration_part -> ")"
                        term -> part
                          part -> simple_part
                            simple_part -> right_non_terminal_symbol
                              right_non_terminal_symbol -> non_terminal_symbol
                                non_terminal_symbol -> "mul_expr"
                    alternative_part -> "]"
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "ENDL"
            declaration_part -> ")"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "unary_expr"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> declaration_part
            declaration_part -> "("
            declaration_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "unary_op"
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "unary_expr"
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> declaration_part
                    declaration_part -> "("
                    declaration_part -> declaration
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> terminal_symbol
                              terminal_symbol -> ""new""
                      declaration -> "|"
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> terminal_symbol
                              terminal_symbol -> ""gcnew""
                    declaration_part -> ")"
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "unary_expr"
                term -> part
                  part -> alternative_part
                    alternative_part -> "["
                    alternative_part -> declaration
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> right_non_terminal_symbol
                              right_non_terminal_symbol -> non_terminal_symbol
                                non_terminal_symbol -> "array"
                    alternative_part -> "]"
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "prim_expr"
                term -> part
                  part -> declaration_part
                    declaration_part -> "("
                    declaration_part -> declaration
                      declaration -> term
                        term -> part
                          part -> alternative_part
                            alternative_part -> "["
                            alternative_part -> declaration
                              declaration -> term
                                term -> part
                                  part -> simple_part
                                    simple_part -> right_non_terminal_symbol
                                      right_non_terminal_symbol -> non_terminal_symbol
                                        non_terminal_symbol -> "postifx"
                            alternative_part -> "]"
                      declaration -> "|"
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> terminal_symbol
                              terminal_symbol -> "ENDL"
                    declaration_part -> ")"
            declaration_part -> ")"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "unary_op"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""typeid""
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""++""
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""--""
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""*""
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""&""
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""-""
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""!""
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "postfix_expr"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "visit_expr"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "constant"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "visit_expr"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "object"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> ""->""
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "".""
            alternative_part -> "]"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "visit_expr"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "object"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> declaration_part
            declaration_part -> "("
            declaration_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "array"
                term -> part
                  part -> alternative_part
                    alternative_part -> "["
                    alternative_part -> declaration
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> right_non_terminal_symbol
                              right_non_terminal_symbol -> non_terminal_symbol
                                non_terminal_symbol -> "index"
                    alternative_part -> "]"
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "str"
                term -> part
                  part -> alternative_part
                    alternative_part -> "["
                    alternative_part -> declaration
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> right_non_terminal_symbol
                              right_non_terminal_symbol -> non_terminal_symbol
                                non_terminal_symbol -> "index"
                    alternative_part -> "]"
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> ""local""
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> ""global""
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "element"
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "CHAR"
            declaration_part -> ")"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "element"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> declaration_part
            declaration_part -> "("
            declaration_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "ID"
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> ""(""
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "single_expr"
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "")""
            declaration_part -> ")"
        term -> part
          part -> declaration_part
            declaration_part -> "("
            declaration_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "ENDL"
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> repeat_part
                    repeat_part -> "{"
                    repeat_part -> declaration
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> right_non_terminal_symbol
                              right_non_terminal_symbol -> non_terminal_symbol
                                non_terminal_symbol -> "fcall"
                      declaration -> "|"
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> right_non_terminal_symbol
                              right_non_terminal_symbol -> non_terminal_symbol
                                non_terminal_symbol -> "index"
                    repeat_part -> "}"
            declaration_part -> ")"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "constant"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "NUM"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""null""
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""true""
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""false""
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "array"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""{""
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "expr"
            alternative_part -> "]"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""}""
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "fcall"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""(""
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "expr"
            alternative_part -> "]"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "")""
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "index"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""[""
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "basic_expr"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> ""]""
    statement -> end_op
      end_op -> ";"



#########
show list
#########



######################
show origin terms info
######################
begin ::= stmts 
ignore ::= ignore_rep_1 
ignore_rep_1 ::= NULL 
ignore_rep_1 ::= ENDL ignore_rep_1 
endline ::= ";" 
endline ::= ENDL 
stmts ::= stmts_rep_1 
stmts_rep_1 ::= NULL 
stmts_rep_1 ::= statements stmts_rep_1_rep_2 stmts_rep_1 
stmts_rep_1_rep_2 ::= NULL 
stmts_rep_1_rep_2 ::= ENDL stmts_rep_1_rep_2 
decl_stmts ::= decl_stmts_rep_1 
decl_stmts_rep_1 ::= NULL 
decl_stmts_rep_1 ::= declaration decl_stmts_rep_1_rep_2 decl_stmts_rep_1 
decl_stmts_rep_1_rep_2 ::= NULL 
decl_stmts_rep_1_rep_2 ::= ENDL decl_stmts_rep_1_rep_2 
endblock ::= catch_stmt 
endblock ::= until_stmt 
endblock ::= else_stmt 
endblock ::= end_stmt 
statement ::= expr_stmt 
statement ::= class_stmt 
statement ::= throw_stmt 
statement ::= try_stmt 
statement ::= return_stmt 
statement ::= function_stmt 
statement ::= control_stmt 
statement ::= foreach_stmt 
statement ::= for_stmt 
statement ::= loop_stmt 
statement ::= while_stmt 
statement ::= switch_stmt 
statement ::= if_stmt 
statement ::= using_stmt 
statement ::= namespace_stmt 
statement ::= block_stmt 
statement ::= var_stmt 
statement ::= import_stmt 
statement ::= package_stmt 
statement ::= prep_stmt 
declaration ::= class_stmt 
declaration ::= function_stmt 
declaration ::= using_stmt 
declaration ::= var_stmt 
declaration ::= namespace_stmt 
declaration ::= prep_stmt 
prep_stmt ::= PREP ENDL 
package_stmt ::= "package" ID endline 
import_stmt ::= "import" import_list endline 
var_def ::= var_list 
var_def ::= var_bind "=" basic_expr 
var_stmt ::= var_stmt_decl_1 var_def endline 
var_stmt_decl_1 ::= "constant" 
var_stmt_decl_1 ::= "link" 
var_stmt_decl_1 ::= "var" 
var_bind ::= "(" var_bind_list var_bind_rep_3 ")" 
var_bind_rep_3 ::= NULL 
var_bind_rep_3 ::= "," var_bind_list var_bind_rep_3 
var_bind_list ::= var_bind 
var_bind_list ::= ETC 
var_bind_list ::= ID 
var_list ::= ID "=" single_expr var_list_opt_4 
var_list_opt_4 ::= NULL 
var_list_opt_4 ::= "," var_list 
block_stmt ::= "block" ENDL stmts "end" ENDL 
namespace_stmt ::= "namespace" ID ENDL decl_stmts "end" ENDL 
using_stmt ::= "using" using_list endline 
using_list ::= module_list using_list_opt_2 
using_list_opt_2 ::= NULL 
using_list_opt_2 ::= "," using_list 
if_stmt ::= "if" basic_expr ENDL stmts if_stmt_rep_5 
if_stmt_rep_5 ::= NULL 
if_stmt_rep_5 ::= else_stmt stmts "end" ENDL if_stmt_rep_5 
else_stmt ::= "else" else_stmt_opt_2 ENDL basic_expr ENDL 
else_stmt_opt_2 ::= NULL 
else_stmt_opt_2 ::= "if" 
switch_stmt ::= "switch" basic_expr ENDL switch_stmts "end" ENDL 
switch_stmts ::= switch_stmts_rep_1 switch_stmts_rep_2 
switch_stmts_rep_2 ::= NULL 
switch_stmts_rep_2 ::= ENDL switch_stmts_rep_2 
switch_stmts_rep_1 ::= NULL 
switch_stmts_rep_1 ::= switch_default switch_stmts_rep_1 
switch_stmts_rep_1 ::= switch_case switch_stmts_rep_1 
switch_case ::= "case" logic_or_expr ENDL stmts "end" ENDL 
switch_default ::= "default" ENDL stmts "end" ENDL 
while_stmt ::= "while" basic_expr ENDL stmts "end" ENDL 
loop_stmt ::= "loop" ENDL stmts loop_stmt_decl_4 
loop_stmt_decl_4 ::= ENDL 
loop_stmt_decl_4 ::= "end" 
loop_stmt_decl_4 ::= until_stmt 
until_stmt ::= "until" basic_expr ENDL 
for_stmt ::= "for" for_stmt_opt_2 for_stmt_decl_3 for_stmt_opt_4 for_stmt_decl_5 for_stmt_opt_6 for_body 
for_stmt_opt_6 ::= NULL 
for_stmt_opt_6 ::= basic_expr 
for_stmt_decl_5 ::= "," 
for_stmt_decl_5 ::= ";" 
for_stmt_opt_4 ::= NULL 
for_stmt_opt_4 ::= basic_expr 
for_stmt_decl_3 ::= "," 
for_stmt_decl_3 ::= ";" 
for_stmt_opt_2 ::= NULL 
for_stmt_opt_2 ::= var_def 
foreach_stmt ::= "foreach" ID "in" basic_expr for_body 
for_body ::= for_body_decl_1 
for_body_decl_1 ::= ENDL stmts "end" ENDL 
for_body_decl_1 ::= "do" basic_expr endline 
function_stmt ::= "function" ID "(" function_stmt_opt_4 ")" function_stmt_opt_6 function_body 
function_stmt_opt_6 ::= NULL 
function_stmt_opt_6 ::= "override" 
function_stmt_opt_4 ::= NULL 
function_stmt_opt_4 ::= argument_list 
function_body ::= function_body_decl_1 
function_body_decl_1 ::= ENDL stmts "end" ENDL 
function_body_decl_1 ::= "{" stmts "}" 
return_stmt ::= "return" return_stmt_opt_2 endline 
return_stmt_opt_2 ::= NULL 
return_stmt_opt_2 ::= expr 
try_stmt ::= "try" ENDL stmts try_stmt_rep_4 "end" ENDL 
try_stmt_rep_4 ::= NULL 
try_stmt_rep_4 ::= catch_stmt stmts try_stmt_rep_4 
catch_stmt ::= "catch" ID catch_stmt_opt_3 ENDL 
catch_stmt_opt_3 ::= NULL 
catch_stmt_opt_3 ::= ":" visit_expr 
throw_stmt ::= "throw" throw_stmt_opt_2 endline 
throw_stmt_opt_2 ::= NULL 
throw_stmt_opt_2 ::= expr 
class_stmt ::= class_stmt_decl_1 ID class_stmt_opt_3 ENDL decl_stmts "end" ENDL 
class_stmt_opt_3 ::= NULL 
class_stmt_opt_3 ::= "extends" visit_expr 
class_stmt_decl_1 ::= "struct" 
class_stmt_decl_1 ::= "class" 
control_stmt ::= control_stmt_decl_1 endline 
control_stmt_decl_1 ::= "continue" 
control_stmt_decl_1 ::= "break" 
expr_stmt ::= expr endline 
end_stmt ::= "end" ENDL 
expr ::= single_expr expr_opt_2 
expr_opt_2 ::= NULL 
expr_opt_2 ::= "," expr 
single_expr ::= basic_expr 
single_expr ::= lambda_expr 
basic_expr ::= cond_expr basic_expr_opt_2 
basic_expr ::= var_bind "=" cond_expr 
basic_expr_opt_2 ::= NULL 
basic_expr_opt_2 ::= asi_op single_expr 
asi_op ::= "^=" 
asi_op ::= "%=" 
asi_op ::= "/=" 
asi_op ::= "*=" 
asi_op ::= "-=" 
asi_op ::= "+=" 
asi_op ::= ":=" 
asi_op ::= "=" 
lambda_expr ::= "[" lambda_expr_opt_2 "]" "(" lambda_expr_opt_5 ")" lambda_body 
lambda_expr_opt_5 ::= NULL 
lambda_expr_opt_5 ::= argument_list 
lambda_expr_opt_2 ::= NULL 
lambda_expr_opt_2 ::= capture_list 
capture_list ::= capture_list_opt_1 ID capture_list_rep_3 
capture_list_rep_3 ::= NULL 
capture_list_rep_3 ::= "," capture_list capture_list_rep_3 
capture_list_opt_1 ::= NULL 
capture_list_opt_1 ::= "=" 
argument_list ::= argument_list_opt_1 ID argument_list_opt_3 visit_expr argument_list_rep_5 
argument_list ::= ETC ID 
argument_list_rep_5 ::= NULL 
argument_list_rep_5 ::= "," argument_list argument_list_rep_5 
argument_list_opt_3 ::= NULL 
argument_list_opt_3 ::= ":" 
argument_list_opt_1 ::= NULL 
argument_list_opt_1 ::= "=" 
lambda_body ::= "->" cond_expr 
lambda_body ::= "{" lambda_body_rep_2 "}" 
lambda_body_rep_2 ::= NULL 
lambda_body_rep_2 ::= statement lambda_body_rep_2_rep_2 lambda_body_rep_2 
lambda_body_rep_2_rep_2 ::= NULL 
lambda_body_rep_2_rep_2 ::= ENDL lambda_body_rep_2_rep_2 
cond_expr ::= logic_expr cond_expr_opt_2 
cond_expr_opt_2 ::= NULL 
cond_expr_opt_2 ::= cond_postfix 
cond_postfix ::= ":" logic_or_expr 
cond_postfix ::= "?" logic_or_expr ":" cond_expr 
logic_or_expr ::= logic_and_expr logic_or_expr_opt_2 logic_or_expr 
logic_or_expr_opt_2 ::= NULL 
logic_or_expr_opt_2 ::= "or" 
logic_or_expr_opt_2 ::= "||" 
logic_and_expr ::= equal_expr logic_and_expr_opt_2 logic_and_expr 
logic_and_expr_opt_2 ::= NULL 
logic_and_expr_opt_2 ::= "and" 
logic_and_expr_opt_2 ::= "&&" 
equal_expr ::= relat_expr equal_expr_opt_2 
equal_expr_opt_2 ::= NULL 
equal_expr_opt_2 ::= equal_expr_opt_2_decl_1 equal_expr 
equal_expr_opt_2_decl_1 ::= "!=" 
equal_expr_opt_2_decl_1 ::= "==" 
relat_expr ::= add_expr relat_expr_opt_2 
relat_expr_opt_2 ::= NULL 
relat_expr_opt_2 ::= relat_expr_opt_2_decl_1 relat_expr 
relat_expr_opt_2_decl_1 ::= "<=" 
relat_expr_opt_2_decl_1 ::= ">=" 
relat_expr_opt_2_decl_1 ::= "<" 
relat_expr_opt_2_decl_1 ::= ">" 
add_expr ::= mul_expr add_expr_opt_2 
add_expr_opt_2 ::= NULL 
add_expr_opt_2 ::= add_expr_opt_2_decl_1 add_expr 
add_expr_opt_2_decl_1 ::= "-" 
add_expr_opt_2_decl_1 ::= "+" 
mul_expr ::= unary_expr mul_expr_decl_2 
mul_expr_decl_2 ::= ENDL 
mul_expr_decl_2 ::= mul_expr_decl_2_opt_1 
mul_expr_decl_2_opt_1 ::= NULL 
mul_expr_decl_2_opt_1 ::= mul_expr_decl_2_opt_1_decl_1 mul_expr 
mul_expr_decl_2_opt_1_decl_1 ::= "^" 
mul_expr_decl_2_opt_1_decl_1 ::= "%" 
mul_expr_decl_2_opt_1_decl_1 ::= "/" 
unary_expr ::= unary_expr_decl_1 
unary_expr_decl_1 ::= prim_expr unary_expr_decl_1_decl_2 
unary_expr_decl_1 ::= unary_expr_decl_1_decl_1 unary_expr unary_expr_decl_1_opt_3 
unary_expr_decl_1 ::= unary_op unary_expr 
unary_expr_decl_1_decl_2 ::= ENDL 
unary_expr_decl_1_decl_2 ::= unary_expr_decl_1_decl_2_opt_1 
unary_expr_decl_1_decl_2_opt_1 ::= NULL 
unary_expr_decl_1_decl_2_opt_1 ::= postifx 
unary_expr_decl_1_opt_3 ::= NULL 
unary_expr_decl_1_opt_3 ::= array 
unary_expr_decl_1_decl_1 ::= "gcnew" 
unary_expr_decl_1_decl_1 ::= "new" 
unary_op ::= "!" 
unary_op ::= "-" 
unary_op ::= "&" 
unary_op ::= "*" 
unary_op ::= "--" 
unary_op ::= "++" 
unary_op ::= "typeid" 
postfix_expr ::= constant 
postfix_expr ::= visit_expr 
visit_expr ::= object visit_expr_opt_2 visit_expr 
visit_expr_opt_2 ::= NULL 
visit_expr_opt_2 ::= "." 
visit_expr_opt_2 ::= "->" 
object ::= object_decl_1 
object_decl_1 ::= CHAR 
object_decl_1 ::= element 
object_decl_1 ::= "global" 
object_decl_1 ::= "local" 
object_decl_1 ::= str object_decl_1_opt_2 
object_decl_1 ::= array object_decl_1_opt_2 
object_decl_1_opt_2 ::= NULL 
object_decl_1_opt_2 ::= index 
object_decl_1_opt_2 ::= NULL 
object_decl_1_opt_2 ::= index 
element ::= element_decl_1 element_decl_2 
element_decl_2 ::= element_decl_2_rep_1 
element_decl_2 ::= ENDL 
element_decl_2_rep_1 ::= NULL 
element_decl_2_rep_1 ::= index element_decl_2_rep_1 
element_decl_2_rep_1 ::= fcall element_decl_2_rep_1 
element_decl_1 ::= "(" single_expr ")" 
element_decl_1 ::= ID 
constant ::= "false" 
constant ::= "true" 
constant ::= "null" 
constant ::= NUM 
array ::= "{" array_opt_2 "}" 
array_opt_2 ::= NULL 
array_opt_2 ::= expr 
fcall ::= "(" fcall_opt_2 ")" 
fcall_opt_2 ::= NULL 
fcall_opt_2 ::= expr 
index ::= "[" basic_expr "]" 



##############################
show info after add start node
##############################
%start% ::= begin 
begin ::= stmts 
ignore ::= ignore_rep_1 
ignore_rep_1 ::= NULL 
ignore_rep_1 ::= ENDL ignore_rep_1 
endline ::= ";" 
endline ::= ENDL 
stmts ::= stmts_rep_1 
stmts_rep_1 ::= NULL 
stmts_rep_1 ::= statements stmts_rep_1_rep_2 stmts_rep_1 
stmts_rep_1_rep_2 ::= NULL 
stmts_rep_1_rep_2 ::= ENDL stmts_rep_1_rep_2 
decl_stmts ::= decl_stmts_rep_1 
decl_stmts_rep_1 ::= NULL 
decl_stmts_rep_1 ::= declaration decl_stmts_rep_1_rep_2 decl_stmts_rep_1 
decl_stmts_rep_1_rep_2 ::= NULL 
decl_stmts_rep_1_rep_2 ::= ENDL decl_stmts_rep_1_rep_2 
endblock ::= catch_stmt 
endblock ::= until_stmt 
endblock ::= else_stmt 
endblock ::= end_stmt 
statement ::= expr_stmt 
statement ::= class_stmt 
statement ::= throw_stmt 
statement ::= try_stmt 
statement ::= return_stmt 
statement ::= function_stmt 
statement ::= control_stmt 
statement ::= foreach_stmt 
statement ::= for_stmt 
statement ::= loop_stmt 
statement ::= while_stmt 
statement ::= switch_stmt 
statement ::= if_stmt 
statement ::= using_stmt 
statement ::= namespace_stmt 
statement ::= block_stmt 
statement ::= var_stmt 
statement ::= import_stmt 
statement ::= package_stmt 
statement ::= prep_stmt 
declaration ::= class_stmt 
declaration ::= function_stmt 
declaration ::= using_stmt 
declaration ::= var_stmt 
declaration ::= namespace_stmt 
declaration ::= prep_stmt 
prep_stmt ::= PREP ENDL 
package_stmt ::= "package" ID endline 
import_stmt ::= "import" import_list endline 
var_def ::= var_list 
var_def ::= var_bind "=" basic_expr 
var_stmt ::= var_stmt_decl_1 var_def endline 
var_stmt_decl_1 ::= "constant" 
var_stmt_decl_1 ::= "link" 
var_stmt_decl_1 ::= "var" 
var_bind ::= "(" var_bind_list var_bind_rep_3 ")" 
var_bind_rep_3 ::= NULL 
var_bind_rep_3 ::= "," var_bind_list var_bind_rep_3 
var_bind_list ::= var_bind 
var_bind_list ::= ETC 
var_bind_list ::= ID 
var_list ::= ID "=" single_expr var_list_opt_4 
var_list_opt_4 ::= NULL 
var_list_opt_4 ::= "," var_list 
block_stmt ::= "block" ENDL stmts "end" ENDL 
namespace_stmt ::= "namespace" ID ENDL decl_stmts "end" ENDL 
using_stmt ::= "using" using_list endline 
using_list ::= module_list using_list_opt_2 
using_list_opt_2 ::= NULL 
using_list_opt_2 ::= "," using_list 
if_stmt ::= "if" basic_expr ENDL stmts if_stmt_rep_5 
if_stmt_rep_5 ::= NULL 
if_stmt_rep_5 ::= else_stmt stmts "end" ENDL if_stmt_rep_5 
else_stmt ::= "else" else_stmt_opt_2 ENDL basic_expr ENDL 
else_stmt_opt_2 ::= NULL 
else_stmt_opt_2 ::= "if" 
switch_stmt ::= "switch" basic_expr ENDL switch_stmts "end" ENDL 
switch_stmts ::= switch_stmts_rep_1 switch_stmts_rep_2 
switch_stmts_rep_2 ::= NULL 
switch_stmts_rep_2 ::= ENDL switch_stmts_rep_2 
switch_stmts_rep_1 ::= NULL 
switch_stmts_rep_1 ::= switch_default switch_stmts_rep_1 
switch_stmts_rep_1 ::= switch_case switch_stmts_rep_1 
switch_case ::= "case" logic_or_expr ENDL stmts "end" ENDL 
switch_default ::= "default" ENDL stmts "end" ENDL 
while_stmt ::= "while" basic_expr ENDL stmts "end" ENDL 
loop_stmt ::= "loop" ENDL stmts loop_stmt_decl_4 
loop_stmt_decl_4 ::= ENDL 
loop_stmt_decl_4 ::= "end" 
loop_stmt_decl_4 ::= until_stmt 
until_stmt ::= "until" basic_expr ENDL 
for_stmt ::= "for" for_stmt_opt_2 for_stmt_decl_3 for_stmt_opt_4 for_stmt_decl_5 for_stmt_opt_6 for_body 
for_stmt_opt_6 ::= NULL 
for_stmt_opt_6 ::= basic_expr 
for_stmt_decl_5 ::= "," 
for_stmt_decl_5 ::= ";" 
for_stmt_opt_4 ::= NULL 
for_stmt_opt_4 ::= basic_expr 
for_stmt_decl_3 ::= "," 
for_stmt_decl_3 ::= ";" 
for_stmt_opt_2 ::= NULL 
for_stmt_opt_2 ::= var_def 
foreach_stmt ::= "foreach" ID "in" basic_expr for_body 
for_body ::= for_body_decl_1 
for_body_decl_1 ::= ENDL stmts "end" ENDL 
for_body_decl_1 ::= "do" basic_expr endline 
function_stmt ::= "function" ID "(" function_stmt_opt_4 ")" function_stmt_opt_6 function_body 
function_stmt_opt_6 ::= NULL 
function_stmt_opt_6 ::= "override" 
function_stmt_opt_4 ::= NULL 
function_stmt_opt_4 ::= argument_list 
function_body ::= function_body_decl_1 
function_body_decl_1 ::= ENDL stmts "end" ENDL 
function_body_decl_1 ::= "{" stmts "}" 
return_stmt ::= "return" return_stmt_opt_2 endline 
return_stmt_opt_2 ::= NULL 
return_stmt_opt_2 ::= expr 
try_stmt ::= "try" ENDL stmts try_stmt_rep_4 "end" ENDL 
try_stmt_rep_4 ::= NULL 
try_stmt_rep_4 ::= catch_stmt stmts try_stmt_rep_4 
catch_stmt ::= "catch" ID catch_stmt_opt_3 ENDL 
catch_stmt_opt_3 ::= NULL 
catch_stmt_opt_3 ::= ":" visit_expr 
throw_stmt ::= "throw" throw_stmt_opt_2 endline 
throw_stmt_opt_2 ::= NULL 
throw_stmt_opt_2 ::= expr 
class_stmt ::= class_stmt_decl_1 ID class_stmt_opt_3 ENDL decl_stmts "end" ENDL 
class_stmt_opt_3 ::= NULL 
class_stmt_opt_3 ::= "extends" visit_expr 
class_stmt_decl_1 ::= "struct" 
class_stmt_decl_1 ::= "class" 
control_stmt ::= control_stmt_decl_1 endline 
control_stmt_decl_1 ::= "continue" 
control_stmt_decl_1 ::= "break" 
expr_stmt ::= expr endline 
end_stmt ::= "end" ENDL 
expr ::= single_expr expr_opt_2 
expr_opt_2 ::= NULL 
expr_opt_2 ::= "," expr 
single_expr ::= basic_expr 
single_expr ::= lambda_expr 
basic_expr ::= cond_expr basic_expr_opt_2 
basic_expr ::= var_bind "=" cond_expr 
basic_expr_opt_2 ::= NULL 
basic_expr_opt_2 ::= asi_op single_expr 
asi_op ::= "^=" 
asi_op ::= "%=" 
asi_op ::= "/=" 
asi_op ::= "*=" 
asi_op ::= "-=" 
asi_op ::= "+=" 
asi_op ::= ":=" 
asi_op ::= "=" 
lambda_expr ::= "[" lambda_expr_opt_2 "]" "(" lambda_expr_opt_5 ")" lambda_body 
lambda_expr_opt_5 ::= NULL 
lambda_expr_opt_5 ::= argument_list 
lambda_expr_opt_2 ::= NULL 
lambda_expr_opt_2 ::= capture_list 
capture_list ::= capture_list_opt_1 ID capture_list_rep_3 
capture_list_rep_3 ::= NULL 
capture_list_rep_3 ::= "," capture_list capture_list_rep_3 
capture_list_opt_1 ::= NULL 
capture_list_opt_1 ::= "=" 
argument_list ::= argument_list_opt_1 ID argument_list_opt_3 visit_expr argument_list_rep_5 
argument_list ::= ETC ID 
argument_list_rep_5 ::= NULL 
argument_list_rep_5 ::= "," argument_list argument_list_rep_5 
argument_list_opt_3 ::= NULL 
argument_list_opt_3 ::= ":" 
argument_list_opt_1 ::= NULL 
argument_list_opt_1 ::= "=" 
lambda_body ::= "->" cond_expr 
lambda_body ::= "{" lambda_body_rep_2 "}" 
lambda_body_rep_2 ::= NULL 
lambda_body_rep_2 ::= statement lambda_body_rep_2_rep_2 lambda_body_rep_2 
lambda_body_rep_2_rep_2 ::= NULL 
lambda_body_rep_2_rep_2 ::= ENDL lambda_body_rep_2_rep_2 
cond_expr ::= logic_expr cond_expr_opt_2 
cond_expr_opt_2 ::= NULL 
cond_expr_opt_2 ::= cond_postfix 
cond_postfix ::= ":" logic_or_expr 
cond_postfix ::= "?" logic_or_expr ":" cond_expr 
logic_or_expr ::= logic_and_expr logic_or_expr_opt_2 logic_or_expr 
logic_or_expr_opt_2 ::= NULL 
logic_or_expr_opt_2 ::= "or" 
logic_or_expr_opt_2 ::= "||" 
logic_and_expr ::= equal_expr logic_and_expr_opt_2 logic_and_expr 
logic_and_expr_opt_2 ::= NULL 
logic_and_expr_opt_2 ::= "and" 
logic_and_expr_opt_2 ::= "&&" 
equal_expr ::= relat_expr equal_expr_opt_2 
equal_expr_opt_2 ::= NULL 
equal_expr_opt_2 ::= equal_expr_opt_2_decl_1 equal_expr 
equal_expr_opt_2_decl_1 ::= "!=" 
equal_expr_opt_2_decl_1 ::= "==" 
relat_expr ::= add_expr relat_expr_opt_2 
relat_expr_opt_2 ::= NULL 
relat_expr_opt_2 ::= relat_expr_opt_2_decl_1 relat_expr 
relat_expr_opt_2_decl_1 ::= "<=" 
relat_expr_opt_2_decl_1 ::= ">=" 
relat_expr_opt_2_decl_1 ::= "<" 
relat_expr_opt_2_decl_1 ::= ">" 
add_expr ::= mul_expr add_expr_opt_2 
add_expr_opt_2 ::= NULL 
add_expr_opt_2 ::= add_expr_opt_2_decl_1 add_expr 
add_expr_opt_2_decl_1 ::= "-" 
add_expr_opt_2_decl_1 ::= "+" 
mul_expr ::= unary_expr mul_expr_decl_2 
mul_expr_decl_2 ::= ENDL 
mul_expr_decl_2 ::= mul_expr_decl_2_opt_1 
mul_expr_decl_2_opt_1 ::= NULL 
mul_expr_decl_2_opt_1 ::= mul_expr_decl_2_opt_1_decl_1 mul_expr 
mul_expr_decl_2_opt_1_decl_1 ::= "^" 
mul_expr_decl_2_opt_1_decl_1 ::= "%" 
mul_expr_decl_2_opt_1_decl_1 ::= "/" 
unary_expr ::= unary_expr_decl_1 
unary_expr_decl_1 ::= prim_expr unary_expr_decl_1_decl_2 
unary_expr_decl_1 ::= unary_expr_decl_1_decl_1 unary_expr unary_expr_decl_1_opt_3 
unary_expr_decl_1 ::= unary_op unary_expr 
unary_expr_decl_1_decl_2 ::= ENDL 
unary_expr_decl_1_decl_2 ::= unary_expr_decl_1_decl_2_opt_1 
unary_expr_decl_1_decl_2_opt_1 ::= NULL 
unary_expr_decl_1_decl_2_opt_1 ::= postifx 
unary_expr_decl_1_opt_3 ::= NULL 
unary_expr_decl_1_opt_3 ::= array 
unary_expr_decl_1_decl_1 ::= "gcnew" 
unary_expr_decl_1_decl_1 ::= "new" 
unary_op ::= "!" 
unary_op ::= "-" 
unary_op ::= "&" 
unary_op ::= "*" 
unary_op ::= "--" 
unary_op ::= "++" 
unary_op ::= "typeid" 
postfix_expr ::= constant 
postfix_expr ::= visit_expr 
visit_expr ::= object visit_expr_opt_2 visit_expr 
visit_expr_opt_2 ::= NULL 
visit_expr_opt_2 ::= "." 
visit_expr_opt_2 ::= "->" 
object ::= object_decl_1 
object_decl_1 ::= CHAR 
object_decl_1 ::= element 
object_decl_1 ::= "global" 
object_decl_1 ::= "local" 
object_decl_1 ::= str object_decl_1_opt_2 
object_decl_1 ::= array object_decl_1_opt_2 
object_decl_1_opt_2 ::= NULL 
object_decl_1_opt_2 ::= index 
object_decl_1_opt_2 ::= NULL 
object_decl_1_opt_2 ::= index 
element ::= element_decl_1 element_decl_2 
element_decl_2 ::= element_decl_2_rep_1 
element_decl_2 ::= ENDL 
element_decl_2_rep_1 ::= NULL 
element_decl_2_rep_1 ::= index element_decl_2_rep_1 
element_decl_2_rep_1 ::= fcall element_decl_2_rep_1 
element_decl_1 ::= "(" single_expr ")" 
element_decl_1 ::= ID 
constant ::= "false" 
constant ::= "true" 
constant ::= "null" 
constant ::= NUM 
array ::= "{" array_opt_2 "}" 
array_opt_2 ::= NULL 
array_opt_2 ::= expr 
fcall ::= "(" fcall_opt_2 ")" 
fcall_opt_2 ::= NULL 
fcall_opt_2 ::= expr 
index ::= "[" basic_expr "]" 



##############
show FIRST SET
##############
TERM  if_stmt_rep_5 : NULL  "else"  

TERM  add_expr_opt_2 : "-"  NULL  "+"  

TERM  declaration : PREP  "var"  "namespace"  "struct"  "link"  "using"  "function"  "constant"  "class"  

TERM  unary_op : "++"  "typeid"  "-"  "--"  "&"  "!"  "*"  

TERM  basic_expr_opt_2 : "="  "-="  NULL  "^="  "/="  "%="  ":="  "+="  "*="  

TERM  else_stmt : "else"  

TERM  block_stmt : "block"  

TERM  stmts : NULL  

TERM  begin : NULL  

TERM  argument_list_opt_1 : "="  NULL  

TERM  statement : PREP  "loop"  "import"  "try"  "var"  "namespace"  "struct"  "block"  "return"  "for"  "function"  "constant"  "("  "while"  "switch"  "foreach"  "break"  "package"  "link"  "using"  "if"  "class"  "throw"  "continue"  "["  

TERM  function_stmt_opt_4 : "="  NULL  ID  ETC  

TERM  using_list_opt_2 : ","  NULL  

TERM  argument_list : ID  ETC  "="  

TERM  visit_expr : CHAR  "local"  "("  "global"  "{"  ID  

TERM  try_stmt : "try"  

TERM  switch_default : "default"  

TERM  function_stmt_opt_6 : "override"  NULL  

TERM  for_stmt_decl_5 : ","  ";"  

TERM  capture_list_opt_1 : "="  NULL  

TERM  mul_expr : "++"  "typeid"  "gcnew"  "&"  "new"  "-"  "*"  "--"  "!"  

TERM  lambda_expr : "["  

TERM  capture_list : ID  "="  

TERM  prep_stmt : PREP  

TERM  lambda_body_rep_2_rep_2 : ENDL  NULL  

TERM  using_stmt : "using"  

TERM  postfix_expr : CHAR  ID  "{"  "true"  "false"  NUM  "null"  "local"  "("  "global"  

TERM  capture_list_rep_3 : ","  NULL  

TERM  fcall_opt_2 : NULL  "["  "("  

TERM  equal_expr : "++"  "gcnew"  "typeid"  "&"  "new"  "-"  "*"  "--"  "!"  

TERM  logic_or_expr : "++"  "gcnew"  "typeid"  "&"  "new"  "-"  "*"  "--"  "!"  

TERM  var_bind : "("  

TERM  var_stmt_decl_1 : "var"  "link"  "constant"  

TERM  return_stmt : "return"  

TERM  function_stmt : "function"  

TERM  argument_list_opt_3 : NULL  ":"  

TERM  index : "["  

TERM  unary_expr_decl_1_decl_2_opt_1 : NULL  

TERM  element_decl_2_rep_1 : NULL  "["  "("  

TERM  class_stmt : "class"  "struct"  

TERM  unary_expr_decl_1_decl_1 : "new"  "gcnew"  

TERM  cond_expr_opt_2 : NULL  "?"  ":"  

TERM  stmts_rep_1_rep_2 : ENDL  NULL  

TERM  control_stmt : "continue"  "break"  

TERM  switch_stmts_rep_2 : ENDL  NULL  

TERM  for_stmt : "for"  

TERM  var_def : ID  "("  

TERM  element : ID  "("  

TERM  loop_stmt_decl_4 : "end"  "until"  ENDL  

TERM  cond_postfix : "?"  ":"  

TERM  import_stmt : "import"  

TERM  switch_stmt : "switch"  

TERM  element_decl_1 : ID  "("  

TERM  for_stmt_decl_3 : ","  ";"  

TERM  logic_or_expr_opt_2 : "||"  NULL  "or"  

TERM  stmts_rep_1 : NULL  

TERM  class_stmt_opt_3 : "extends"  NULL  

TERM  throw_stmt_opt_2 : NULL  "["  "("  

TERM  endline : ENDL  ";"  

TERM  switch_stmts : NULL  ENDL  "default"  "case"  

TERM  object_decl_1 : CHAR  "local"  "("  "global"  "{"  ID  

TERM  foreach_stmt : "foreach"  

TERM  argument_list_rep_5 : ","  NULL  

TERM  mul_expr_decl_2_opt_1_decl_1 : "%"  "/"  "^"  

TERM  add_expr : "++"  "gcnew"  "typeid"  "*"  "new"  "-"  "--"  "&"  "!"  

TERM  relat_expr_opt_2 : "<"  NULL  ">"  "<="  ">="  

TERM  fcall : "("  

TERM  logic_and_expr : "++"  "typeid"  "gcnew"  "*"  "new"  "-"  "--"  "&"  "!"  

TERM  expr_stmt : "["  "("  

TERM  throw_stmt : "throw"  

TERM  basic_expr : "("  

TERM  equal_expr_opt_2_decl_1 : "=="  "!="  

TERM  for_body : ENDL  "do"  

TERM  decl_stmts_rep_1 : PREP  "var"  "namespace"  "struct"  NULL  "link"  "function"  "using"  "class"  "constant"  

TERM  expr : "["  "("  

TERM  var_stmt : "constant"  "link"  "var"  

TERM  endblock : "until"  "catch"  "end"  "else"  

TERM  %start% : NULL  

TERM  mul_expr_decl_2 : NULL  ENDL  "/"  "%"  "^"  

TERM  relat_expr : "++"  "typeid"  "gcnew"  "--"  "new"  "-"  "&"  "*"  "!"  

TERM  constant : NUM  "false"  "null"  "true"  

TERM  try_stmt_rep_4 : NULL  "catch"  

TERM  catch_stmt_opt_3 : NULL  ":"  

TERM  object_decl_1_opt_2 : NULL  "["  

TERM  add_expr_opt_2_decl_1 : "-"  "+"  

TERM  function_body_decl_1 : "{"  ENDL  

TERM  unary_expr_decl_1 : "++"  "typeid"  "gcnew"  "*"  "new"  "-"  "--"  "&"  "!"  

TERM  else_stmt_opt_2 : NULL  "if"  

TERM  return_stmt_opt_2 : NULL  "["  "("  

TERM  for_stmt_opt_2 : ID  NULL  "("  

TERM  unary_expr_decl_1_opt_3 : "{"  NULL  

TERM  package_stmt : "package"  

TERM  for_body_decl_1 : "do"  ENDL  

TERM  array_opt_2 : NULL  "["  "("  

TERM  ignore_rep_1 : ENDL  NULL  

TERM  var_bind_rep_3 : ","  NULL  

TERM  mul_expr_decl_2_opt_1 : NULL  "/"  "^"  "%"  

TERM  for_stmt_opt_6 : NULL  "("  

TERM  function_body : ENDL  "{"  

TERM  equal_expr_opt_2 : "!="  "=="  NULL  

TERM  visit_expr_opt_2 : "->"  NULL  "."  

TERM  while_stmt : "while"  

TERM  lambda_expr_opt_5 : "="  NULL  ID  ETC  

TERM  namespace_stmt : "namespace"  

TERM  if_stmt : "if"  

TERM  var_bind_list : ID  ETC  "("  

TERM  expr_opt_2 : ","  NULL  

TERM  object : CHAR  "local"  "("  "global"  ID  "{"  

TERM  decl_stmts_rep_1_rep_2 : ENDL  NULL  

TERM  catch_stmt : "catch"  

TERM  loop_stmt : "loop"  

TERM  lambda_body : "{"  "->"  

TERM  array : "{"  

TERM  ignore : NULL  ENDL  

TERM  decl_stmts : PREP  "var"  "namespace"  "struct"  NULL  "link"  "using"  "function"  "constant"  "class"  

TERM  asi_op : "="  "-="  "/="  "^="  "%="  ":="  "+="  "*="  

TERM  unary_expr : "++"  "gcnew"  "typeid"  "--"  "new"  "-"  "&"  "*"  "!"  

TERM  lambda_expr_opt_2 : "="  ID  NULL  

TERM  class_stmt_decl_1 : "class"  "struct"  

TERM  for_stmt_opt_4 : NULL  "("  

TERM  lambda_body_rep_2 : PREP  "loop"  "try"  "var"  "import"  "namespace"  "struct"  NULL  "return"  "function"  "("  "for"  "constant"  "while"  "switch"  "block"  "foreach"  "break"  "package"  "link"  "["  "using"  "class"  "throw"  "continue"  "if"  

TERM  switch_stmts_rep_1 : "case"  NULL  "default"  

TERM  until_stmt : "until"  

TERM  switch_case : "case"  

TERM  var_list_opt_4 : ","  NULL  

TERM  unary_expr_decl_1_decl_2 : NULL  ENDL  

TERM  single_expr : "["  "("  

TERM  element_decl_2 : ENDL  NULL  "["  "("  

TERM  var_list : ID  

TERM  relat_expr_opt_2_decl_1 : "<"  ">"  "<="  ">="  

TERM  end_stmt : "end"  

TERM  logic_and_expr_opt_2 : NULL  "and"  "&&"  

TERM  control_stmt_decl_1 : "continue"  "break"  




###############
show FOLLOW SET
###############
TERM  declaration : PREP  ENDL  "var"  "namespace"  "struct"  "link"  "using"  "function"  "end"  "constant"  "class"  

TERM  add_expr_opt_2 : "=="  ">="  "*"  "new"  "!="  "++"  "<"  "and"  "typeid"  ">"  "<="  "gcnew"  "&"  "--"  "-"  "&&"  "!"  

TERM  if_stmt_rep_5 : PREP  "loop"  "try"  "var"  "import"  "namespace"  "struct"  "while"  "return"  "function"  "("  "for"  "constant"  "}"  "switch"  "block"  ENDL  "foreach"  "break"  "package"  "link"  "using"  "["  "class"  "throw"  "if"  "continue"  

TERM  unary_op : "++"  "typeid"  "gcnew"  "&"  "new"  "-"  "*"  "--"  "!"  

TERM  basic_expr_opt_2 : ENDL  ","  ")"  "do"  "}"  "]"  ";"  

TERM  else_stmt : "end"  

TERM  block_stmt : PREP  "loop"  "try"  "var"  "import"  "namespace"  "struct"  "while"  "return"  "function"  "("  "for"  "constant"  "}"  "switch"  "block"  ENDL  "foreach"  "break"  "package"  "continue"  "using"  "if"  "class"  "throw"  "link"  "["  

TERM  stmts : "namespace"  "else"  "return"  "for"  "catch"  "function"  "("  %END%  ENDL  "foreach"  "break"  "if"  "using"  "class"  "block"  "throw"  PREP  "loop"  "import"  "try"  "var"  "struct"  "constant"  "}"  "continue"  "package"  "link"  "until"  "end"  "["  "while"  "switch"  

TERM  begin : %END%  

TERM  argument_list_opt_1 : ID  

TERM  statement : PREP  "loop"  "import"  "try"  "var"  "namespace"  "struct"  "block"  "return"  "for"  "function"  "constant"  "}"  "("  "while"  "switch"  ENDL  "foreach"  "break"  "package"  "continue"  "using"  "link"  "if"  "throw"  "["  "class"  

TERM  function_stmt_opt_4 : ")"  

TERM  using_list_opt_2 : ENDL  ";"  

TERM  argument_list : ","  ")"  

TERM  visit_expr : ENDL  ","  ")"  

TERM  try_stmt : PREP  "loop"  "try"  "var"  "import"  "namespace"  "struct"  "while"  "return"  "function"  "("  "for"  "constant"  "}"  "switch"  "block"  ENDL  "foreach"  "break"  "package"  "continue"  "using"  "if"  "class"  "throw"  "link"  "["  

TERM  switch_default : ENDL  "default"  "end"  "case"  

TERM  function_stmt_opt_6 : "{"  ENDL  

TERM  for_stmt_decl_5 : "do"  ENDL  "("  

TERM  capture_list_opt_1 : ID  

TERM  mul_expr : "=="  ">="  "*"  "new"  "!="  "+"  "++"  "<"  "gcnew"  "typeid"  "and"  ">"  "<="  "--"  "&"  "-"  "&&"  "!"  

TERM  lambda_expr : "do"  ","  ENDL  "]"  ")"  "}"  ";"  

TERM  capture_list : "]"  ","  

TERM  prep_stmt : PREP  "loop"  "try"  "var"  "import"  "namespace"  "struct"  "class"  "return"  "function"  "("  "constant"  "for"  "}"  "end"  "while"  ENDL  "foreach"  "switch"  "break"  "continue"  "package"  "["  "link"  "using"  "block"  "throw"  "if"  

TERM  lambda_body_rep_2_rep_2 : PREP  "loop"  "try"  "var"  "import"  "namespace"  "struct"  "while"  "return"  "function"  "("  "for"  "constant"  "}"  "switch"  "block"  "foreach"  "break"  "package"  "continue"  "using"  "link"  "["  "throw"  "if"  "class"  

TERM  using_stmt : PREP  "loop"  "try"  "var"  "import"  "namespace"  "struct"  "class"  "return"  "function"  "("  "constant"  "for"  "}"  "end"  "while"  ENDL  "foreach"  "switch"  "break"  "continue"  "package"  "["  "link"  "using"  "block"  "throw"  "if"  

TERM  logic_or_expr : ":"  ";"  "/="  "^="  ":="  "}"  "+="  "do"  ENDL  "="  ")"  "-="  ","  "%="  "]"  "*="  

TERM  capture_list_rep_3 : "]"  ","  

TERM  fcall_opt_2 : ")"  

TERM  equal_expr : "++"  "gcnew"  "typeid"  "and"  "*"  "new"  "&"  "--"  "-"  "&&"  "!"  

TERM  var_bind : "="  ","  ")"  

TERM  var_stmt_decl_1 : ID  "("  

TERM  argument_list_opt_3 : CHAR  "local"  "("  "global"  ID  "{"  

TERM  function_stmt : PREP  "loop"  "try"  "var"  "import"  "namespace"  "struct"  "class"  "return"  "function"  "("  "constant"  "for"  "}"  "end"  "while"  ENDL  "foreach"  "switch"  "break"  "continue"  "package"  "["  "link"  "using"  "block"  "throw"  "if"  

TERM  index : CHAR  "{"  ID  "->"  "local"  "("  "global"  "["  "."  

TERM  return_stmt : PREP  "loop"  "try"  "var"  "import"  "namespace"  "struct"  "while"  "return"  "function"  "("  "for"  "constant"  "}"  "switch"  "block"  ENDL  "foreach"  "break"  "package"  "continue"  "using"  "if"  "class"  "throw"  "link"  "["  

TERM  unary_expr_decl_1_decl_2_opt_1 : "=="  "{"  ">="  "new"  "*"  "!="  "+"  "++"  ENDL  "/"  "<"  "and"  "typeid"  ">"  "<="  "gcnew"  "&"  "--"  "-"  "%"  "^"  "&&"  "!"  

TERM  class_stmt : PREP  "loop"  "try"  "var"  "import"  "namespace"  "struct"  "class"  "return"  "function"  "("  "constant"  "for"  "}"  "end"  "while"  ENDL  "foreach"  "switch"  "break"  "continue"  "package"  "["  "link"  "using"  "block"  "throw"  "if"  

TERM  import_list : ENDL  ";"  

TERM  element_decl_2_rep_1 : CHAR  ID  "{"  "->"  "local"  "("  "global"  "."  

TERM  logic_expr : "*="  ";"  "^="  "/="  ":="  "}"  "+="  "="  "do"  ENDL  ")"  "-="  ","  "?"  "%="  "]"  ":"  

TERM  unary_expr_decl_1_decl_1 : "++"  "typeid"  "gcnew"  "&"  "new"  "-"  "*"  "--"  "!"  

TERM  cond_expr_opt_2 : ";"  "^="  "/="  ":="  "}"  "+="  "="  "do"  ENDL  ")"  "-="  ","  "%="  "]"  "*="  

TERM  stmts_rep_1_rep_2 : "namespace"  "else"  "return"  "function"  "("  "for"  "catch"  %END%  ENDL  "foreach"  "break"  "using"  "if"  "class"  "throw"  "block"  PREP  "loop"  "try"  "var"  "import"  "struct"  "constant"  "}"  "package"  "continue"  "["  "until"  "link"  "while"  "switch"  "end"  

TERM  control_stmt : PREP  "loop"  "try"  "var"  "import"  "namespace"  "struct"  "while"  "return"  "function"  "("  "for"  "constant"  "}"  "switch"  "block"  ENDL  "foreach"  "break"  "package"  "continue"  "using"  "if"  "class"  "throw"  "link"  "["  

TERM  var_def : ","  ENDL  ";"  

TERM  switch_stmts_rep_2 : "end"  

TERM  for_stmt : PREP  "loop"  "try"  "var"  "import"  "namespace"  "struct"  "while"  "return"  "function"  "("  "for"  "constant"  "}"  "switch"  "block"  ENDL  "foreach"  "break"  "package"  "continue"  "using"  "if"  "class"  "throw"  "link"  "["  

TERM  element : CHAR  ID  "{"  "->"  "local"  "("  "global"  "."  

TERM  loop_stmt_decl_4 : PREP  "loop"  "import"  "try"  "var"  "namespace"  "struct"  "block"  "return"  "for"  "function"  "constant"  "}"  "("  "while"  "switch"  ENDL  "foreach"  "break"  "package"  "continue"  "if"  "using"  "class"  "throw"  "["  "link"  

TERM  cond_postfix : ";"  "/="  "^="  ":="  "}"  "+="  "do"  ENDL  "="  ")"  "-="  ","  "%="  "]"  "*="  

TERM  module_list : ENDL  ","  ";"  

TERM  switch_stmt : PREP  "loop"  "try"  "var"  "import"  "namespace"  "struct"  "while"  "return"  "function"  "("  "for"  "constant"  "}"  "switch"  "block"  ENDL  "foreach"  "break"  "package"  "continue"  "using"  "if"  "class"  "throw"  "link"  "["  

TERM  import_stmt : PREP  "loop"  "try"  "var"  "import"  "namespace"  "struct"  "while"  "return"  "function"  "("  "for"  "constant"  "}"  "switch"  "block"  ENDL  "foreach"  "break"  "package"  "continue"  "using"  "if"  "class"  "throw"  "link"  "["  

TERM  element_decl_1 : CHAR  ENDL  "{"  ID  "->"  "local"  "("  "global"  "["  "."  

TERM  for_stmt_decl_3 : ","  ";"  "("  

TERM  logic_or_expr_opt_2 : "++"  "typeid"  "gcnew"  "*"  "new"  "-"  "--"  "&"  "!"  

TERM  stmts_rep_1 : "namespace"  "else"  "return"  %END%  "for"  "catch"  "function"  "("  ENDL  "foreach"  "break"  "if"  "using"  "class"  "block"  "throw"  PREP  "loop"  "import"  "try"  "var"  "struct"  "constant"  "}"  "package"  "link"  "until"  "continue"  "end"  "["  "while"  "switch"  

TERM  class_stmt_opt_3 : ENDL  

TERM  throw_stmt_opt_2 : ENDL  ";"  

TERM  endline : PREP  "loop"  "import"  "try"  "var"  "namespace"  "struct"  "class"  "return"  "for"  "function"  "constant"  "}"  "("  "block"  "while"  ENDL  "foreach"  "switch"  "break"  "continue"  "package"  "using"  "["  "end"  "throw"  "if"  "link"  

TERM  switch_stmts : "end"  

TERM  prim_expr : "{"  "=="  "*"  "new"  ">="  "!="  "+"  "++"  "<"  "gcnew"  "typeid"  "and"  ">"  "<="  "--"  "&"  "-"  ENDL  "&&"  "/"  "^"  "!"  "%"  

TERM  object_decl_1 : CHAR  "{"  ID  "->"  "local"  "("  "global"  "."  

TERM  mul_expr_decl_2_opt_1_decl_1 : "++"  "gcnew"  "typeid"  "*"  "new"  "-"  "--"  "&"  "!"  

TERM  argument_list_rep_5 : ","  ")"  

TERM  postifx : "{"  "=="  "*"  "new"  ">="  "!="  "+"  "++"  "<"  "gcnew"  "typeid"  "and"  ">"  "<="  "--"  "&"  "-"  ENDL  "&&"  "/"  "^"  "!"  "%"  

TERM  add_expr : "=="  ">="  "*"  "new"  "!="  "++"  "<"  "gcnew"  "typeid"  "and"  ">"  "<="  "--"  "&"  "-"  "&&"  "!"  

TERM  logic_and_expr : "++"  "gcnew"  "typeid"  "||"  "&"  "new"  "-"  "*"  "--"  "!"  "or"  

TERM  fcall : CHAR  ID  "{"  "->"  "local"  "("  "global"  "["  "."  

TERM  relat_expr_opt_2 : "++"  "gcnew"  "typeid"  "and"  "=="  "*"  "new"  "--"  "-"  "&&"  "&"  "!="  "!"  

TERM  expr_stmt : PREP  "loop"  "try"  "var"  "import"  "namespace"  "struct"  "while"  "return"  "function"  "("  "for"  "constant"  "}"  "switch"  "block"  ENDL  "foreach"  "break"  "package"  "continue"  "using"  "if"  "class"  "throw"  "link"  "["  

TERM  foreach_stmt : PREP  "loop"  "try"  "var"  "import"  "namespace"  "struct"  "while"  "return"  "function"  "("  "for"  "constant"  "}"  "switch"  "block"  ENDL  "foreach"  "break"  "package"  "continue"  "using"  "if"  "class"  "throw"  "link"  "["  

TERM  %start% : %END%  

TERM  basic_expr : "do"  ","  ENDL  "]"  ")"  "}"  ";"  

TERM  expr : ENDL  ")"  "}"  ";"  

TERM  equal_expr_opt_2_decl_1 : "++"  "typeid"  "gcnew"  "*"  "new"  "-"  "--"  "&"  "!"  

TERM  using_list : ENDL  ";"  

TERM  relat_expr : "++"  "and"  "typeid"  "gcnew"  "=="  "--"  "&"  "new"  "-"  "*"  "&&"  "!="  "!"  

TERM  var_stmt : PREP  "loop"  "try"  "var"  "import"  "namespace"  "struct"  "class"  "return"  "function"  "("  "constant"  "for"  "}"  "end"  "while"  ENDL  "foreach"  "switch"  "break"  "continue"  "package"  "["  "link"  "using"  "block"  "throw"  "if"  

TERM  decl_stmts_rep_1 : "end"  

TERM  throw_stmt : PREP  "loop"  "try"  "var"  "import"  "namespace"  "struct"  "while"  "return"  "function"  "("  "for"  "constant"  "}"  "switch"  "block"  ENDL  "foreach"  "break"  "package"  "continue"  "using"  "if"  "class"  "throw"  "link"  "["  

TERM  mul_expr_decl_2 : "=="  ">="  "*"  "new"  "!="  "+"  "++"  "<"  "gcnew"  "typeid"  "and"  ">"  "<="  "--"  "&"  "-"  "&&"  "!"  

TERM  for_body : PREP  "loop"  "import"  "try"  "var"  "namespace"  "struct"  "block"  "return"  "for"  "function"  "constant"  "}"  "("  "while"  "switch"  ENDL  "foreach"  "break"  "package"  "link"  "if"  "using"  "class"  "throw"  "["  "continue"  

TERM  try_stmt_rep_4 : "end"  

TERM  catch_stmt_opt_3 : ENDL  

TERM  object_decl_1_opt_2 : CHAR  ID  "{"  "->"  "local"  "("  "global"  "."  

TERM  add_expr_opt_2_decl_1 : "++"  "typeid"  "gcnew"  "--"  "new"  "-"  "&"  "*"  "!"  

TERM  function_body_decl_1 : PREP  "loop"  "try"  "var"  "import"  "namespace"  "struct"  "class"  "return"  "function"  "("  "constant"  "for"  "}"  "end"  "while"  ENDL  "foreach"  "switch"  "break"  "continue"  "link"  "["  "package"  "if"  "block"  "throw"  "using"  

TERM  unary_expr_decl_1 : "=="  "{"  ">="  "new"  "*"  "!="  "+"  "++"  ENDL  "/"  "<"  "and"  "typeid"  ">"  "<="  "gcnew"  "&"  "--"  "-"  "%"  "^"  "&&"  "!"  

TERM  else_stmt_opt_2 : ENDL  

TERM  return_stmt_opt_2 : ENDL  ";"  

TERM  for_stmt_opt_2 : ","  ";"  

TERM  unary_expr_decl_1_opt_3 : "{"  "=="  "*"  "new"  ">="  "!="  "+"  "++"  "<"  "gcnew"  "typeid"  "and"  ">"  "<="  "--"  "&"  "-"  ENDL  "&&"  "/"  "^"  "!"  "%"  

TERM  package_stmt : PREP  "loop"  "try"  "var"  "import"  "namespace"  "struct"  "while"  "return"  "function"  "("  "for"  "constant"  "}"  "switch"  "block"  ENDL  "foreach"  "break"  "package"  "continue"  "using"  "if"  "class"  "throw"  "link"  "["  

TERM  for_body_decl_1 : PREP  "loop"  "try"  "var"  "import"  "namespace"  "struct"  "while"  "return"  "function"  "("  "for"  "constant"  "}"  "switch"  "block"  ENDL  "foreach"  "break"  "continue"  "link"  "["  "if"  "class"  "throw"  "package"  "using"  

TERM  array_opt_2 : "}"  

TERM  var_bind_rep_3 : ")"  

TERM  mul_expr_decl_2_opt_1 : "=="  ">="  "*"  "new"  "!="  "+"  "++"  "<"  "and"  "typeid"  ">"  "<="  "gcnew"  "&"  "--"  "-"  "&&"  "!"  

TERM  for_stmt_opt_6 : "do"  ENDL  

TERM  function_body : PREP  "loop"  "import"  "try"  "var"  "namespace"  "struct"  "end"  "return"  "for"  "function"  "("  "}"  "constant"  "while"  "switch"  ENDL  "foreach"  "class"  "break"  "continue"  "link"  "["  "if"  "using"  "throw"  "block"  "package"  

TERM  equal_expr_opt_2 : "++"  "and"  "typeid"  "gcnew"  "*"  "new"  "-"  "--"  "&&"  "&"  "!"  

TERM  visit_expr_opt_2 : CHAR  "local"  "("  "global"  ID  "{"  

TERM  while_stmt : PREP  "loop"  "try"  "var"  "import"  "namespace"  "struct"  "while"  "return"  "function"  "("  "for"  "constant"  "}"  "switch"  "block"  ENDL  "foreach"  "break"  "package"  "continue"  "using"  "if"  "class"  "throw"  "link"  "["  

TERM  lambda_expr_opt_5 : ")"  

TERM  namespace_stmt : PREP  "loop"  "try"  "var"  "import"  "namespace"  "struct"  "class"  "return"  "function"  "("  "constant"  "for"  "}"  "end"  "while"  ENDL  "foreach"  "switch"  "break"  "continue"  "package"  "["  "link"  "using"  "block"  "throw"  "if"  

TERM  expr_opt_2 : ENDL  ")"  "}"  ";"  

TERM  var_bind_list : ","  ")"  

TERM  if_stmt : PREP  "loop"  "try"  "var"  "import"  "namespace"  "struct"  "while"  "return"  "function"  "("  "for"  "constant"  "}"  "switch"  "block"  ENDL  "foreach"  "break"  "package"  "continue"  "using"  "if"  "class"  "throw"  "link"  "["  

TERM  object : CHAR  ID  "{"  "->"  "local"  "("  "global"  "."  

TERM  decl_stmts_rep_1_rep_2 : PREP  "var"  "namespace"  "struct"  "link"  "function"  "using"  "class"  "constant"  "end"  

TERM  catch_stmt : "end"  "catch"  

TERM  loop_stmt : PREP  "loop"  "try"  "var"  "import"  "namespace"  "struct"  "while"  "return"  "function"  "("  "for"  "constant"  "}"  "switch"  "block"  ENDL  "foreach"  "break"  "package"  "continue"  "using"  "if"  "class"  "throw"  "link"  "["  

TERM  lambda_body : ENDL  ","  ")"  "do"  "}"  "]"  ";"  

TERM  unary_expr : "{"  "=="  "*"  "new"  ">="  "!="  "+"  "++"  "<"  "gcnew"  "typeid"  "and"  ">"  "<="  "--"  "&"  "-"  ENDL  "&&"  "/"  "^"  "!"  "%"  

TERM  array : CHAR  "{"  "*"  "new"  "->"  "("  "!="  ENDL  "<"  "and"  "gcnew"  ">"  "&"  "--"  "&&"  "^"  "."  "=="  ">="  "local"  "global"  "+"  "++"  "/"  "typeid"  ID  "<="  "-"  "["  "%"  "!"  

TERM  decl_stmts : "end"  

TERM  asi_op : "["  "("  

TERM  str : CHAR  ID  "{"  "->"  "local"  "("  "global"  "["  "."  

TERM  lambda_expr_opt_2 : "]"  

TERM  class_stmt_decl_1 : ID  

TERM  for_stmt_opt_4 : ","  ";"  

TERM  lambda_body_rep_2 : "}"  

TERM  switch_stmts_rep_1 : "end"  ENDL  

TERM  until_stmt : PREP  "loop"  "try"  "var"  "import"  "namespace"  "struct"  "while"  "return"  "function"  "("  "for"  "constant"  "}"  "switch"  "block"  ENDL  "foreach"  "break"  "package"  "continue"  "["  "if"  "class"  "throw"  "link"  "using"  

TERM  switch_case : ENDL  "default"  "end"  "case"  

TERM  single_expr : "do"  ","  ")"  ENDL  "]"  "}"  ";"  

TERM  statements : "namespace"  "else"  "return"  %END%  "for"  "catch"  "function"  "("  ENDL  "foreach"  "break"  "if"  "using"  "class"  "block"  "throw"  PREP  "loop"  "import"  "try"  "var"  "struct"  "constant"  "}"  "continue"  "link"  "["  "package"  "end"  "until"  "while"  "switch"  

TERM  unary_expr_decl_1_decl_2 : "{"  "=="  "*"  "new"  ">="  "!="  "+"  "++"  "<"  "gcnew"  "typeid"  "and"  ">"  "<="  "--"  "&"  "-"  ENDL  "&&"  "/"  "^"  "!"  "%"  

TERM  var_list_opt_4 : ","  ENDL  ";"  

TERM  element_decl_2 : CHAR  "{"  ID  "->"  "local"  "("  "global"  "."  

TERM  cond_expr : ";"  "^="  "/="  ":="  "}"  "+="  "="  "do"  ENDL  ")"  "-="  ","  "%="  "]"  "*="  

TERM  var_list : ENDL  ","  ";"  

TERM  relat_expr_opt_2_decl_1 : "++"  "gcnew"  "typeid"  "&"  "new"  "-"  "*"  "--"  "!"  

TERM  logic_and_expr_opt_2 : "++"  "gcnew"  "typeid"  "--"  "new"  "-"  "&"  "*"  "!"  

TERM  control_stmt_decl_1 : ENDL  ";"  

##############
show_mark_info
##############
%start% =  %MARK% begin
%start% =  begin %MARK%
begin =  %MARK% stmts
begin =  stmts %MARK%
ignore =  %MARK% ignore_rep_1
ignore =  ignore_rep_1 %MARK%
ignore_rep_1 =  %MARK%
ignore_rep_1 =  %MARK% ENDL ignore_rep_1
ignore_rep_1 =  ENDL %MARK% ignore_rep_1
ignore_rep_1 =  ENDL ignore_rep_1 %MARK%
endline =  %MARK% ";"
endline =  ";" %MARK%
endline =  %MARK% ENDL
endline =  ENDL %MARK%
stmts =  %MARK% stmts_rep_1
stmts =  stmts_rep_1 %MARK%
stmts_rep_1 =  %MARK%
stmts_rep_1 =  %MARK% statements stmts_rep_1_rep_2 stmts_rep_1
stmts_rep_1 =  statements %MARK% stmts_rep_1_rep_2 stmts_rep_1
stmts_rep_1 =  statements stmts_rep_1_rep_2 %MARK% stmts_rep_1
stmts_rep_1 =  statements stmts_rep_1_rep_2 stmts_rep_1 %MARK%
stmts_rep_1_rep_2 =  %MARK%
stmts_rep_1_rep_2 =  %MARK% ENDL stmts_rep_1_rep_2
stmts_rep_1_rep_2 =  ENDL %MARK% stmts_rep_1_rep_2
stmts_rep_1_rep_2 =  ENDL stmts_rep_1_rep_2 %MARK%
decl_stmts =  %MARK% decl_stmts_rep_1
decl_stmts =  decl_stmts_rep_1 %MARK%
decl_stmts_rep_1 =  %MARK%
decl_stmts_rep_1 =  %MARK% declaration decl_stmts_rep_1_rep_2 decl_stmts_rep_1
decl_stmts_rep_1 =  declaration %MARK% decl_stmts_rep_1_rep_2 decl_stmts_rep_1
decl_stmts_rep_1 =  declaration decl_stmts_rep_1_rep_2 %MARK% decl_stmts_rep_1
decl_stmts_rep_1 =  declaration decl_stmts_rep_1_rep_2 decl_stmts_rep_1 %MARK%
decl_stmts_rep_1_rep_2 =  %MARK%
decl_stmts_rep_1_rep_2 =  %MARK% ENDL decl_stmts_rep_1_rep_2
decl_stmts_rep_1_rep_2 =  ENDL %MARK% decl_stmts_rep_1_rep_2
decl_stmts_rep_1_rep_2 =  ENDL decl_stmts_rep_1_rep_2 %MARK%
endblock =  %MARK% catch_stmt
endblock =  catch_stmt %MARK%
endblock =  %MARK% until_stmt
endblock =  until_stmt %MARK%
endblock =  %MARK% else_stmt
endblock =  else_stmt %MARK%
endblock =  %MARK% end_stmt
endblock =  end_stmt %MARK%
statement =  %MARK% expr_stmt
statement =  expr_stmt %MARK%
statement =  %MARK% class_stmt
statement =  class_stmt %MARK%
statement =  %MARK% throw_stmt
statement =  throw_stmt %MARK%
statement =  %MARK% try_stmt
statement =  try_stmt %MARK%
statement =  %MARK% return_stmt
statement =  return_stmt %MARK%
statement =  %MARK% function_stmt
statement =  function_stmt %MARK%
statement =  %MARK% control_stmt
statement =  control_stmt %MARK%
statement =  %MARK% foreach_stmt
statement =  foreach_stmt %MARK%
statement =  %MARK% for_stmt
statement =  for_stmt %MARK%
statement =  %MARK% loop_stmt
statement =  loop_stmt %MARK%
statement =  %MARK% while_stmt
statement =  while_stmt %MARK%
statement =  %MARK% switch_stmt
statement =  switch_stmt %MARK%
statement =  %MARK% if_stmt
statement =  if_stmt %MARK%
statement =  %MARK% using_stmt
statement =  using_stmt %MARK%
statement =  %MARK% namespace_stmt
statement =  namespace_stmt %MARK%
statement =  %MARK% block_stmt
statement =  block_stmt %MARK%
statement =  %MARK% var_stmt
statement =  var_stmt %MARK%
statement =  %MARK% import_stmt
statement =  import_stmt %MARK%
statement =  %MARK% package_stmt
statement =  package_stmt %MARK%
statement =  %MARK% prep_stmt
statement =  prep_stmt %MARK%
declaration =  %MARK% class_stmt
declaration =  class_stmt %MARK%
declaration =  %MARK% function_stmt
declaration =  function_stmt %MARK%
declaration =  %MARK% using_stmt
declaration =  using_stmt %MARK%
declaration =  %MARK% var_stmt
declaration =  var_stmt %MARK%
declaration =  %MARK% namespace_stmt
declaration =  namespace_stmt %MARK%
declaration =  %MARK% prep_stmt
declaration =  prep_stmt %MARK%
prep_stmt =  %MARK% PREP ENDL
prep_stmt =  PREP %MARK% ENDL
prep_stmt =  PREP ENDL %MARK%
package_stmt =  %MARK% "package" ID endline
package_stmt =  "package" %MARK% ID endline
package_stmt =  "package" ID %MARK% endline
package_stmt =  "package" ID endline %MARK%
import_stmt =  %MARK% "import" import_list endline
import_stmt =  "import" %MARK% import_list endline
import_stmt =  "import" import_list %MARK% endline
import_stmt =  "import" import_list endline %MARK%
var_def =  %MARK% var_list
var_def =  var_list %MARK%
var_def =  %MARK% var_bind "=" basic_expr
var_def =  var_bind %MARK% "=" basic_expr
var_def =  var_bind "=" %MARK% basic_expr
var_def =  var_bind "=" basic_expr %MARK%
var_stmt =  %MARK% var_stmt_decl_1 var_def endline
var_stmt =  var_stmt_decl_1 %MARK% var_def endline
var_stmt =  var_stmt_decl_1 var_def %MARK% endline
var_stmt =  var_stmt_decl_1 var_def endline %MARK%
var_stmt_decl_1 =  %MARK% "constant"
var_stmt_decl_1 =  "constant" %MARK%
var_stmt_decl_1 =  %MARK% "link"
var_stmt_decl_1 =  "link" %MARK%
var_stmt_decl_1 =  %MARK% "var"
var_stmt_decl_1 =  "var" %MARK%
var_bind =  %MARK% "(" var_bind_list var_bind_rep_3 ")"
var_bind =  "(" %MARK% var_bind_list var_bind_rep_3 ")"
var_bind =  "(" var_bind_list %MARK% var_bind_rep_3 ")"
var_bind =  "(" var_bind_list var_bind_rep_3 %MARK% ")"
var_bind =  "(" var_bind_list var_bind_rep_3 ")" %MARK%
var_bind_rep_3 =  %MARK%
var_bind_rep_3 =  %MARK% "," var_bind_list var_bind_rep_3
var_bind_rep_3 =  "," %MARK% var_bind_list var_bind_rep_3
var_bind_rep_3 =  "," var_bind_list %MARK% var_bind_rep_3
var_bind_rep_3 =  "," var_bind_list var_bind_rep_3 %MARK%
var_bind_list =  %MARK% var_bind
var_bind_list =  var_bind %MARK%
var_bind_list =  %MARK% ETC
var_bind_list =  ETC %MARK%
var_bind_list =  %MARK% ID
var_bind_list =  ID %MARK%
var_list =  %MARK% ID "=" single_expr var_list_opt_4
var_list =  ID %MARK% "=" single_expr var_list_opt_4
var_list =  ID "=" %MARK% single_expr var_list_opt_4
var_list =  ID "=" single_expr %MARK% var_list_opt_4
var_list =  ID "=" single_expr var_list_opt_4 %MARK%
var_list_opt_4 =  %MARK%
var_list_opt_4 =  %MARK% "," var_list
var_list_opt_4 =  "," %MARK% var_list
var_list_opt_4 =  "," var_list %MARK%
block_stmt =  %MARK% "block" ENDL stmts "end" ENDL
block_stmt =  "block" %MARK% ENDL stmts "end" ENDL
block_stmt =  "block" ENDL %MARK% stmts "end" ENDL
block_stmt =  "block" ENDL stmts %MARK% "end" ENDL
block_stmt =  "block" ENDL stmts "end" %MARK% ENDL
block_stmt =  "block" ENDL stmts "end" ENDL %MARK%
namespace_stmt =  %MARK% "namespace" ID ENDL decl_stmts "end" ENDL
namespace_stmt =  "namespace" %MARK% ID ENDL decl_stmts "end" ENDL
namespace_stmt =  "namespace" ID %MARK% ENDL decl_stmts "end" ENDL
namespace_stmt =  "namespace" ID ENDL %MARK% decl_stmts "end" ENDL
namespace_stmt =  "namespace" ID ENDL decl_stmts %MARK% "end" ENDL
namespace_stmt =  "namespace" ID ENDL decl_stmts "end" %MARK% ENDL
namespace_stmt =  "namespace" ID ENDL decl_stmts "end" ENDL %MARK%
using_stmt =  %MARK% "using" using_list endline
using_stmt =  "using" %MARK% using_list endline
using_stmt =  "using" using_list %MARK% endline
using_stmt =  "using" using_list endline %MARK%
using_list =  %MARK% module_list using_list_opt_2
using_list =  module_list %MARK% using_list_opt_2
using_list =  module_list using_list_opt_2 %MARK%
using_list_opt_2 =  %MARK%
using_list_opt_2 =  %MARK% "," using_list
using_list_opt_2 =  "," %MARK% using_list
using_list_opt_2 =  "," using_list %MARK%
if_stmt =  %MARK% "if" basic_expr ENDL stmts if_stmt_rep_5
if_stmt =  "if" %MARK% basic_expr ENDL stmts if_stmt_rep_5
if_stmt =  "if" basic_expr %MARK% ENDL stmts if_stmt_rep_5
if_stmt =  "if" basic_expr ENDL %MARK% stmts if_stmt_rep_5
if_stmt =  "if" basic_expr ENDL stmts %MARK% if_stmt_rep_5
if_stmt =  "if" basic_expr ENDL stmts if_stmt_rep_5 %MARK%
if_stmt_rep_5 =  %MARK%
if_stmt_rep_5 =  %MARK% else_stmt stmts "end" ENDL if_stmt_rep_5
if_stmt_rep_5 =  else_stmt %MARK% stmts "end" ENDL if_stmt_rep_5
if_stmt_rep_5 =  else_stmt stmts %MARK% "end" ENDL if_stmt_rep_5
if_stmt_rep_5 =  else_stmt stmts "end" %MARK% ENDL if_stmt_rep_5
if_stmt_rep_5 =  else_stmt stmts "end" ENDL %MARK% if_stmt_rep_5
if_stmt_rep_5 =  else_stmt stmts "end" ENDL if_stmt_rep_5 %MARK%
else_stmt =  %MARK% "else" else_stmt_opt_2 ENDL basic_expr ENDL
else_stmt =  "else" %MARK% else_stmt_opt_2 ENDL basic_expr ENDL
else_stmt =  "else" else_stmt_opt_2 %MARK% ENDL basic_expr ENDL
else_stmt =  "else" else_stmt_opt_2 ENDL %MARK% basic_expr ENDL
else_stmt =  "else" else_stmt_opt_2 ENDL basic_expr %MARK% ENDL
else_stmt =  "else" else_stmt_opt_2 ENDL basic_expr ENDL %MARK%
else_stmt_opt_2 =  %MARK%
else_stmt_opt_2 =  %MARK% "if"
else_stmt_opt_2 =  "if" %MARK%
switch_stmt =  %MARK% "switch" basic_expr ENDL switch_stmts "end" ENDL
switch_stmt =  "switch" %MARK% basic_expr ENDL switch_stmts "end" ENDL
switch_stmt =  "switch" basic_expr %MARK% ENDL switch_stmts "end" ENDL
switch_stmt =  "switch" basic_expr ENDL %MARK% switch_stmts "end" ENDL
switch_stmt =  "switch" basic_expr ENDL switch_stmts %MARK% "end" ENDL
switch_stmt =  "switch" basic_expr ENDL switch_stmts "end" %MARK% ENDL
switch_stmt =  "switch" basic_expr ENDL switch_stmts "end" ENDL %MARK%
switch_stmts =  %MARK% switch_stmts_rep_1 switch_stmts_rep_2
switch_stmts =  switch_stmts_rep_1 %MARK% switch_stmts_rep_2
switch_stmts =  switch_stmts_rep_1 switch_stmts_rep_2 %MARK%
switch_stmts_rep_2 =  %MARK%
switch_stmts_rep_2 =  %MARK% ENDL switch_stmts_rep_2
switch_stmts_rep_2 =  ENDL %MARK% switch_stmts_rep_2
switch_stmts_rep_2 =  ENDL switch_stmts_rep_2 %MARK%
switch_stmts_rep_1 =  %MARK%
switch_stmts_rep_1 =  %MARK% switch_default switch_stmts_rep_1
switch_stmts_rep_1 =  switch_default %MARK% switch_stmts_rep_1
switch_stmts_rep_1 =  switch_default switch_stmts_rep_1 %MARK%
switch_stmts_rep_1 =  %MARK% switch_case switch_stmts_rep_1
switch_stmts_rep_1 =  switch_case %MARK% switch_stmts_rep_1
switch_stmts_rep_1 =  switch_case switch_stmts_rep_1 %MARK%
switch_case =  %MARK% "case" logic_or_expr ENDL stmts "end" ENDL
switch_case =  "case" %MARK% logic_or_expr ENDL stmts "end" ENDL
switch_case =  "case" logic_or_expr %MARK% ENDL stmts "end" ENDL
switch_case =  "case" logic_or_expr ENDL %MARK% stmts "end" ENDL
switch_case =  "case" logic_or_expr ENDL stmts %MARK% "end" ENDL
switch_case =  "case" logic_or_expr ENDL stmts "end" %MARK% ENDL
switch_case =  "case" logic_or_expr ENDL stmts "end" ENDL %MARK%
switch_default =  %MARK% "default" ENDL stmts "end" ENDL
switch_default =  "default" %MARK% ENDL stmts "end" ENDL
switch_default =  "default" ENDL %MARK% stmts "end" ENDL
switch_default =  "default" ENDL stmts %MARK% "end" ENDL
switch_default =  "default" ENDL stmts "end" %MARK% ENDL
switch_default =  "default" ENDL stmts "end" ENDL %MARK%
while_stmt =  %MARK% "while" basic_expr ENDL stmts "end" ENDL
while_stmt =  "while" %MARK% basic_expr ENDL stmts "end" ENDL
while_stmt =  "while" basic_expr %MARK% ENDL stmts "end" ENDL
while_stmt =  "while" basic_expr ENDL %MARK% stmts "end" ENDL
while_stmt =  "while" basic_expr ENDL stmts %MARK% "end" ENDL
while_stmt =  "while" basic_expr ENDL stmts "end" %MARK% ENDL
while_stmt =  "while" basic_expr ENDL stmts "end" ENDL %MARK%
loop_stmt =  %MARK% "loop" ENDL stmts loop_stmt_decl_4
loop_stmt =  "loop" %MARK% ENDL stmts loop_stmt_decl_4
loop_stmt =  "loop" ENDL %MARK% stmts loop_stmt_decl_4
loop_stmt =  "loop" ENDL stmts %MARK% loop_stmt_decl_4
loop_stmt =  "loop" ENDL stmts loop_stmt_decl_4 %MARK%
loop_stmt_decl_4 =  %MARK% ENDL
loop_stmt_decl_4 =  ENDL %MARK%
loop_stmt_decl_4 =  %MARK% "end"
loop_stmt_decl_4 =  "end" %MARK%
loop_stmt_decl_4 =  %MARK% until_stmt
loop_stmt_decl_4 =  until_stmt %MARK%
until_stmt =  %MARK% "until" basic_expr ENDL
until_stmt =  "until" %MARK% basic_expr ENDL
until_stmt =  "until" basic_expr %MARK% ENDL
until_stmt =  "until" basic_expr ENDL %MARK%
for_stmt =  %MARK% "for" for_stmt_opt_2 for_stmt_decl_3 for_stmt_opt_4 for_stmt_decl_5 for_stmt_opt_6 for_body
for_stmt =  "for" %MARK% for_stmt_opt_2 for_stmt_decl_3 for_stmt_opt_4 for_stmt_decl_5 for_stmt_opt_6 for_body
for_stmt =  "for" for_stmt_opt_2 %MARK% for_stmt_decl_3 for_stmt_opt_4 for_stmt_decl_5 for_stmt_opt_6 for_body
for_stmt =  "for" for_stmt_opt_2 for_stmt_decl_3 %MARK% for_stmt_opt_4 for_stmt_decl_5 for_stmt_opt_6 for_body
for_stmt =  "for" for_stmt_opt_2 for_stmt_decl_3 for_stmt_opt_4 %MARK% for_stmt_decl_5 for_stmt_opt_6 for_body
for_stmt =  "for" for_stmt_opt_2 for_stmt_decl_3 for_stmt_opt_4 for_stmt_decl_5 %MARK% for_stmt_opt_6 for_body
for_stmt =  "for" for_stmt_opt_2 for_stmt_decl_3 for_stmt_opt_4 for_stmt_decl_5 for_stmt_opt_6 %MARK% for_body
for_stmt =  "for" for_stmt_opt_2 for_stmt_decl_3 for_stmt_opt_4 for_stmt_decl_5 for_stmt_opt_6 for_body %MARK%
for_stmt_opt_6 =  %MARK%
for_stmt_opt_6 =  %MARK% basic_expr
for_stmt_opt_6 =  basic_expr %MARK%
for_stmt_decl_5 =  %MARK% ","
for_stmt_decl_5 =  "," %MARK%
for_stmt_decl_5 =  %MARK% ";"
for_stmt_decl_5 =  ";" %MARK%
for_stmt_opt_4 =  %MARK%
for_stmt_opt_4 =  %MARK% basic_expr
for_stmt_opt_4 =  basic_expr %MARK%
for_stmt_decl_3 =  %MARK% ","
for_stmt_decl_3 =  "," %MARK%
for_stmt_decl_3 =  %MARK% ";"
for_stmt_decl_3 =  ";" %MARK%
for_stmt_opt_2 =  %MARK%
for_stmt_opt_2 =  %MARK% var_def
for_stmt_opt_2 =  var_def %MARK%
foreach_stmt =  %MARK% "foreach" ID "in" basic_expr for_body
foreach_stmt =  "foreach" %MARK% ID "in" basic_expr for_body
foreach_stmt =  "foreach" ID %MARK% "in" basic_expr for_body
foreach_stmt =  "foreach" ID "in" %MARK% basic_expr for_body
foreach_stmt =  "foreach" ID "in" basic_expr %MARK% for_body
foreach_stmt =  "foreach" ID "in" basic_expr for_body %MARK%
for_body =  %MARK% for_body_decl_1
for_body =  for_body_decl_1 %MARK%
for_body_decl_1 =  %MARK% ENDL stmts "end" ENDL
for_body_decl_1 =  ENDL %MARK% stmts "end" ENDL
for_body_decl_1 =  ENDL stmts %MARK% "end" ENDL
for_body_decl_1 =  ENDL stmts "end" %MARK% ENDL
for_body_decl_1 =  ENDL stmts "end" ENDL %MARK%
for_body_decl_1 =  %MARK% "do" basic_expr endline
for_body_decl_1 =  "do" %MARK% basic_expr endline
for_body_decl_1 =  "do" basic_expr %MARK% endline
for_body_decl_1 =  "do" basic_expr endline %MARK%
function_stmt =  %MARK% "function" ID "(" function_stmt_opt_4 ")" function_stmt_opt_6 function_body
function_stmt =  "function" %MARK% ID "(" function_stmt_opt_4 ")" function_stmt_opt_6 function_body
function_stmt =  "function" ID %MARK% "(" function_stmt_opt_4 ")" function_stmt_opt_6 function_body
function_stmt =  "function" ID "(" %MARK% function_stmt_opt_4 ")" function_stmt_opt_6 function_body
function_stmt =  "function" ID "(" function_stmt_opt_4 %MARK% ")" function_stmt_opt_6 function_body
function_stmt =  "function" ID "(" function_stmt_opt_4 ")" %MARK% function_stmt_opt_6 function_body
function_stmt =  "function" ID "(" function_stmt_opt_4 ")" function_stmt_opt_6 %MARK% function_body
function_stmt =  "function" ID "(" function_stmt_opt_4 ")" function_stmt_opt_6 function_body %MARK%
function_stmt_opt_6 =  %MARK%
function_stmt_opt_6 =  %MARK% "override"
function_stmt_opt_6 =  "override" %MARK%
function_stmt_opt_4 =  %MARK%
function_stmt_opt_4 =  %MARK% argument_list
function_stmt_opt_4 =  argument_list %MARK%
function_body =  %MARK% function_body_decl_1
function_body =  function_body_decl_1 %MARK%
function_body_decl_1 =  %MARK% ENDL stmts "end" ENDL
function_body_decl_1 =  ENDL %MARK% stmts "end" ENDL
function_body_decl_1 =  ENDL stmts %MARK% "end" ENDL
function_body_decl_1 =  ENDL stmts "end" %MARK% ENDL
function_body_decl_1 =  ENDL stmts "end" ENDL %MARK%
function_body_decl_1 =  %MARK% "{" stmts "}"
function_body_decl_1 =  "{" %MARK% stmts "}"
function_body_decl_1 =  "{" stmts %MARK% "}"
function_body_decl_1 =  "{" stmts "}" %MARK%
return_stmt =  %MARK% "return" return_stmt_opt_2 endline
return_stmt =  "return" %MARK% return_stmt_opt_2 endline
return_stmt =  "return" return_stmt_opt_2 %MARK% endline
return_stmt =  "return" return_stmt_opt_2 endline %MARK%
return_stmt_opt_2 =  %MARK%
return_stmt_opt_2 =  %MARK% expr
return_stmt_opt_2 =  expr %MARK%
try_stmt =  %MARK% "try" ENDL stmts try_stmt_rep_4 "end" ENDL
try_stmt =  "try" %MARK% ENDL stmts try_stmt_rep_4 "end" ENDL
try_stmt =  "try" ENDL %MARK% stmts try_stmt_rep_4 "end" ENDL
try_stmt =  "try" ENDL stmts %MARK% try_stmt_rep_4 "end" ENDL
try_stmt =  "try" ENDL stmts try_stmt_rep_4 %MARK% "end" ENDL
try_stmt =  "try" ENDL stmts try_stmt_rep_4 "end" %MARK% ENDL
try_stmt =  "try" ENDL stmts try_stmt_rep_4 "end" ENDL %MARK%
try_stmt_rep_4 =  %MARK%
try_stmt_rep_4 =  %MARK% catch_stmt stmts try_stmt_rep_4
try_stmt_rep_4 =  catch_stmt %MARK% stmts try_stmt_rep_4
try_stmt_rep_4 =  catch_stmt stmts %MARK% try_stmt_rep_4
try_stmt_rep_4 =  catch_stmt stmts try_stmt_rep_4 %MARK%
catch_stmt =  %MARK% "catch" ID catch_stmt_opt_3 ENDL
catch_stmt =  "catch" %MARK% ID catch_stmt_opt_3 ENDL
catch_stmt =  "catch" ID %MARK% catch_stmt_opt_3 ENDL
catch_stmt =  "catch" ID catch_stmt_opt_3 %MARK% ENDL
catch_stmt =  "catch" ID catch_stmt_opt_3 ENDL %MARK%
catch_stmt_opt_3 =  %MARK%
catch_stmt_opt_3 =  %MARK% ":" visit_expr
catch_stmt_opt_3 =  ":" %MARK% visit_expr
catch_stmt_opt_3 =  ":" visit_expr %MARK%
throw_stmt =  %MARK% "throw" throw_stmt_opt_2 endline
throw_stmt =  "throw" %MARK% throw_stmt_opt_2 endline
throw_stmt =  "throw" throw_stmt_opt_2 %MARK% endline
throw_stmt =  "throw" throw_stmt_opt_2 endline %MARK%
throw_stmt_opt_2 =  %MARK%
throw_stmt_opt_2 =  %MARK% expr
throw_stmt_opt_2 =  expr %MARK%
class_stmt =  %MARK% class_stmt_decl_1 ID class_stmt_opt_3 ENDL decl_stmts "end" ENDL
class_stmt =  class_stmt_decl_1 %MARK% ID class_stmt_opt_3 ENDL decl_stmts "end" ENDL
class_stmt =  class_stmt_decl_1 ID %MARK% class_stmt_opt_3 ENDL decl_stmts "end" ENDL
class_stmt =  class_stmt_decl_1 ID class_stmt_opt_3 %MARK% ENDL decl_stmts "end" ENDL
class_stmt =  class_stmt_decl_1 ID class_stmt_opt_3 ENDL %MARK% decl_stmts "end" ENDL
class_stmt =  class_stmt_decl_1 ID class_stmt_opt_3 ENDL decl_stmts %MARK% "end" ENDL
class_stmt =  class_stmt_decl_1 ID class_stmt_opt_3 ENDL decl_stmts "end" %MARK% ENDL
class_stmt =  class_stmt_decl_1 ID class_stmt_opt_3 ENDL decl_stmts "end" ENDL %MARK%
class_stmt_opt_3 =  %MARK%
class_stmt_opt_3 =  %MARK% "extends" visit_expr
class_stmt_opt_3 =  "extends" %MARK% visit_expr
class_stmt_opt_3 =  "extends" visit_expr %MARK%
class_stmt_decl_1 =  %MARK% "struct"
class_stmt_decl_1 =  "struct" %MARK%
class_stmt_decl_1 =  %MARK% "class"
class_stmt_decl_1 =  "class" %MARK%
control_stmt =  %MARK% control_stmt_decl_1 endline
control_stmt =  control_stmt_decl_1 %MARK% endline
control_stmt =  control_stmt_decl_1 endline %MARK%
control_stmt_decl_1 =  %MARK% "continue"
control_stmt_decl_1 =  "continue" %MARK%
control_stmt_decl_1 =  %MARK% "break"
control_stmt_decl_1 =  "break" %MARK%
expr_stmt =  %MARK% expr endline
expr_stmt =  expr %MARK% endline
expr_stmt =  expr endline %MARK%
end_stmt =  %MARK% "end" ENDL
end_stmt =  "end" %MARK% ENDL
end_stmt =  "end" ENDL %MARK%
expr =  %MARK% single_expr expr_opt_2
expr =  single_expr %MARK% expr_opt_2
expr =  single_expr expr_opt_2 %MARK%
expr_opt_2 =  %MARK%
expr_opt_2 =  %MARK% "," expr
expr_opt_2 =  "," %MARK% expr
expr_opt_2 =  "," expr %MARK%
single_expr =  %MARK% basic_expr
single_expr =  basic_expr %MARK%
single_expr =  %MARK% lambda_expr
single_expr =  lambda_expr %MARK%
basic_expr =  %MARK% cond_expr basic_expr_opt_2
basic_expr =  cond_expr %MARK% basic_expr_opt_2
basic_expr =  cond_expr basic_expr_opt_2 %MARK%
basic_expr =  %MARK% var_bind "=" cond_expr
basic_expr =  var_bind %MARK% "=" cond_expr
basic_expr =  var_bind "=" %MARK% cond_expr
basic_expr =  var_bind "=" cond_expr %MARK%
basic_expr_opt_2 =  %MARK%
basic_expr_opt_2 =  %MARK% asi_op single_expr
basic_expr_opt_2 =  asi_op %MARK% single_expr
basic_expr_opt_2 =  asi_op single_expr %MARK%
asi_op =  %MARK% "^="
asi_op =  "^=" %MARK%
asi_op =  %MARK% "%="
asi_op =  "%=" %MARK%
asi_op =  %MARK% "/="
asi_op =  "/=" %MARK%
asi_op =  %MARK% "*="
asi_op =  "*=" %MARK%
asi_op =  %MARK% "-="
asi_op =  "-=" %MARK%
asi_op =  %MARK% "+="
asi_op =  "+=" %MARK%
asi_op =  %MARK% ":="
asi_op =  ":=" %MARK%
asi_op =  %MARK% "="
asi_op =  "=" %MARK%
lambda_expr =  %MARK% "[" lambda_expr_opt_2 "]" "(" lambda_expr_opt_5 ")" lambda_body
lambda_expr =  "[" %MARK% lambda_expr_opt_2 "]" "(" lambda_expr_opt_5 ")" lambda_body
lambda_expr =  "[" lambda_expr_opt_2 %MARK% "]" "(" lambda_expr_opt_5 ")" lambda_body
lambda_expr =  "[" lambda_expr_opt_2 "]" %MARK% "(" lambda_expr_opt_5 ")" lambda_body
lambda_expr =  "[" lambda_expr_opt_2 "]" "(" %MARK% lambda_expr_opt_5 ")" lambda_body
lambda_expr =  "[" lambda_expr_opt_2 "]" "(" lambda_expr_opt_5 %MARK% ")" lambda_body
lambda_expr =  "[" lambda_expr_opt_2 "]" "(" lambda_expr_opt_5 ")" %MARK% lambda_body
lambda_expr =  "[" lambda_expr_opt_2 "]" "(" lambda_expr_opt_5 ")" lambda_body %MARK%
lambda_expr_opt_5 =  %MARK%
lambda_expr_opt_5 =  %MARK% argument_list
lambda_expr_opt_5 =  argument_list %MARK%
lambda_expr_opt_2 =  %MARK%
lambda_expr_opt_2 =  %MARK% capture_list
lambda_expr_opt_2 =  capture_list %MARK%
capture_list =  %MARK% capture_list_opt_1 ID capture_list_rep_3
capture_list =  capture_list_opt_1 %MARK% ID capture_list_rep_3
capture_list =  capture_list_opt_1 ID %MARK% capture_list_rep_3
capture_list =  capture_list_opt_1 ID capture_list_rep_3 %MARK%
capture_list_rep_3 =  %MARK%
capture_list_rep_3 =  %MARK% "," capture_list capture_list_rep_3
capture_list_rep_3 =  "," %MARK% capture_list capture_list_rep_3
capture_list_rep_3 =  "," capture_list %MARK% capture_list_rep_3
capture_list_rep_3 =  "," capture_list capture_list_rep_3 %MARK%
capture_list_opt_1 =  %MARK%
capture_list_opt_1 =  %MARK% "="
capture_list_opt_1 =  "=" %MARK%
argument_list =  %MARK% argument_list_opt_1 ID argument_list_opt_3 visit_expr argument_list_rep_5
argument_list =  argument_list_opt_1 %MARK% ID argument_list_opt_3 visit_expr argument_list_rep_5
argument_list =  argument_list_opt_1 ID %MARK% argument_list_opt_3 visit_expr argument_list_rep_5
argument_list =  argument_list_opt_1 ID argument_list_opt_3 %MARK% visit_expr argument_list_rep_5
argument_list =  argument_list_opt_1 ID argument_list_opt_3 visit_expr %MARK% argument_list_rep_5
argument_list =  argument_list_opt_1 ID argument_list_opt_3 visit_expr argument_list_rep_5 %MARK%
argument_list =  %MARK% ETC ID
argument_list =  ETC %MARK% ID
argument_list =  ETC ID %MARK%
argument_list_rep_5 =  %MARK%
argument_list_rep_5 =  %MARK% "," argument_list argument_list_rep_5
argument_list_rep_5 =  "," %MARK% argument_list argument_list_rep_5
argument_list_rep_5 =  "," argument_list %MARK% argument_list_rep_5
argument_list_rep_5 =  "," argument_list argument_list_rep_5 %MARK%
argument_list_opt_3 =  %MARK%
argument_list_opt_3 =  %MARK% ":"
argument_list_opt_3 =  ":" %MARK%
argument_list_opt_1 =  %MARK%
argument_list_opt_1 =  %MARK% "="
argument_list_opt_1 =  "=" %MARK%
lambda_body =  %MARK% "->" cond_expr
lambda_body =  "->" %MARK% cond_expr
lambda_body =  "->" cond_expr %MARK%
lambda_body =  %MARK% "{" lambda_body_rep_2 "}"
lambda_body =  "{" %MARK% lambda_body_rep_2 "}"
lambda_body =  "{" lambda_body_rep_2 %MARK% "}"
lambda_body =  "{" lambda_body_rep_2 "}" %MARK%
lambda_body_rep_2 =  %MARK%
lambda_body_rep_2 =  %MARK% statement lambda_body_rep_2_rep_2 lambda_body_rep_2
lambda_body_rep_2 =  statement %MARK% lambda_body_rep_2_rep_2 lambda_body_rep_2
lambda_body_rep_2 =  statement lambda_body_rep_2_rep_2 %MARK% lambda_body_rep_2
lambda_body_rep_2 =  statement lambda_body_rep_2_rep_2 lambda_body_rep_2 %MARK%
lambda_body_rep_2_rep_2 =  %MARK%
lambda_body_rep_2_rep_2 =  %MARK% ENDL lambda_body_rep_2_rep_2
lambda_body_rep_2_rep_2 =  ENDL %MARK% lambda_body_rep_2_rep_2
lambda_body_rep_2_rep_2 =  ENDL lambda_body_rep_2_rep_2 %MARK%
cond_expr =  %MARK% logic_expr cond_expr_opt_2
cond_expr =  logic_expr %MARK% cond_expr_opt_2
cond_expr =  logic_expr cond_expr_opt_2 %MARK%
cond_expr_opt_2 =  %MARK%
cond_expr_opt_2 =  %MARK% cond_postfix
cond_expr_opt_2 =  cond_postfix %MARK%
cond_postfix =  %MARK% ":" logic_or_expr
cond_postfix =  ":" %MARK% logic_or_expr
cond_postfix =  ":" logic_or_expr %MARK%
cond_postfix =  %MARK% "?" logic_or_expr ":" cond_expr
cond_postfix =  "?" %MARK% logic_or_expr ":" cond_expr
cond_postfix =  "?" logic_or_expr %MARK% ":" cond_expr
cond_postfix =  "?" logic_or_expr ":" %MARK% cond_expr
cond_postfix =  "?" logic_or_expr ":" cond_expr %MARK%
logic_or_expr =  %MARK% logic_and_expr logic_or_expr_opt_2 logic_or_expr
logic_or_expr =  logic_and_expr %MARK% logic_or_expr_opt_2 logic_or_expr
logic_or_expr =  logic_and_expr logic_or_expr_opt_2 %MARK% logic_or_expr
logic_or_expr =  logic_and_expr logic_or_expr_opt_2 logic_or_expr %MARK%
logic_or_expr_opt_2 =  %MARK%
logic_or_expr_opt_2 =  %MARK% "or"
logic_or_expr_opt_2 =  "or" %MARK%
logic_or_expr_opt_2 =  %MARK% "||"
logic_or_expr_opt_2 =  "||" %MARK%
logic_and_expr =  %MARK% equal_expr logic_and_expr_opt_2 logic_and_expr
logic_and_expr =  equal_expr %MARK% logic_and_expr_opt_2 logic_and_expr
logic_and_expr =  equal_expr logic_and_expr_opt_2 %MARK% logic_and_expr
logic_and_expr =  equal_expr logic_and_expr_opt_2 logic_and_expr %MARK%
logic_and_expr_opt_2 =  %MARK%
logic_and_expr_opt_2 =  %MARK% "and"
logic_and_expr_opt_2 =  "and" %MARK%
logic_and_expr_opt_2 =  %MARK% "&&"
logic_and_expr_opt_2 =  "&&" %MARK%
equal_expr =  %MARK% relat_expr equal_expr_opt_2
equal_expr =  relat_expr %MARK% equal_expr_opt_2
equal_expr =  relat_expr equal_expr_opt_2 %MARK%
equal_expr_opt_2 =  %MARK%
equal_expr_opt_2 =  %MARK% equal_expr_opt_2_decl_1 equal_expr
equal_expr_opt_2 =  equal_expr_opt_2_decl_1 %MARK% equal_expr
equal_expr_opt_2 =  equal_expr_opt_2_decl_1 equal_expr %MARK%
equal_expr_opt_2_decl_1 =  %MARK% "!="
equal_expr_opt_2_decl_1 =  "!=" %MARK%
equal_expr_opt_2_decl_1 =  %MARK% "=="
equal_expr_opt_2_decl_1 =  "==" %MARK%
relat_expr =  %MARK% add_expr relat_expr_opt_2
relat_expr =  add_expr %MARK% relat_expr_opt_2
relat_expr =  add_expr relat_expr_opt_2 %MARK%
relat_expr_opt_2 =  %MARK%
relat_expr_opt_2 =  %MARK% relat_expr_opt_2_decl_1 relat_expr
relat_expr_opt_2 =  relat_expr_opt_2_decl_1 %MARK% relat_expr
relat_expr_opt_2 =  relat_expr_opt_2_decl_1 relat_expr %MARK%
relat_expr_opt_2_decl_1 =  %MARK% "<="
relat_expr_opt_2_decl_1 =  "<=" %MARK%
relat_expr_opt_2_decl_1 =  %MARK% ">="
relat_expr_opt_2_decl_1 =  ">=" %MARK%
relat_expr_opt_2_decl_1 =  %MARK% "<"
relat_expr_opt_2_decl_1 =  "<" %MARK%
relat_expr_opt_2_decl_1 =  %MARK% ">"
relat_expr_opt_2_decl_1 =  ">" %MARK%
add_expr =  %MARK% mul_expr add_expr_opt_2
add_expr =  mul_expr %MARK% add_expr_opt_2
add_expr =  mul_expr add_expr_opt_2 %MARK%
add_expr_opt_2 =  %MARK%
add_expr_opt_2 =  %MARK% add_expr_opt_2_decl_1 add_expr
add_expr_opt_2 =  add_expr_opt_2_decl_1 %MARK% add_expr
add_expr_opt_2 =  add_expr_opt_2_decl_1 add_expr %MARK%
add_expr_opt_2_decl_1 =  %MARK% "-"
add_expr_opt_2_decl_1 =  "-" %MARK%
add_expr_opt_2_decl_1 =  %MARK% "+"
add_expr_opt_2_decl_1 =  "+" %MARK%
mul_expr =  %MARK% unary_expr mul_expr_decl_2
mul_expr =  unary_expr %MARK% mul_expr_decl_2
mul_expr =  unary_expr mul_expr_decl_2 %MARK%
mul_expr_decl_2 =  %MARK% ENDL
mul_expr_decl_2 =  ENDL %MARK%
mul_expr_decl_2 =  %MARK% mul_expr_decl_2_opt_1
mul_expr_decl_2 =  mul_expr_decl_2_opt_1 %MARK%
mul_expr_decl_2_opt_1 =  %MARK%
mul_expr_decl_2_opt_1 =  %MARK% mul_expr_decl_2_opt_1_decl_1 mul_expr
mul_expr_decl_2_opt_1 =  mul_expr_decl_2_opt_1_decl_1 %MARK% mul_expr
mul_expr_decl_2_opt_1 =  mul_expr_decl_2_opt_1_decl_1 mul_expr %MARK%
mul_expr_decl_2_opt_1_decl_1 =  %MARK% "^"
mul_expr_decl_2_opt_1_decl_1 =  "^" %MARK%
mul_expr_decl_2_opt_1_decl_1 =  %MARK% "%"
mul_expr_decl_2_opt_1_decl_1 =  "%" %MARK%
mul_expr_decl_2_opt_1_decl_1 =  %MARK% "/"
mul_expr_decl_2_opt_1_decl_1 =  "/" %MARK%
unary_expr =  %MARK% unary_expr_decl_1
unary_expr =  unary_expr_decl_1 %MARK%
unary_expr_decl_1 =  %MARK% prim_expr unary_expr_decl_1_decl_2
unary_expr_decl_1 =  prim_expr %MARK% unary_expr_decl_1_decl_2
unary_expr_decl_1 =  prim_expr unary_expr_decl_1_decl_2 %MARK%
unary_expr_decl_1 =  %MARK% unary_expr_decl_1_decl_1 unary_expr unary_expr_decl_1_opt_3
unary_expr_decl_1 =  unary_expr_decl_1_decl_1 %MARK% unary_expr unary_expr_decl_1_opt_3
unary_expr_decl_1 =  unary_expr_decl_1_decl_1 unary_expr %MARK% unary_expr_decl_1_opt_3
unary_expr_decl_1 =  unary_expr_decl_1_decl_1 unary_expr unary_expr_decl_1_opt_3 %MARK%
unary_expr_decl_1 =  %MARK% unary_op unary_expr
unary_expr_decl_1 =  unary_op %MARK% unary_expr
unary_expr_decl_1 =  unary_op unary_expr %MARK%
unary_expr_decl_1_decl_2 =  %MARK% ENDL
unary_expr_decl_1_decl_2 =  ENDL %MARK%
unary_expr_decl_1_decl_2 =  %MARK% unary_expr_decl_1_decl_2_opt_1
unary_expr_decl_1_decl_2 =  unary_expr_decl_1_decl_2_opt_1 %MARK%
unary_expr_decl_1_decl_2_opt_1 =  %MARK%
unary_expr_decl_1_decl_2_opt_1 =  %MARK% postifx
unary_expr_decl_1_decl_2_opt_1 =  postifx %MARK%
unary_expr_decl_1_opt_3 =  %MARK%
unary_expr_decl_1_opt_3 =  %MARK% array
unary_expr_decl_1_opt_3 =  array %MARK%
unary_expr_decl_1_decl_1 =  %MARK% "gcnew"
unary_expr_decl_1_decl_1 =  "gcnew" %MARK%
unary_expr_decl_1_decl_1 =  %MARK% "new"
unary_expr_decl_1_decl_1 =  "new" %MARK%
unary_op =  %MARK% "!"
unary_op =  "!" %MARK%
unary_op =  %MARK% "-"
unary_op =  "-" %MARK%
unary_op =  %MARK% "&"
unary_op =  "&" %MARK%
unary_op =  %MARK% "*"
unary_op =  "*" %MARK%
unary_op =  %MARK% "--"
unary_op =  "--" %MARK%
unary_op =  %MARK% "++"
unary_op =  "++" %MARK%
unary_op =  %MARK% "typeid"
unary_op =  "typeid" %MARK%
postfix_expr =  %MARK% constant
postfix_expr =  constant %MARK%
postfix_expr =  %MARK% visit_expr
postfix_expr =  visit_expr %MARK%
visit_expr =  %MARK% object visit_expr_opt_2 visit_expr
visit_expr =  object %MARK% visit_expr_opt_2 visit_expr
visit_expr =  object visit_expr_opt_2 %MARK% visit_expr
visit_expr =  object visit_expr_opt_2 visit_expr %MARK%
visit_expr_opt_2 =  %MARK%
visit_expr_opt_2 =  %MARK% "."
visit_expr_opt_2 =  "." %MARK%
visit_expr_opt_2 =  %MARK% "->"
visit_expr_opt_2 =  "->" %MARK%
object =  %MARK% object_decl_1
object =  object_decl_1 %MARK%
object_decl_1 =  %MARK% CHAR
object_decl_1 =  CHAR %MARK%
object_decl_1 =  %MARK% element
object_decl_1 =  element %MARK%
object_decl_1 =  %MARK% "global"
object_decl_1 =  "global" %MARK%
object_decl_1 =  %MARK% "local"
object_decl_1 =  "local" %MARK%
object_decl_1 =  %MARK% str object_decl_1_opt_2
object_decl_1 =  str %MARK% object_decl_1_opt_2
object_decl_1 =  str object_decl_1_opt_2 %MARK%
object_decl_1 =  %MARK% array object_decl_1_opt_2
object_decl_1 =  array %MARK% object_decl_1_opt_2
object_decl_1 =  array object_decl_1_opt_2 %MARK%
object_decl_1_opt_2 =  %MARK%
object_decl_1_opt_2 =  %MARK% index
object_decl_1_opt_2 =  index %MARK%
object_decl_1_opt_2 =  %MARK%
object_decl_1_opt_2 =  %MARK% index
object_decl_1_opt_2 =  index %MARK%
element =  %MARK% element_decl_1 element_decl_2
element =  element_decl_1 %MARK% element_decl_2
element =  element_decl_1 element_decl_2 %MARK%
element_decl_2 =  %MARK% element_decl_2_rep_1
element_decl_2 =  element_decl_2_rep_1 %MARK%
element_decl_2 =  %MARK% ENDL
element_decl_2 =  ENDL %MARK%
element_decl_2_rep_1 =  %MARK%
element_decl_2_rep_1 =  %MARK% index element_decl_2_rep_1
element_decl_2_rep_1 =  index %MARK% element_decl_2_rep_1
element_decl_2_rep_1 =  index element_decl_2_rep_1 %MARK%
element_decl_2_rep_1 =  %MARK% fcall element_decl_2_rep_1
element_decl_2_rep_1 =  fcall %MARK% element_decl_2_rep_1
element_decl_2_rep_1 =  fcall element_decl_2_rep_1 %MARK%
element_decl_1 =  %MARK% "(" single_expr ")"
element_decl_1 =  "(" %MARK% single_expr ")"
element_decl_1 =  "(" single_expr %MARK% ")"
element_decl_1 =  "(" single_expr ")" %MARK%
element_decl_1 =  %MARK% ID
element_decl_1 =  ID %MARK%
constant =  %MARK% "false"
constant =  "false" %MARK%
constant =  %MARK% "true"
constant =  "true" %MARK%
constant =  %MARK% "null"
constant =  "null" %MARK%
constant =  %MARK% NUM
constant =  NUM %MARK%
array =  %MARK% "{" array_opt_2 "}"
array =  "{" %MARK% array_opt_2 "}"
array =  "{" array_opt_2 %MARK% "}"
array =  "{" array_opt_2 "}" %MARK%
array_opt_2 =  %MARK%
array_opt_2 =  %MARK% expr
array_opt_2 =  expr %MARK%
fcall =  %MARK% "(" fcall_opt_2 ")"
fcall =  "(" %MARK% fcall_opt_2 ")"
fcall =  "(" fcall_opt_2 %MARK% ")"
fcall =  "(" fcall_opt_2 ")" %MARK%
fcall_opt_2 =  %MARK%
fcall_opt_2 =  %MARK% expr
fcall_opt_2 =  expr %MARK%
index =  %MARK% "[" basic_expr "]"
index =  "[" %MARK% basic_expr "]"
index =  "[" basic_expr %MARK% "]"
index =  "[" basic_expr "]" %MARK%



########
DNF TERM
########
%start%  :  %MARK%  begin  
 index is: 0, source_index: 0, before: %NULL%, after: begin
%start%  :  begin  %MARK%  
 index is: 1, source_index: 0, before: begin, after: %NULL%
begin  :  %MARK%  stmts  
 index is: 2, source_index: 1, before: %NULL%, after: stmts
begin  :  stmts  %MARK%  
 index is: 3, source_index: 1, before: stmts, after: %NULL%
ignore  :  %MARK%  ignore_rep_1  
 index is: 4, source_index: 2, before: %NULL%, after: ignore_rep_1
ignore  :  ignore_rep_1  %MARK%  
 index is: 5, source_index: 2, before: ignore_rep_1, after: %NULL%
ignore_rep_1  :  %MARK%  
 index is: 6, source_index: 3, before: %NULL%, after: %NULL%
ignore_rep_1  :  %MARK%  ENDL  ignore_rep_1  
 index is: 7, source_index: 4, before: %NULL%, after: ENDL
ignore_rep_1  :  ENDL  %MARK%  ignore_rep_1  
 index is: 8, source_index: 4, before: ENDL, after: ignore_rep_1
ignore_rep_1  :  ENDL  ignore_rep_1  %MARK%  
 index is: 9, source_index: 4, before: ignore_rep_1, after: %NULL%
endline  :  %MARK%  ";"  
 index is: 10, source_index: 5, before: %NULL%, after: ";"
endline  :  ";"  %MARK%  
 index is: 11, source_index: 5, before: ";", after: %NULL%
endline  :  %MARK%  ENDL  
 index is: 12, source_index: 6, before: %NULL%, after: ENDL
endline  :  ENDL  %MARK%  
 index is: 13, source_index: 6, before: ENDL, after: %NULL%
stmts  :  %MARK%  stmts_rep_1  
 index is: 14, source_index: 7, before: %NULL%, after: stmts_rep_1
stmts  :  stmts_rep_1  %MARK%  
 index is: 15, source_index: 7, before: stmts_rep_1, after: %NULL%
stmts_rep_1  :  %MARK%  
 index is: 16, source_index: 8, before: %NULL%, after: %NULL%
stmts_rep_1  :  %MARK%  statements  stmts_rep_1_rep_2  stmts_rep_1  
 index is: 17, source_index: 9, before: %NULL%, after: statements
stmts_rep_1  :  statements  %MARK%  stmts_rep_1_rep_2  stmts_rep_1  
 index is: 18, source_index: 9, before: statements, after: stmts_rep_1_rep_2
stmts_rep_1  :  statements  stmts_rep_1_rep_2  %MARK%  stmts_rep_1  
 index is: 19, source_index: 9, before: stmts_rep_1_rep_2, after: stmts_rep_1
stmts_rep_1  :  statements  stmts_rep_1_rep_2  stmts_rep_1  %MARK%  
 index is: 20, source_index: 9, before: stmts_rep_1, after: %NULL%
stmts_rep_1_rep_2  :  %MARK%  
 index is: 21, source_index: 10, before: %NULL%, after: %NULL%
stmts_rep_1_rep_2  :  %MARK%  ENDL  stmts_rep_1_rep_2  
 index is: 22, source_index: 11, before: %NULL%, after: ENDL
stmts_rep_1_rep_2  :  ENDL  %MARK%  stmts_rep_1_rep_2  
 index is: 23, source_index: 11, before: ENDL, after: stmts_rep_1_rep_2
stmts_rep_1_rep_2  :  ENDL  stmts_rep_1_rep_2  %MARK%  
 index is: 24, source_index: 11, before: stmts_rep_1_rep_2, after: %NULL%
decl_stmts  :  %MARK%  decl_stmts_rep_1  
 index is: 25, source_index: 12, before: %NULL%, after: decl_stmts_rep_1
decl_stmts  :  decl_stmts_rep_1  %MARK%  
 index is: 26, source_index: 12, before: decl_stmts_rep_1, after: %NULL%
decl_stmts_rep_1  :  %MARK%  
 index is: 27, source_index: 13, before: %NULL%, after: %NULL%
decl_stmts_rep_1  :  %MARK%  declaration  decl_stmts_rep_1_rep_2  decl_stmts_rep_1  
 index is: 28, source_index: 14, before: %NULL%, after: declaration
decl_stmts_rep_1  :  declaration  %MARK%  decl_stmts_rep_1_rep_2  decl_stmts_rep_1  
 index is: 29, source_index: 14, before: declaration, after: decl_stmts_rep_1_rep_2
decl_stmts_rep_1  :  declaration  decl_stmts_rep_1_rep_2  %MARK%  decl_stmts_rep_1  
 index is: 30, source_index: 14, before: decl_stmts_rep_1_rep_2, after: decl_stmts_rep_1
decl_stmts_rep_1  :  declaration  decl_stmts_rep_1_rep_2  decl_stmts_rep_1  %MARK%  
 index is: 31, source_index: 14, before: decl_stmts_rep_1, after: %NULL%
decl_stmts_rep_1_rep_2  :  %MARK%  
 index is: 32, source_index: 15, before: %NULL%, after: %NULL%
decl_stmts_rep_1_rep_2  :  %MARK%  ENDL  decl_stmts_rep_1_rep_2  
 index is: 33, source_index: 16, before: %NULL%, after: ENDL
decl_stmts_rep_1_rep_2  :  ENDL  %MARK%  decl_stmts_rep_1_rep_2  
 index is: 34, source_index: 16, before: ENDL, after: decl_stmts_rep_1_rep_2
decl_stmts_rep_1_rep_2  :  ENDL  decl_stmts_rep_1_rep_2  %MARK%  
 index is: 35, source_index: 16, before: decl_stmts_rep_1_rep_2, after: %NULL%
endblock  :  %MARK%  catch_stmt  
 index is: 36, source_index: 17, before: %NULL%, after: catch_stmt
endblock  :  catch_stmt  %MARK%  
 index is: 37, source_index: 17, before: catch_stmt, after: %NULL%
endblock  :  %MARK%  until_stmt  
 index is: 38, source_index: 18, before: %NULL%, after: until_stmt
endblock  :  until_stmt  %MARK%  
 index is: 39, source_index: 18, before: until_stmt, after: %NULL%
endblock  :  %MARK%  else_stmt  
 index is: 40, source_index: 19, before: %NULL%, after: else_stmt
endblock  :  else_stmt  %MARK%  
 index is: 41, source_index: 19, before: else_stmt, after: %NULL%
endblock  :  %MARK%  end_stmt  
 index is: 42, source_index: 20, before: %NULL%, after: end_stmt
endblock  :  end_stmt  %MARK%  
 index is: 43, source_index: 20, before: end_stmt, after: %NULL%
statement  :  %MARK%  expr_stmt  
 index is: 44, source_index: 21, before: %NULL%, after: expr_stmt
statement  :  expr_stmt  %MARK%  
 index is: 45, source_index: 21, before: expr_stmt, after: %NULL%
statement  :  %MARK%  class_stmt  
 index is: 46, source_index: 22, before: %NULL%, after: class_stmt
statement  :  class_stmt  %MARK%  
 index is: 47, source_index: 22, before: class_stmt, after: %NULL%
statement  :  %MARK%  throw_stmt  
 index is: 48, source_index: 23, before: %NULL%, after: throw_stmt
statement  :  throw_stmt  %MARK%  
 index is: 49, source_index: 23, before: throw_stmt, after: %NULL%
statement  :  %MARK%  try_stmt  
 index is: 50, source_index: 24, before: %NULL%, after: try_stmt
statement  :  try_stmt  %MARK%  
 index is: 51, source_index: 24, before: try_stmt, after: %NULL%
statement  :  %MARK%  return_stmt  
 index is: 52, source_index: 25, before: %NULL%, after: return_stmt
statement  :  return_stmt  %MARK%  
 index is: 53, source_index: 25, before: return_stmt, after: %NULL%
statement  :  %MARK%  function_stmt  
 index is: 54, source_index: 26, before: %NULL%, after: function_stmt
statement  :  function_stmt  %MARK%  
 index is: 55, source_index: 26, before: function_stmt, after: %NULL%
statement  :  %MARK%  control_stmt  
 index is: 56, source_index: 27, before: %NULL%, after: control_stmt
statement  :  control_stmt  %MARK%  
 index is: 57, source_index: 27, before: control_stmt, after: %NULL%
statement  :  %MARK%  foreach_stmt  
 index is: 58, source_index: 28, before: %NULL%, after: foreach_stmt
statement  :  foreach_stmt  %MARK%  
 index is: 59, source_index: 28, before: foreach_stmt, after: %NULL%
statement  :  %MARK%  for_stmt  
 index is: 60, source_index: 29, before: %NULL%, after: for_stmt
statement  :  for_stmt  %MARK%  
 index is: 61, source_index: 29, before: for_stmt, after: %NULL%
statement  :  %MARK%  loop_stmt  
 index is: 62, source_index: 30, before: %NULL%, after: loop_stmt
statement  :  loop_stmt  %MARK%  
 index is: 63, source_index: 30, before: loop_stmt, after: %NULL%
statement  :  %MARK%  while_stmt  
 index is: 64, source_index: 31, before: %NULL%, after: while_stmt
statement  :  while_stmt  %MARK%  
 index is: 65, source_index: 31, before: while_stmt, after: %NULL%
statement  :  %MARK%  switch_stmt  
 index is: 66, source_index: 32, before: %NULL%, after: switch_stmt
statement  :  switch_stmt  %MARK%  
 index is: 67, source_index: 32, before: switch_stmt, after: %NULL%
statement  :  %MARK%  if_stmt  
 index is: 68, source_index: 33, before: %NULL%, after: if_stmt
statement  :  if_stmt  %MARK%  
 index is: 69, source_index: 33, before: if_stmt, after: %NULL%
statement  :  %MARK%  using_stmt  
 index is: 70, source_index: 34, before: %NULL%, after: using_stmt
statement  :  using_stmt  %MARK%  
 index is: 71, source_index: 34, before: using_stmt, after: %NULL%
statement  :  %MARK%  namespace_stmt  
 index is: 72, source_index: 35, before: %NULL%, after: namespace_stmt
statement  :  namespace_stmt  %MARK%  
 index is: 73, source_index: 35, before: namespace_stmt, after: %NULL%
statement  :  %MARK%  block_stmt  
 index is: 74, source_index: 36, before: %NULL%, after: block_stmt
statement  :  block_stmt  %MARK%  
 index is: 75, source_index: 36, before: block_stmt, after: %NULL%
statement  :  %MARK%  var_stmt  
 index is: 76, source_index: 37, before: %NULL%, after: var_stmt
statement  :  var_stmt  %MARK%  
 index is: 77, source_index: 37, before: var_stmt, after: %NULL%
statement  :  %MARK%  import_stmt  
 index is: 78, source_index: 38, before: %NULL%, after: import_stmt
statement  :  import_stmt  %MARK%  
 index is: 79, source_index: 38, before: import_stmt, after: %NULL%
statement  :  %MARK%  package_stmt  
 index is: 80, source_index: 39, before: %NULL%, after: package_stmt
statement  :  package_stmt  %MARK%  
 index is: 81, source_index: 39, before: package_stmt, after: %NULL%
statement  :  %MARK%  prep_stmt  
 index is: 82, source_index: 40, before: %NULL%, after: prep_stmt
statement  :  prep_stmt  %MARK%  
 index is: 83, source_index: 40, before: prep_stmt, after: %NULL%
declaration  :  %MARK%  class_stmt  
 index is: 84, source_index: 41, before: %NULL%, after: class_stmt
declaration  :  class_stmt  %MARK%  
 index is: 85, source_index: 41, before: class_stmt, after: %NULL%
declaration  :  %MARK%  function_stmt  
 index is: 86, source_index: 42, before: %NULL%, after: function_stmt
declaration  :  function_stmt  %MARK%  
 index is: 87, source_index: 42, before: function_stmt, after: %NULL%
declaration  :  %MARK%  using_stmt  
 index is: 88, source_index: 43, before: %NULL%, after: using_stmt
declaration  :  using_stmt  %MARK%  
 index is: 89, source_index: 43, before: using_stmt, after: %NULL%
declaration  :  %MARK%  var_stmt  
 index is: 90, source_index: 44, before: %NULL%, after: var_stmt
declaration  :  var_stmt  %MARK%  
 index is: 91, source_index: 44, before: var_stmt, after: %NULL%
declaration  :  %MARK%  namespace_stmt  
 index is: 92, source_index: 45, before: %NULL%, after: namespace_stmt
declaration  :  namespace_stmt  %MARK%  
 index is: 93, source_index: 45, before: namespace_stmt, after: %NULL%
declaration  :  %MARK%  prep_stmt  
 index is: 94, source_index: 46, before: %NULL%, after: prep_stmt
declaration  :  prep_stmt  %MARK%  
 index is: 95, source_index: 46, before: prep_stmt, after: %NULL%
prep_stmt  :  %MARK%  PREP  ENDL  
 index is: 96, source_index: 47, before: %NULL%, after: PREP
prep_stmt  :  PREP  %MARK%  ENDL  
 index is: 97, source_index: 47, before: PREP, after: ENDL
prep_stmt  :  PREP  ENDL  %MARK%  
 index is: 98, source_index: 47, before: ENDL, after: %NULL%
package_stmt  :  %MARK%  "package"  ID  endline  
 index is: 99, source_index: 48, before: %NULL%, after: "package"
package_stmt  :  "package"  %MARK%  ID  endline  
 index is: 100, source_index: 48, before: "package", after: ID
package_stmt  :  "package"  ID  %MARK%  endline  
 index is: 101, source_index: 48, before: ID, after: endline
package_stmt  :  "package"  ID  endline  %MARK%  
 index is: 102, source_index: 48, before: endline, after: %NULL%
import_stmt  :  %MARK%  "import"  import_list  endline  
 index is: 103, source_index: 49, before: %NULL%, after: "import"
import_stmt  :  "import"  %MARK%  import_list  endline  
 index is: 104, source_index: 49, before: "import", after: import_list
import_stmt  :  "import"  import_list  %MARK%  endline  
 index is: 105, source_index: 49, before: import_list, after: endline
import_stmt  :  "import"  import_list  endline  %MARK%  
 index is: 106, source_index: 49, before: endline, after: %NULL%
var_def  :  %MARK%  var_list  
 index is: 107, source_index: 50, before: %NULL%, after: var_list
var_def  :  var_list  %MARK%  
 index is: 108, source_index: 50, before: var_list, after: %NULL%
var_def  :  %MARK%  var_bind  "="  basic_expr  
 index is: 109, source_index: 51, before: %NULL%, after: var_bind
var_def  :  var_bind  %MARK%  "="  basic_expr  
 index is: 110, source_index: 51, before: var_bind, after: "="
var_def  :  var_bind  "="  %MARK%  basic_expr  
 index is: 111, source_index: 51, before: "=", after: basic_expr
var_def  :  var_bind  "="  basic_expr  %MARK%  
 index is: 112, source_index: 51, before: basic_expr, after: %NULL%
var_stmt  :  %MARK%  var_stmt_decl_1  var_def  endline  
 index is: 113, source_index: 52, before: %NULL%, after: var_stmt_decl_1
var_stmt  :  var_stmt_decl_1  %MARK%  var_def  endline  
 index is: 114, source_index: 52, before: var_stmt_decl_1, after: var_def
var_stmt  :  var_stmt_decl_1  var_def  %MARK%  endline  
 index is: 115, source_index: 52, before: var_def, after: endline
var_stmt  :  var_stmt_decl_1  var_def  endline  %MARK%  
 index is: 116, source_index: 52, before: endline, after: %NULL%
var_stmt_decl_1  :  %MARK%  "constant"  
 index is: 117, source_index: 53, before: %NULL%, after: "constant"
var_stmt_decl_1  :  "constant"  %MARK%  
 index is: 118, source_index: 53, before: "constant", after: %NULL%
var_stmt_decl_1  :  %MARK%  "link"  
 index is: 119, source_index: 54, before: %NULL%, after: "link"
var_stmt_decl_1  :  "link"  %MARK%  
 index is: 120, source_index: 54, before: "link", after: %NULL%
var_stmt_decl_1  :  %MARK%  "var"  
 index is: 121, source_index: 55, before: %NULL%, after: "var"
var_stmt_decl_1  :  "var"  %MARK%  
 index is: 122, source_index: 55, before: "var", after: %NULL%
var_bind  :  %MARK%  "("  var_bind_list  var_bind_rep_3  ")"  
 index is: 123, source_index: 56, before: %NULL%, after: "("
var_bind  :  "("  %MARK%  var_bind_list  var_bind_rep_3  ")"  
 index is: 124, source_index: 56, before: "(", after: var_bind_list
var_bind  :  "("  var_bind_list  %MARK%  var_bind_rep_3  ")"  
 index is: 125, source_index: 56, before: var_bind_list, after: var_bind_rep_3
var_bind  :  "("  var_bind_list  var_bind_rep_3  %MARK%  ")"  
 index is: 126, source_index: 56, before: var_bind_rep_3, after: ")"
var_bind  :  "("  var_bind_list  var_bind_rep_3  ")"  %MARK%  
 index is: 127, source_index: 56, before: ")", after: %NULL%
var_bind_rep_3  :  %MARK%  
 index is: 128, source_index: 57, before: %NULL%, after: %NULL%
var_bind_rep_3  :  %MARK%  ","  var_bind_list  var_bind_rep_3  
 index is: 129, source_index: 58, before: %NULL%, after: ","
var_bind_rep_3  :  ","  %MARK%  var_bind_list  var_bind_rep_3  
 index is: 130, source_index: 58, before: ",", after: var_bind_list
var_bind_rep_3  :  ","  var_bind_list  %MARK%  var_bind_rep_3  
 index is: 131, source_index: 58, before: var_bind_list, after: var_bind_rep_3
var_bind_rep_3  :  ","  var_bind_list  var_bind_rep_3  %MARK%  
 index is: 132, source_index: 58, before: var_bind_rep_3, after: %NULL%
var_bind_list  :  %MARK%  var_bind  
 index is: 133, source_index: 59, before: %NULL%, after: var_bind
var_bind_list  :  var_bind  %MARK%  
 index is: 134, source_index: 59, before: var_bind, after: %NULL%
var_bind_list  :  %MARK%  ETC  
 index is: 135, source_index: 60, before: %NULL%, after: ETC
var_bind_list  :  ETC  %MARK%  
 index is: 136, source_index: 60, before: ETC, after: %NULL%
var_bind_list  :  %MARK%  ID  
 index is: 137, source_index: 61, before: %NULL%, after: ID
var_bind_list  :  ID  %MARK%  
 index is: 138, source_index: 61, before: ID, after: %NULL%
var_list  :  %MARK%  ID  "="  single_expr  var_list_opt_4  
 index is: 139, source_index: 62, before: %NULL%, after: ID
var_list  :  ID  %MARK%  "="  single_expr  var_list_opt_4  
 index is: 140, source_index: 62, before: ID, after: "="
var_list  :  ID  "="  %MARK%  single_expr  var_list_opt_4  
 index is: 141, source_index: 62, before: "=", after: single_expr
var_list  :  ID  "="  single_expr  %MARK%  var_list_opt_4  
 index is: 142, source_index: 62, before: single_expr, after: var_list_opt_4
var_list  :  ID  "="  single_expr  var_list_opt_4  %MARK%  
 index is: 143, source_index: 62, before: var_list_opt_4, after: %NULL%
var_list_opt_4  :  %MARK%  
 index is: 144, source_index: 63, before: %NULL%, after: %NULL%
var_list_opt_4  :  %MARK%  ","  var_list  
 index is: 145, source_index: 64, before: %NULL%, after: ","
var_list_opt_4  :  ","  %MARK%  var_list  
 index is: 146, source_index: 64, before: ",", after: var_list
var_list_opt_4  :  ","  var_list  %MARK%  
 index is: 147, source_index: 64, before: var_list, after: %NULL%
block_stmt  :  %MARK%  "block"  ENDL  stmts  "end"  ENDL  
 index is: 148, source_index: 65, before: %NULL%, after: "block"
block_stmt  :  "block"  %MARK%  ENDL  stmts  "end"  ENDL  
 index is: 149, source_index: 65, before: "block", after: ENDL
block_stmt  :  "block"  ENDL  %MARK%  stmts  "end"  ENDL  
 index is: 150, source_index: 65, before: ENDL, after: stmts
block_stmt  :  "block"  ENDL  stmts  %MARK%  "end"  ENDL  
 index is: 151, source_index: 65, before: stmts, after: "end"
block_stmt  :  "block"  ENDL  stmts  "end"  %MARK%  ENDL  
 index is: 152, source_index: 65, before: "end", after: ENDL
block_stmt  :  "block"  ENDL  stmts  "end"  ENDL  %MARK%  
 index is: 153, source_index: 65, before: ENDL, after: %NULL%
namespace_stmt  :  %MARK%  "namespace"  ID  ENDL  decl_stmts  "end"  ENDL  
 index is: 154, source_index: 66, before: %NULL%, after: "namespace"
namespace_stmt  :  "namespace"  %MARK%  ID  ENDL  decl_stmts  "end"  ENDL  
 index is: 155, source_index: 66, before: "namespace", after: ID
namespace_stmt  :  "namespace"  ID  %MARK%  ENDL  decl_stmts  "end"  ENDL  
 index is: 156, source_index: 66, before: ID, after: ENDL
namespace_stmt  :  "namespace"  ID  ENDL  %MARK%  decl_stmts  "end"  ENDL  
 index is: 157, source_index: 66, before: ENDL, after: decl_stmts
namespace_stmt  :  "namespace"  ID  ENDL  decl_stmts  %MARK%  "end"  ENDL  
 index is: 158, source_index: 66, before: decl_stmts, after: "end"
namespace_stmt  :  "namespace"  ID  ENDL  decl_stmts  "end"  %MARK%  ENDL  
 index is: 159, source_index: 66, before: "end", after: ENDL
namespace_stmt  :  "namespace"  ID  ENDL  decl_stmts  "end"  ENDL  %MARK%  
 index is: 160, source_index: 66, before: ENDL, after: %NULL%
using_stmt  :  %MARK%  "using"  using_list  endline  
 index is: 161, source_index: 67, before: %NULL%, after: "using"
using_stmt  :  "using"  %MARK%  using_list  endline  
 index is: 162, source_index: 67, before: "using", after: using_list
using_stmt  :  "using"  using_list  %MARK%  endline  
 index is: 163, source_index: 67, before: using_list, after: endline
using_stmt  :  "using"  using_list  endline  %MARK%  
 index is: 164, source_index: 67, before: endline, after: %NULL%
using_list  :  %MARK%  module_list  using_list_opt_2  
 index is: 165, source_index: 68, before: %NULL%, after: module_list
using_list  :  module_list  %MARK%  using_list_opt_2  
 index is: 166, source_index: 68, before: module_list, after: using_list_opt_2
using_list  :  module_list  using_list_opt_2  %MARK%  
 index is: 167, source_index: 68, before: using_list_opt_2, after: %NULL%
using_list_opt_2  :  %MARK%  
 index is: 168, source_index: 69, before: %NULL%, after: %NULL%
using_list_opt_2  :  %MARK%  ","  using_list  
 index is: 169, source_index: 70, before: %NULL%, after: ","
using_list_opt_2  :  ","  %MARK%  using_list  
 index is: 170, source_index: 70, before: ",", after: using_list
using_list_opt_2  :  ","  using_list  %MARK%  
 index is: 171, source_index: 70, before: using_list, after: %NULL%
if_stmt  :  %MARK%  "if"  basic_expr  ENDL  stmts  if_stmt_rep_5  
 index is: 172, source_index: 71, before: %NULL%, after: "if"
if_stmt  :  "if"  %MARK%  basic_expr  ENDL  stmts  if_stmt_rep_5  
 index is: 173, source_index: 71, before: "if", after: basic_expr
if_stmt  :  "if"  basic_expr  %MARK%  ENDL  stmts  if_stmt_rep_5  
 index is: 174, source_index: 71, before: basic_expr, after: ENDL
if_stmt  :  "if"  basic_expr  ENDL  %MARK%  stmts  if_stmt_rep_5  
 index is: 175, source_index: 71, before: ENDL, after: stmts
if_stmt  :  "if"  basic_expr  ENDL  stmts  %MARK%  if_stmt_rep_5  
 index is: 176, source_index: 71, before: stmts, after: if_stmt_rep_5
if_stmt  :  "if"  basic_expr  ENDL  stmts  if_stmt_rep_5  %MARK%  
 index is: 177, source_index: 71, before: if_stmt_rep_5, after: %NULL%
if_stmt_rep_5  :  %MARK%  
 index is: 178, source_index: 72, before: %NULL%, after: %NULL%
if_stmt_rep_5  :  %MARK%  else_stmt  stmts  "end"  ENDL  if_stmt_rep_5  
 index is: 179, source_index: 73, before: %NULL%, after: else_stmt
if_stmt_rep_5  :  else_stmt  %MARK%  stmts  "end"  ENDL  if_stmt_rep_5  
 index is: 180, source_index: 73, before: else_stmt, after: stmts
if_stmt_rep_5  :  else_stmt  stmts  %MARK%  "end"  ENDL  if_stmt_rep_5  
 index is: 181, source_index: 73, before: stmts, after: "end"
if_stmt_rep_5  :  else_stmt  stmts  "end"  %MARK%  ENDL  if_stmt_rep_5  
 index is: 182, source_index: 73, before: "end", after: ENDL
if_stmt_rep_5  :  else_stmt  stmts  "end"  ENDL  %MARK%  if_stmt_rep_5  
 index is: 183, source_index: 73, before: ENDL, after: if_stmt_rep_5
if_stmt_rep_5  :  else_stmt  stmts  "end"  ENDL  if_stmt_rep_5  %MARK%  
 index is: 184, source_index: 73, before: if_stmt_rep_5, after: %NULL%
else_stmt  :  %MARK%  "else"  else_stmt_opt_2  ENDL  basic_expr  ENDL  
 index is: 185, source_index: 74, before: %NULL%, after: "else"
else_stmt  :  "else"  %MARK%  else_stmt_opt_2  ENDL  basic_expr  ENDL  
 index is: 186, source_index: 74, before: "else", after: else_stmt_opt_2
else_stmt  :  "else"  else_stmt_opt_2  %MARK%  ENDL  basic_expr  ENDL  
 index is: 187, source_index: 74, before: else_stmt_opt_2, after: ENDL
else_stmt  :  "else"  else_stmt_opt_2  ENDL  %MARK%  basic_expr  ENDL  
 index is: 188, source_index: 74, before: ENDL, after: basic_expr
else_stmt  :  "else"  else_stmt_opt_2  ENDL  basic_expr  %MARK%  ENDL  
 index is: 189, source_index: 74, before: basic_expr, after: ENDL
else_stmt  :  "else"  else_stmt_opt_2  ENDL  basic_expr  ENDL  %MARK%  
 index is: 190, source_index: 74, before: ENDL, after: %NULL%
else_stmt_opt_2  :  %MARK%  
 index is: 191, source_index: 75, before: %NULL%, after: %NULL%
else_stmt_opt_2  :  %MARK%  "if"  
 index is: 192, source_index: 76, before: %NULL%, after: "if"
else_stmt_opt_2  :  "if"  %MARK%  
 index is: 193, source_index: 76, before: "if", after: %NULL%
switch_stmt  :  %MARK%  "switch"  basic_expr  ENDL  switch_stmts  "end"  ENDL  
 index is: 194, source_index: 77, before: %NULL%, after: "switch"
switch_stmt  :  "switch"  %MARK%  basic_expr  ENDL  switch_stmts  "end"  ENDL  
 index is: 195, source_index: 77, before: "switch", after: basic_expr
switch_stmt  :  "switch"  basic_expr  %MARK%  ENDL  switch_stmts  "end"  ENDL  
 index is: 196, source_index: 77, before: basic_expr, after: ENDL
switch_stmt  :  "switch"  basic_expr  ENDL  %MARK%  switch_stmts  "end"  ENDL  
 index is: 197, source_index: 77, before: ENDL, after: switch_stmts
switch_stmt  :  "switch"  basic_expr  ENDL  switch_stmts  %MARK%  "end"  ENDL  
 index is: 198, source_index: 77, before: switch_stmts, after: "end"
switch_stmt  :  "switch"  basic_expr  ENDL  switch_stmts  "end"  %MARK%  ENDL  
 index is: 199, source_index: 77, before: "end", after: ENDL
switch_stmt  :  "switch"  basic_expr  ENDL  switch_stmts  "end"  ENDL  %MARK%  
 index is: 200, source_index: 77, before: ENDL, after: %NULL%
switch_stmts  :  %MARK%  switch_stmts_rep_1  switch_stmts_rep_2  
 index is: 201, source_index: 78, before: %NULL%, after: switch_stmts_rep_1
switch_stmts  :  switch_stmts_rep_1  %MARK%  switch_stmts_rep_2  
 index is: 202, source_index: 78, before: switch_stmts_rep_1, after: switch_stmts_rep_2
switch_stmts  :  switch_stmts_rep_1  switch_stmts_rep_2  %MARK%  
 index is: 203, source_index: 78, before: switch_stmts_rep_2, after: %NULL%
switch_stmts_rep_2  :  %MARK%  
 index is: 204, source_index: 79, before: %NULL%, after: %NULL%
switch_stmts_rep_2  :  %MARK%  ENDL  switch_stmts_rep_2  
 index is: 205, source_index: 80, before: %NULL%, after: ENDL
switch_stmts_rep_2  :  ENDL  %MARK%  switch_stmts_rep_2  
 index is: 206, source_index: 80, before: ENDL, after: switch_stmts_rep_2
switch_stmts_rep_2  :  ENDL  switch_stmts_rep_2  %MARK%  
 index is: 207, source_index: 80, before: switch_stmts_rep_2, after: %NULL%
switch_stmts_rep_1  :  %MARK%  
 index is: 208, source_index: 81, before: %NULL%, after: %NULL%
switch_stmts_rep_1  :  %MARK%  switch_default  switch_stmts_rep_1  
 index is: 209, source_index: 82, before: %NULL%, after: switch_default
switch_stmts_rep_1  :  switch_default  %MARK%  switch_stmts_rep_1  
 index is: 210, source_index: 82, before: switch_default, after: switch_stmts_rep_1
switch_stmts_rep_1  :  switch_default  switch_stmts_rep_1  %MARK%  
 index is: 211, source_index: 82, before: switch_stmts_rep_1, after: %NULL%
switch_stmts_rep_1  :  %MARK%  switch_case  switch_stmts_rep_1  
 index is: 212, source_index: 83, before: %NULL%, after: switch_case
switch_stmts_rep_1  :  switch_case  %MARK%  switch_stmts_rep_1  
 index is: 213, source_index: 83, before: switch_case, after: switch_stmts_rep_1
switch_stmts_rep_1  :  switch_case  switch_stmts_rep_1  %MARK%  
 index is: 214, source_index: 83, before: switch_stmts_rep_1, after: %NULL%
switch_case  :  %MARK%  "case"  logic_or_expr  ENDL  stmts  "end"  ENDL  
 index is: 215, source_index: 84, before: %NULL%, after: "case"
switch_case  :  "case"  %MARK%  logic_or_expr  ENDL  stmts  "end"  ENDL  
 index is: 216, source_index: 84, before: "case", after: logic_or_expr
switch_case  :  "case"  logic_or_expr  %MARK%  ENDL  stmts  "end"  ENDL  
 index is: 217, source_index: 84, before: logic_or_expr, after: ENDL
switch_case  :  "case"  logic_or_expr  ENDL  %MARK%  stmts  "end"  ENDL  
 index is: 218, source_index: 84, before: ENDL, after: stmts
switch_case  :  "case"  logic_or_expr  ENDL  stmts  %MARK%  "end"  ENDL  
 index is: 219, source_index: 84, before: stmts, after: "end"
switch_case  :  "case"  logic_or_expr  ENDL  stmts  "end"  %MARK%  ENDL  
 index is: 220, source_index: 84, before: "end", after: ENDL
switch_case  :  "case"  logic_or_expr  ENDL  stmts  "end"  ENDL  %MARK%  
 index is: 221, source_index: 84, before: ENDL, after: %NULL%
switch_default  :  %MARK%  "default"  ENDL  stmts  "end"  ENDL  
 index is: 222, source_index: 85, before: %NULL%, after: "default"
switch_default  :  "default"  %MARK%  ENDL  stmts  "end"  ENDL  
 index is: 223, source_index: 85, before: "default", after: ENDL
switch_default  :  "default"  ENDL  %MARK%  stmts  "end"  ENDL  
 index is: 224, source_index: 85, before: ENDL, after: stmts
switch_default  :  "default"  ENDL  stmts  %MARK%  "end"  ENDL  
 index is: 225, source_index: 85, before: stmts, after: "end"
switch_default  :  "default"  ENDL  stmts  "end"  %MARK%  ENDL  
 index is: 226, source_index: 85, before: "end", after: ENDL
switch_default  :  "default"  ENDL  stmts  "end"  ENDL  %MARK%  
 index is: 227, source_index: 85, before: ENDL, after: %NULL%
while_stmt  :  %MARK%  "while"  basic_expr  ENDL  stmts  "end"  ENDL  
 index is: 228, source_index: 86, before: %NULL%, after: "while"
while_stmt  :  "while"  %MARK%  basic_expr  ENDL  stmts  "end"  ENDL  
 index is: 229, source_index: 86, before: "while", after: basic_expr
while_stmt  :  "while"  basic_expr  %MARK%  ENDL  stmts  "end"  ENDL  
 index is: 230, source_index: 86, before: basic_expr, after: ENDL
while_stmt  :  "while"  basic_expr  ENDL  %MARK%  stmts  "end"  ENDL  
 index is: 231, source_index: 86, before: ENDL, after: stmts
while_stmt  :  "while"  basic_expr  ENDL  stmts  %MARK%  "end"  ENDL  
 index is: 232, source_index: 86, before: stmts, after: "end"
while_stmt  :  "while"  basic_expr  ENDL  stmts  "end"  %MARK%  ENDL  
 index is: 233, source_index: 86, before: "end", after: ENDL
while_stmt  :  "while"  basic_expr  ENDL  stmts  "end"  ENDL  %MARK%  
 index is: 234, source_index: 86, before: ENDL, after: %NULL%
loop_stmt  :  %MARK%  "loop"  ENDL  stmts  loop_stmt_decl_4  
 index is: 235, source_index: 87, before: %NULL%, after: "loop"
loop_stmt  :  "loop"  %MARK%  ENDL  stmts  loop_stmt_decl_4  
 index is: 236, source_index: 87, before: "loop", after: ENDL
loop_stmt  :  "loop"  ENDL  %MARK%  stmts  loop_stmt_decl_4  
 index is: 237, source_index: 87, before: ENDL, after: stmts
loop_stmt  :  "loop"  ENDL  stmts  %MARK%  loop_stmt_decl_4  
 index is: 238, source_index: 87, before: stmts, after: loop_stmt_decl_4
loop_stmt  :  "loop"  ENDL  stmts  loop_stmt_decl_4  %MARK%  
 index is: 239, source_index: 87, before: loop_stmt_decl_4, after: %NULL%
loop_stmt_decl_4  :  %MARK%  ENDL  
 index is: 240, source_index: 88, before: %NULL%, after: ENDL
loop_stmt_decl_4  :  ENDL  %MARK%  
 index is: 241, source_index: 88, before: ENDL, after: %NULL%
loop_stmt_decl_4  :  %MARK%  "end"  
 index is: 242, source_index: 89, before: %NULL%, after: "end"
loop_stmt_decl_4  :  "end"  %MARK%  
 index is: 243, source_index: 89, before: "end", after: %NULL%
loop_stmt_decl_4  :  %MARK%  until_stmt  
 index is: 244, source_index: 90, before: %NULL%, after: until_stmt
loop_stmt_decl_4  :  until_stmt  %MARK%  
 index is: 245, source_index: 90, before: until_stmt, after: %NULL%
until_stmt  :  %MARK%  "until"  basic_expr  ENDL  
 index is: 246, source_index: 91, before: %NULL%, after: "until"
until_stmt  :  "until"  %MARK%  basic_expr  ENDL  
 index is: 247, source_index: 91, before: "until", after: basic_expr
until_stmt  :  "until"  basic_expr  %MARK%  ENDL  
 index is: 248, source_index: 91, before: basic_expr, after: ENDL
until_stmt  :  "until"  basic_expr  ENDL  %MARK%  
 index is: 249, source_index: 91, before: ENDL, after: %NULL%
for_stmt  :  %MARK%  "for"  for_stmt_opt_2  for_stmt_decl_3  for_stmt_opt_4  for_stmt_decl_5  for_stmt_opt_6  for_body  
 index is: 250, source_index: 92, before: %NULL%, after: "for"
for_stmt  :  "for"  %MARK%  for_stmt_opt_2  for_stmt_decl_3  for_stmt_opt_4  for_stmt_decl_5  for_stmt_opt_6  for_body  
 index is: 251, source_index: 92, before: "for", after: for_stmt_opt_2
for_stmt  :  "for"  for_stmt_opt_2  %MARK%  for_stmt_decl_3  for_stmt_opt_4  for_stmt_decl_5  for_stmt_opt_6  for_body  
 index is: 252, source_index: 92, before: for_stmt_opt_2, after: for_stmt_decl_3
for_stmt  :  "for"  for_stmt_opt_2  for_stmt_decl_3  %MARK%  for_stmt_opt_4  for_stmt_decl_5  for_stmt_opt_6  for_body  
 index is: 253, source_index: 92, before: for_stmt_decl_3, after: for_stmt_opt_4
for_stmt  :  "for"  for_stmt_opt_2  for_stmt_decl_3  for_stmt_opt_4  %MARK%  for_stmt_decl_5  for_stmt_opt_6  for_body  
 index is: 254, source_index: 92, before: for_stmt_opt_4, after: for_stmt_decl_5
for_stmt  :  "for"  for_stmt_opt_2  for_stmt_decl_3  for_stmt_opt_4  for_stmt_decl_5  %MARK%  for_stmt_opt_6  for_body  
 index is: 255, source_index: 92, before: for_stmt_decl_5, after: for_stmt_opt_6
for_stmt  :  "for"  for_stmt_opt_2  for_stmt_decl_3  for_stmt_opt_4  for_stmt_decl_5  for_stmt_opt_6  %MARK%  for_body  
 index is: 256, source_index: 92, before: for_stmt_opt_6, after: for_body
for_stmt  :  "for"  for_stmt_opt_2  for_stmt_decl_3  for_stmt_opt_4  for_stmt_decl_5  for_stmt_opt_6  for_body  %MARK%  
 index is: 257, source_index: 92, before: for_body, after: %NULL%
for_stmt_opt_6  :  %MARK%  
 index is: 258, source_index: 93, before: %NULL%, after: %NULL%
for_stmt_opt_6  :  %MARK%  basic_expr  
 index is: 259, source_index: 94, before: %NULL%, after: basic_expr
for_stmt_opt_6  :  basic_expr  %MARK%  
 index is: 260, source_index: 94, before: basic_expr, after: %NULL%
for_stmt_decl_5  :  %MARK%  ","  
 index is: 261, source_index: 95, before: %NULL%, after: ","
for_stmt_decl_5  :  ","  %MARK%  
 index is: 262, source_index: 95, before: ",", after: %NULL%
for_stmt_decl_5  :  %MARK%  ";"  
 index is: 263, source_index: 96, before: %NULL%, after: ";"
for_stmt_decl_5  :  ";"  %MARK%  
 index is: 264, source_index: 96, before: ";", after: %NULL%
for_stmt_opt_4  :  %MARK%  
 index is: 265, source_index: 97, before: %NULL%, after: %NULL%
for_stmt_opt_4  :  %MARK%  basic_expr  
 index is: 266, source_index: 98, before: %NULL%, after: basic_expr
for_stmt_opt_4  :  basic_expr  %MARK%  
 index is: 267, source_index: 98, before: basic_expr, after: %NULL%
for_stmt_decl_3  :  %MARK%  ","  
 index is: 268, source_index: 99, before: %NULL%, after: ","
for_stmt_decl_3  :  ","  %MARK%  
 index is: 269, source_index: 99, before: ",", after: %NULL%
for_stmt_decl_3  :  %MARK%  ";"  
 index is: 270, source_index: 100, before: %NULL%, after: ";"
for_stmt_decl_3  :  ";"  %MARK%  
 index is: 271, source_index: 100, before: ";", after: %NULL%
for_stmt_opt_2  :  %MARK%  
 index is: 272, source_index: 101, before: %NULL%, after: %NULL%
for_stmt_opt_2  :  %MARK%  var_def  
 index is: 273, source_index: 102, before: %NULL%, after: var_def
for_stmt_opt_2  :  var_def  %MARK%  
 index is: 274, source_index: 102, before: var_def, after: %NULL%
foreach_stmt  :  %MARK%  "foreach"  ID  "in"  basic_expr  for_body  
 index is: 275, source_index: 103, before: %NULL%, after: "foreach"
foreach_stmt  :  "foreach"  %MARK%  ID  "in"  basic_expr  for_body  
 index is: 276, source_index: 103, before: "foreach", after: ID
foreach_stmt  :  "foreach"  ID  %MARK%  "in"  basic_expr  for_body  
 index is: 277, source_index: 103, before: ID, after: "in"
foreach_stmt  :  "foreach"  ID  "in"  %MARK%  basic_expr  for_body  
 index is: 278, source_index: 103, before: "in", after: basic_expr
foreach_stmt  :  "foreach"  ID  "in"  basic_expr  %MARK%  for_body  
 index is: 279, source_index: 103, before: basic_expr, after: for_body
foreach_stmt  :  "foreach"  ID  "in"  basic_expr  for_body  %MARK%  
 index is: 280, source_index: 103, before: for_body, after: %NULL%
for_body  :  %MARK%  for_body_decl_1  
 index is: 281, source_index: 104, before: %NULL%, after: for_body_decl_1
for_body  :  for_body_decl_1  %MARK%  
 index is: 282, source_index: 104, before: for_body_decl_1, after: %NULL%
for_body_decl_1  :  %MARK%  ENDL  stmts  "end"  ENDL  
 index is: 283, source_index: 105, before: %NULL%, after: ENDL
for_body_decl_1  :  ENDL  %MARK%  stmts  "end"  ENDL  
 index is: 284, source_index: 105, before: ENDL, after: stmts
for_body_decl_1  :  ENDL  stmts  %MARK%  "end"  ENDL  
 index is: 285, source_index: 105, before: stmts, after: "end"
for_body_decl_1  :  ENDL  stmts  "end"  %MARK%  ENDL  
 index is: 286, source_index: 105, before: "end", after: ENDL
for_body_decl_1  :  ENDL  stmts  "end"  ENDL  %MARK%  
 index is: 287, source_index: 105, before: ENDL, after: %NULL%
for_body_decl_1  :  %MARK%  "do"  basic_expr  endline  
 index is: 288, source_index: 106, before: %NULL%, after: "do"
for_body_decl_1  :  "do"  %MARK%  basic_expr  endline  
 index is: 289, source_index: 106, before: "do", after: basic_expr
for_body_decl_1  :  "do"  basic_expr  %MARK%  endline  
 index is: 290, source_index: 106, before: basic_expr, after: endline
for_body_decl_1  :  "do"  basic_expr  endline  %MARK%  
 index is: 291, source_index: 106, before: endline, after: %NULL%
function_stmt  :  %MARK%  "function"  ID  "("  function_stmt_opt_4  ")"  function_stmt_opt_6  function_body  
 index is: 292, source_index: 107, before: %NULL%, after: "function"
function_stmt  :  "function"  %MARK%  ID  "("  function_stmt_opt_4  ")"  function_stmt_opt_6  function_body  
 index is: 293, source_index: 107, before: "function", after: ID
function_stmt  :  "function"  ID  %MARK%  "("  function_stmt_opt_4  ")"  function_stmt_opt_6  function_body  
 index is: 294, source_index: 107, before: ID, after: "("
function_stmt  :  "function"  ID  "("  %MARK%  function_stmt_opt_4  ")"  function_stmt_opt_6  function_body  
 index is: 295, source_index: 107, before: "(", after: function_stmt_opt_4
function_stmt  :  "function"  ID  "("  function_stmt_opt_4  %MARK%  ")"  function_stmt_opt_6  function_body  
 index is: 296, source_index: 107, before: function_stmt_opt_4, after: ")"
function_stmt  :  "function"  ID  "("  function_stmt_opt_4  ")"  %MARK%  function_stmt_opt_6  function_body  
 index is: 297, source_index: 107, before: ")", after: function_stmt_opt_6
function_stmt  :  "function"  ID  "("  function_stmt_opt_4  ")"  function_stmt_opt_6  %MARK%  function_body  
 index is: 298, source_index: 107, before: function_stmt_opt_6, after: function_body
function_stmt  :  "function"  ID  "("  function_stmt_opt_4  ")"  function_stmt_opt_6  function_body  %MARK%  
 index is: 299, source_index: 107, before: function_body, after: %NULL%
function_stmt_opt_6  :  %MARK%  
 index is: 300, source_index: 108, before: %NULL%, after: %NULL%
function_stmt_opt_6  :  %MARK%  "override"  
 index is: 301, source_index: 109, before: %NULL%, after: "override"
function_stmt_opt_6  :  "override"  %MARK%  
 index is: 302, source_index: 109, before: "override", after: %NULL%
function_stmt_opt_4  :  %MARK%  
 index is: 303, source_index: 110, before: %NULL%, after: %NULL%
function_stmt_opt_4  :  %MARK%  argument_list  
 index is: 304, source_index: 111, before: %NULL%, after: argument_list
function_stmt_opt_4  :  argument_list  %MARK%  
 index is: 305, source_index: 111, before: argument_list, after: %NULL%
function_body  :  %MARK%  function_body_decl_1  
 index is: 306, source_index: 112, before: %NULL%, after: function_body_decl_1
function_body  :  function_body_decl_1  %MARK%  
 index is: 307, source_index: 112, before: function_body_decl_1, after: %NULL%
function_body_decl_1  :  %MARK%  ENDL  stmts  "end"  ENDL  
 index is: 308, source_index: 113, before: %NULL%, after: ENDL
function_body_decl_1  :  ENDL  %MARK%  stmts  "end"  ENDL  
 index is: 309, source_index: 113, before: ENDL, after: stmts
function_body_decl_1  :  ENDL  stmts  %MARK%  "end"  ENDL  
 index is: 310, source_index: 113, before: stmts, after: "end"
function_body_decl_1  :  ENDL  stmts  "end"  %MARK%  ENDL  
 index is: 311, source_index: 113, before: "end", after: ENDL
function_body_decl_1  :  ENDL  stmts  "end"  ENDL  %MARK%  
 index is: 312, source_index: 113, before: ENDL, after: %NULL%
function_body_decl_1  :  %MARK%  "{"  stmts  "}"  
 index is: 313, source_index: 114, before: %NULL%, after: "{"
function_body_decl_1  :  "{"  %MARK%  stmts  "}"  
 index is: 314, source_index: 114, before: "{", after: stmts
function_body_decl_1  :  "{"  stmts  %MARK%  "}"  
 index is: 315, source_index: 114, before: stmts, after: "}"
function_body_decl_1  :  "{"  stmts  "}"  %MARK%  
 index is: 316, source_index: 114, before: "}", after: %NULL%
return_stmt  :  %MARK%  "return"  return_stmt_opt_2  endline  
 index is: 317, source_index: 115, before: %NULL%, after: "return"
return_stmt  :  "return"  %MARK%  return_stmt_opt_2  endline  
 index is: 318, source_index: 115, before: "return", after: return_stmt_opt_2
return_stmt  :  "return"  return_stmt_opt_2  %MARK%  endline  
 index is: 319, source_index: 115, before: return_stmt_opt_2, after: endline
return_stmt  :  "return"  return_stmt_opt_2  endline  %MARK%  
 index is: 320, source_index: 115, before: endline, after: %NULL%
return_stmt_opt_2  :  %MARK%  
 index is: 321, source_index: 116, before: %NULL%, after: %NULL%
return_stmt_opt_2  :  %MARK%  expr  
 index is: 322, source_index: 117, before: %NULL%, after: expr
return_stmt_opt_2  :  expr  %MARK%  
 index is: 323, source_index: 117, before: expr, after: %NULL%
try_stmt  :  %MARK%  "try"  ENDL  stmts  try_stmt_rep_4  "end"  ENDL  
 index is: 324, source_index: 118, before: %NULL%, after: "try"
try_stmt  :  "try"  %MARK%  ENDL  stmts  try_stmt_rep_4  "end"  ENDL  
 index is: 325, source_index: 118, before: "try", after: ENDL
try_stmt  :  "try"  ENDL  %MARK%  stmts  try_stmt_rep_4  "end"  ENDL  
 index is: 326, source_index: 118, before: ENDL, after: stmts
try_stmt  :  "try"  ENDL  stmts  %MARK%  try_stmt_rep_4  "end"  ENDL  
 index is: 327, source_index: 118, before: stmts, after: try_stmt_rep_4
try_stmt  :  "try"  ENDL  stmts  try_stmt_rep_4  %MARK%  "end"  ENDL  
 index is: 328, source_index: 118, before: try_stmt_rep_4, after: "end"
try_stmt  :  "try"  ENDL  stmts  try_stmt_rep_4  "end"  %MARK%  ENDL  
 index is: 329, source_index: 118, before: "end", after: ENDL
try_stmt  :  "try"  ENDL  stmts  try_stmt_rep_4  "end"  ENDL  %MARK%  
 index is: 330, source_index: 118, before: ENDL, after: %NULL%
try_stmt_rep_4  :  %MARK%  
 index is: 331, source_index: 119, before: %NULL%, after: %NULL%
try_stmt_rep_4  :  %MARK%  catch_stmt  stmts  try_stmt_rep_4  
 index is: 332, source_index: 120, before: %NULL%, after: catch_stmt
try_stmt_rep_4  :  catch_stmt  %MARK%  stmts  try_stmt_rep_4  
 index is: 333, source_index: 120, before: catch_stmt, after: stmts
try_stmt_rep_4  :  catch_stmt  stmts  %MARK%  try_stmt_rep_4  
 index is: 334, source_index: 120, before: stmts, after: try_stmt_rep_4
try_stmt_rep_4  :  catch_stmt  stmts  try_stmt_rep_4  %MARK%  
 index is: 335, source_index: 120, before: try_stmt_rep_4, after: %NULL%
catch_stmt  :  %MARK%  "catch"  ID  catch_stmt_opt_3  ENDL  
 index is: 336, source_index: 121, before: %NULL%, after: "catch"
catch_stmt  :  "catch"  %MARK%  ID  catch_stmt_opt_3  ENDL  
 index is: 337, source_index: 121, before: "catch", after: ID
catch_stmt  :  "catch"  ID  %MARK%  catch_stmt_opt_3  ENDL  
 index is: 338, source_index: 121, before: ID, after: catch_stmt_opt_3
catch_stmt  :  "catch"  ID  catch_stmt_opt_3  %MARK%  ENDL  
 index is: 339, source_index: 121, before: catch_stmt_opt_3, after: ENDL
catch_stmt  :  "catch"  ID  catch_stmt_opt_3  ENDL  %MARK%  
 index is: 340, source_index: 121, before: ENDL, after: %NULL%
catch_stmt_opt_3  :  %MARK%  
 index is: 341, source_index: 122, before: %NULL%, after: %NULL%
catch_stmt_opt_3  :  %MARK%  ":"  visit_expr  
 index is: 342, source_index: 123, before: %NULL%, after: ":"
catch_stmt_opt_3  :  ":"  %MARK%  visit_expr  
 index is: 343, source_index: 123, before: ":", after: visit_expr
catch_stmt_opt_3  :  ":"  visit_expr  %MARK%  
 index is: 344, source_index: 123, before: visit_expr, after: %NULL%
throw_stmt  :  %MARK%  "throw"  throw_stmt_opt_2  endline  
 index is: 345, source_index: 124, before: %NULL%, after: "throw"
throw_stmt  :  "throw"  %MARK%  throw_stmt_opt_2  endline  
 index is: 346, source_index: 124, before: "throw", after: throw_stmt_opt_2
throw_stmt  :  "throw"  throw_stmt_opt_2  %MARK%  endline  
 index is: 347, source_index: 124, before: throw_stmt_opt_2, after: endline
throw_stmt  :  "throw"  throw_stmt_opt_2  endline  %MARK%  
 index is: 348, source_index: 124, before: endline, after: %NULL%
throw_stmt_opt_2  :  %MARK%  
 index is: 349, source_index: 125, before: %NULL%, after: %NULL%
throw_stmt_opt_2  :  %MARK%  expr  
 index is: 350, source_index: 126, before: %NULL%, after: expr
throw_stmt_opt_2  :  expr  %MARK%  
 index is: 351, source_index: 126, before: expr, after: %NULL%
class_stmt  :  %MARK%  class_stmt_decl_1  ID  class_stmt_opt_3  ENDL  decl_stmts  "end"  ENDL  
 index is: 352, source_index: 127, before: %NULL%, after: class_stmt_decl_1
class_stmt  :  class_stmt_decl_1  %MARK%  ID  class_stmt_opt_3  ENDL  decl_stmts  "end"  ENDL  
 index is: 353, source_index: 127, before: class_stmt_decl_1, after: ID
class_stmt  :  class_stmt_decl_1  ID  %MARK%  class_stmt_opt_3  ENDL  decl_stmts  "end"  ENDL  
 index is: 354, source_index: 127, before: ID, after: class_stmt_opt_3
class_stmt  :  class_stmt_decl_1  ID  class_stmt_opt_3  %MARK%  ENDL  decl_stmts  "end"  ENDL  
 index is: 355, source_index: 127, before: class_stmt_opt_3, after: ENDL
class_stmt  :  class_stmt_decl_1  ID  class_stmt_opt_3  ENDL  %MARK%  decl_stmts  "end"  ENDL  
 index is: 356, source_index: 127, before: ENDL, after: decl_stmts
class_stmt  :  class_stmt_decl_1  ID  class_stmt_opt_3  ENDL  decl_stmts  %MARK%  "end"  ENDL  
 index is: 357, source_index: 127, before: decl_stmts, after: "end"
class_stmt  :  class_stmt_decl_1  ID  class_stmt_opt_3  ENDL  decl_stmts  "end"  %MARK%  ENDL  
 index is: 358, source_index: 127, before: "end", after: ENDL
class_stmt  :  class_stmt_decl_1  ID  class_stmt_opt_3  ENDL  decl_stmts  "end"  ENDL  %MARK%  
 index is: 359, source_index: 127, before: ENDL, after: %NULL%
class_stmt_opt_3  :  %MARK%  
 index is: 360, source_index: 128, before: %NULL%, after: %NULL%
class_stmt_opt_3  :  %MARK%  "extends"  visit_expr  
 index is: 361, source_index: 129, before: %NULL%, after: "extends"
class_stmt_opt_3  :  "extends"  %MARK%  visit_expr  
 index is: 362, source_index: 129, before: "extends", after: visit_expr
class_stmt_opt_3  :  "extends"  visit_expr  %MARK%  
 index is: 363, source_index: 129, before: visit_expr, after: %NULL%
class_stmt_decl_1  :  %MARK%  "struct"  
 index is: 364, source_index: 130, before: %NULL%, after: "struct"
class_stmt_decl_1  :  "struct"  %MARK%  
 index is: 365, source_index: 130, before: "struct", after: %NULL%
class_stmt_decl_1  :  %MARK%  "class"  
 index is: 366, source_index: 131, before: %NULL%, after: "class"
class_stmt_decl_1  :  "class"  %MARK%  
 index is: 367, source_index: 131, before: "class", after: %NULL%
control_stmt  :  %MARK%  control_stmt_decl_1  endline  
 index is: 368, source_index: 132, before: %NULL%, after: control_stmt_decl_1
control_stmt  :  control_stmt_decl_1  %MARK%  endline  
 index is: 369, source_index: 132, before: control_stmt_decl_1, after: endline
control_stmt  :  control_stmt_decl_1  endline  %MARK%  
 index is: 370, source_index: 132, before: endline, after: %NULL%
control_stmt_decl_1  :  %MARK%  "continue"  
 index is: 371, source_index: 133, before: %NULL%, after: "continue"
control_stmt_decl_1  :  "continue"  %MARK%  
 index is: 372, source_index: 133, before: "continue", after: %NULL%
control_stmt_decl_1  :  %MARK%  "break"  
 index is: 373, source_index: 134, before: %NULL%, after: "break"
control_stmt_decl_1  :  "break"  %MARK%  
 index is: 374, source_index: 134, before: "break", after: %NULL%
expr_stmt  :  %MARK%  expr  endline  
 index is: 375, source_index: 135, before: %NULL%, after: expr
expr_stmt  :  expr  %MARK%  endline  
 index is: 376, source_index: 135, before: expr, after: endline
expr_stmt  :  expr  endline  %MARK%  
 index is: 377, source_index: 135, before: endline, after: %NULL%
end_stmt  :  %MARK%  "end"  ENDL  
 index is: 378, source_index: 136, before: %NULL%, after: "end"
end_stmt  :  "end"  %MARK%  ENDL  
 index is: 379, source_index: 136, before: "end", after: ENDL
end_stmt  :  "end"  ENDL  %MARK%  
 index is: 380, source_index: 136, before: ENDL, after: %NULL%
expr  :  %MARK%  single_expr  expr_opt_2  
 index is: 381, source_index: 137, before: %NULL%, after: single_expr
expr  :  single_expr  %MARK%  expr_opt_2  
 index is: 382, source_index: 137, before: single_expr, after: expr_opt_2
expr  :  single_expr  expr_opt_2  %MARK%  
 index is: 383, source_index: 137, before: expr_opt_2, after: %NULL%
expr_opt_2  :  %MARK%  
 index is: 384, source_index: 138, before: %NULL%, after: %NULL%
expr_opt_2  :  %MARK%  ","  expr  
 index is: 385, source_index: 139, before: %NULL%, after: ","
expr_opt_2  :  ","  %MARK%  expr  
 index is: 386, source_index: 139, before: ",", after: expr
expr_opt_2  :  ","  expr  %MARK%  
 index is: 387, source_index: 139, before: expr, after: %NULL%
single_expr  :  %MARK%  basic_expr  
 index is: 388, source_index: 140, before: %NULL%, after: basic_expr
single_expr  :  basic_expr  %MARK%  
 index is: 389, source_index: 140, before: basic_expr, after: %NULL%
single_expr  :  %MARK%  lambda_expr  
 index is: 390, source_index: 141, before: %NULL%, after: lambda_expr
single_expr  :  lambda_expr  %MARK%  
 index is: 391, source_index: 141, before: lambda_expr, after: %NULL%
basic_expr  :  %MARK%  cond_expr  basic_expr_opt_2  
 index is: 392, source_index: 142, before: %NULL%, after: cond_expr
basic_expr  :  cond_expr  %MARK%  basic_expr_opt_2  
 index is: 393, source_index: 142, before: cond_expr, after: basic_expr_opt_2
basic_expr  :  cond_expr  basic_expr_opt_2  %MARK%  
 index is: 394, source_index: 142, before: basic_expr_opt_2, after: %NULL%
basic_expr  :  %MARK%  var_bind  "="  cond_expr  
 index is: 395, source_index: 143, before: %NULL%, after: var_bind
basic_expr  :  var_bind  %MARK%  "="  cond_expr  
 index is: 396, source_index: 143, before: var_bind, after: "="
basic_expr  :  var_bind  "="  %MARK%  cond_expr  
 index is: 397, source_index: 143, before: "=", after: cond_expr
basic_expr  :  var_bind  "="  cond_expr  %MARK%  
 index is: 398, source_index: 143, before: cond_expr, after: %NULL%
basic_expr_opt_2  :  %MARK%  
 index is: 399, source_index: 144, before: %NULL%, after: %NULL%
basic_expr_opt_2  :  %MARK%  asi_op  single_expr  
 index is: 400, source_index: 145, before: %NULL%, after: asi_op
basic_expr_opt_2  :  asi_op  %MARK%  single_expr  
 index is: 401, source_index: 145, before: asi_op, after: single_expr
basic_expr_opt_2  :  asi_op  single_expr  %MARK%  
 index is: 402, source_index: 145, before: single_expr, after: %NULL%
asi_op  :  %MARK%  "^="  
 index is: 403, source_index: 146, before: %NULL%, after: "^="
asi_op  :  "^="  %MARK%  
 index is: 404, source_index: 146, before: "^=", after: %NULL%
asi_op  :  %MARK%  "%="  
 index is: 405, source_index: 147, before: %NULL%, after: "%="
asi_op  :  "%="  %MARK%  
 index is: 406, source_index: 147, before: "%=", after: %NULL%
asi_op  :  %MARK%  "/="  
 index is: 407, source_index: 148, before: %NULL%, after: "/="
asi_op  :  "/="  %MARK%  
 index is: 408, source_index: 148, before: "/=", after: %NULL%
asi_op  :  %MARK%  "*="  
 index is: 409, source_index: 149, before: %NULL%, after: "*="
asi_op  :  "*="  %MARK%  
 index is: 410, source_index: 149, before: "*=", after: %NULL%
asi_op  :  %MARK%  "-="  
 index is: 411, source_index: 150, before: %NULL%, after: "-="
asi_op  :  "-="  %MARK%  
 index is: 412, source_index: 150, before: "-=", after: %NULL%
asi_op  :  %MARK%  "+="  
 index is: 413, source_index: 151, before: %NULL%, after: "+="
asi_op  :  "+="  %MARK%  
 index is: 414, source_index: 151, before: "+=", after: %NULL%
asi_op  :  %MARK%  ":="  
 index is: 415, source_index: 152, before: %NULL%, after: ":="
asi_op  :  ":="  %MARK%  
 index is: 416, source_index: 152, before: ":=", after: %NULL%
asi_op  :  %MARK%  "="  
 index is: 417, source_index: 153, before: %NULL%, after: "="
asi_op  :  "="  %MARK%  
 index is: 418, source_index: 153, before: "=", after: %NULL%
lambda_expr  :  %MARK%  "["  lambda_expr_opt_2  "]"  "("  lambda_expr_opt_5  ")"  lambda_body  
 index is: 419, source_index: 154, before: %NULL%, after: "["
lambda_expr  :  "["  %MARK%  lambda_expr_opt_2  "]"  "("  lambda_expr_opt_5  ")"  lambda_body  
 index is: 420, source_index: 154, before: "[", after: lambda_expr_opt_2
lambda_expr  :  "["  lambda_expr_opt_2  %MARK%  "]"  "("  lambda_expr_opt_5  ")"  lambda_body  
 index is: 421, source_index: 154, before: lambda_expr_opt_2, after: "]"
lambda_expr  :  "["  lambda_expr_opt_2  "]"  %MARK%  "("  lambda_expr_opt_5  ")"  lambda_body  
 index is: 422, source_index: 154, before: "]", after: "("
lambda_expr  :  "["  lambda_expr_opt_2  "]"  "("  %MARK%  lambda_expr_opt_5  ")"  lambda_body  
 index is: 423, source_index: 154, before: "(", after: lambda_expr_opt_5
lambda_expr  :  "["  lambda_expr_opt_2  "]"  "("  lambda_expr_opt_5  %MARK%  ")"  lambda_body  
 index is: 424, source_index: 154, before: lambda_expr_opt_5, after: ")"
lambda_expr  :  "["  lambda_expr_opt_2  "]"  "("  lambda_expr_opt_5  ")"  %MARK%  lambda_body  
 index is: 425, source_index: 154, before: ")", after: lambda_body
lambda_expr  :  "["  lambda_expr_opt_2  "]"  "("  lambda_expr_opt_5  ")"  lambda_body  %MARK%  
 index is: 426, source_index: 154, before: lambda_body, after: %NULL%
lambda_expr_opt_5  :  %MARK%  
 index is: 427, source_index: 155, before: %NULL%, after: %NULL%
lambda_expr_opt_5  :  %MARK%  argument_list  
 index is: 428, source_index: 156, before: %NULL%, after: argument_list
lambda_expr_opt_5  :  argument_list  %MARK%  
 index is: 429, source_index: 156, before: argument_list, after: %NULL%
lambda_expr_opt_2  :  %MARK%  
 index is: 430, source_index: 157, before: %NULL%, after: %NULL%
lambda_expr_opt_2  :  %MARK%  capture_list  
 index is: 431, source_index: 158, before: %NULL%, after: capture_list
lambda_expr_opt_2  :  capture_list  %MARK%  
 index is: 432, source_index: 158, before: capture_list, after: %NULL%
capture_list  :  %MARK%  capture_list_opt_1  ID  capture_list_rep_3  
 index is: 433, source_index: 159, before: %NULL%, after: capture_list_opt_1
capture_list  :  capture_list_opt_1  %MARK%  ID  capture_list_rep_3  
 index is: 434, source_index: 159, before: capture_list_opt_1, after: ID
capture_list  :  capture_list_opt_1  ID  %MARK%  capture_list_rep_3  
 index is: 435, source_index: 159, before: ID, after: capture_list_rep_3
capture_list  :  capture_list_opt_1  ID  capture_list_rep_3  %MARK%  
 index is: 436, source_index: 159, before: capture_list_rep_3, after: %NULL%
capture_list_rep_3  :  %MARK%  
 index is: 437, source_index: 160, before: %NULL%, after: %NULL%
capture_list_rep_3  :  %MARK%  ","  capture_list  capture_list_rep_3  
 index is: 438, source_index: 161, before: %NULL%, after: ","
capture_list_rep_3  :  ","  %MARK%  capture_list  capture_list_rep_3  
 index is: 439, source_index: 161, before: ",", after: capture_list
capture_list_rep_3  :  ","  capture_list  %MARK%  capture_list_rep_3  
 index is: 440, source_index: 161, before: capture_list, after: capture_list_rep_3
capture_list_rep_3  :  ","  capture_list  capture_list_rep_3  %MARK%  
 index is: 441, source_index: 161, before: capture_list_rep_3, after: %NULL%
capture_list_opt_1  :  %MARK%  
 index is: 442, source_index: 162, before: %NULL%, after: %NULL%
capture_list_opt_1  :  %MARK%  "="  
 index is: 443, source_index: 163, before: %NULL%, after: "="
capture_list_opt_1  :  "="  %MARK%  
 index is: 444, source_index: 163, before: "=", after: %NULL%
argument_list  :  %MARK%  argument_list_opt_1  ID  argument_list_opt_3  visit_expr  argument_list_rep_5  
 index is: 445, source_index: 164, before: %NULL%, after: argument_list_opt_1
argument_list  :  argument_list_opt_1  %MARK%  ID  argument_list_opt_3  visit_expr  argument_list_rep_5  
 index is: 446, source_index: 164, before: argument_list_opt_1, after: ID
argument_list  :  argument_list_opt_1  ID  %MARK%  argument_list_opt_3  visit_expr  argument_list_rep_5  
 index is: 447, source_index: 164, before: ID, after: argument_list_opt_3
argument_list  :  argument_list_opt_1  ID  argument_list_opt_3  %MARK%  visit_expr  argument_list_rep_5  
 index is: 448, source_index: 164, before: argument_list_opt_3, after: visit_expr
argument_list  :  argument_list_opt_1  ID  argument_list_opt_3  visit_expr  %MARK%  argument_list_rep_5  
 index is: 449, source_index: 164, before: visit_expr, after: argument_list_rep_5
argument_list  :  argument_list_opt_1  ID  argument_list_opt_3  visit_expr  argument_list_rep_5  %MARK%  
 index is: 450, source_index: 164, before: argument_list_rep_5, after: %NULL%
argument_list  :  %MARK%  ETC  ID  
 index is: 451, source_index: 165, before: %NULL%, after: ETC
argument_list  :  ETC  %MARK%  ID  
 index is: 452, source_index: 165, before: ETC, after: ID
argument_list  :  ETC  ID  %MARK%  
 index is: 453, source_index: 165, before: ID, after: %NULL%
argument_list_rep_5  :  %MARK%  
 index is: 454, source_index: 166, before: %NULL%, after: %NULL%
argument_list_rep_5  :  %MARK%  ","  argument_list  argument_list_rep_5  
 index is: 455, source_index: 167, before: %NULL%, after: ","
argument_list_rep_5  :  ","  %MARK%  argument_list  argument_list_rep_5  
 index is: 456, source_index: 167, before: ",", after: argument_list
argument_list_rep_5  :  ","  argument_list  %MARK%  argument_list_rep_5  
 index is: 457, source_index: 167, before: argument_list, after: argument_list_rep_5
argument_list_rep_5  :  ","  argument_list  argument_list_rep_5  %MARK%  
 index is: 458, source_index: 167, before: argument_list_rep_5, after: %NULL%
argument_list_opt_3  :  %MARK%  
 index is: 459, source_index: 168, before: %NULL%, after: %NULL%
argument_list_opt_3  :  %MARK%  ":"  
 index is: 460, source_index: 169, before: %NULL%, after: ":"
argument_list_opt_3  :  ":"  %MARK%  
 index is: 461, source_index: 169, before: ":", after: %NULL%
argument_list_opt_1  :  %MARK%  
 index is: 462, source_index: 170, before: %NULL%, after: %NULL%
argument_list_opt_1  :  %MARK%  "="  
 index is: 463, source_index: 171, before: %NULL%, after: "="
argument_list_opt_1  :  "="  %MARK%  
 index is: 464, source_index: 171, before: "=", after: %NULL%
lambda_body  :  %MARK%  "->"  cond_expr  
 index is: 465, source_index: 172, before: %NULL%, after: "->"
lambda_body  :  "->"  %MARK%  cond_expr  
 index is: 466, source_index: 172, before: "->", after: cond_expr
lambda_body  :  "->"  cond_expr  %MARK%  
 index is: 467, source_index: 172, before: cond_expr, after: %NULL%
lambda_body  :  %MARK%  "{"  lambda_body_rep_2  "}"  
 index is: 468, source_index: 173, before: %NULL%, after: "{"
lambda_body  :  "{"  %MARK%  lambda_body_rep_2  "}"  
 index is: 469, source_index: 173, before: "{", after: lambda_body_rep_2
lambda_body  :  "{"  lambda_body_rep_2  %MARK%  "}"  
 index is: 470, source_index: 173, before: lambda_body_rep_2, after: "}"
lambda_body  :  "{"  lambda_body_rep_2  "}"  %MARK%  
 index is: 471, source_index: 173, before: "}", after: %NULL%
lambda_body_rep_2  :  %MARK%  
 index is: 472, source_index: 174, before: %NULL%, after: %NULL%
lambda_body_rep_2  :  %MARK%  statement  lambda_body_rep_2_rep_2  lambda_body_rep_2  
 index is: 473, source_index: 175, before: %NULL%, after: statement
lambda_body_rep_2  :  statement  %MARK%  lambda_body_rep_2_rep_2  lambda_body_rep_2  
 index is: 474, source_index: 175, before: statement, after: lambda_body_rep_2_rep_2
lambda_body_rep_2  :  statement  lambda_body_rep_2_rep_2  %MARK%  lambda_body_rep_2  
 index is: 475, source_index: 175, before: lambda_body_rep_2_rep_2, after: lambda_body_rep_2
lambda_body_rep_2  :  statement  lambda_body_rep_2_rep_2  lambda_body_rep_2  %MARK%  
 index is: 476, source_index: 175, before: lambda_body_rep_2, after: %NULL%
lambda_body_rep_2_rep_2  :  %MARK%  
 index is: 477, source_index: 176, before: %NULL%, after: %NULL%
lambda_body_rep_2_rep_2  :  %MARK%  ENDL  lambda_body_rep_2_rep_2  
 index is: 478, source_index: 177, before: %NULL%, after: ENDL
lambda_body_rep_2_rep_2  :  ENDL  %MARK%  lambda_body_rep_2_rep_2  
 index is: 479, source_index: 177, before: ENDL, after: lambda_body_rep_2_rep_2
lambda_body_rep_2_rep_2  :  ENDL  lambda_body_rep_2_rep_2  %MARK%  
 index is: 480, source_index: 177, before: lambda_body_rep_2_rep_2, after: %NULL%
cond_expr  :  %MARK%  logic_expr  cond_expr_opt_2  
 index is: 481, source_index: 178, before: %NULL%, after: logic_expr
cond_expr  :  logic_expr  %MARK%  cond_expr_opt_2  
 index is: 482, source_index: 178, before: logic_expr, after: cond_expr_opt_2
cond_expr  :  logic_expr  cond_expr_opt_2  %MARK%  
 index is: 483, source_index: 178, before: cond_expr_opt_2, after: %NULL%
cond_expr_opt_2  :  %MARK%  
 index is: 484, source_index: 179, before: %NULL%, after: %NULL%
cond_expr_opt_2  :  %MARK%  cond_postfix  
 index is: 485, source_index: 180, before: %NULL%, after: cond_postfix
cond_expr_opt_2  :  cond_postfix  %MARK%  
 index is: 486, source_index: 180, before: cond_postfix, after: %NULL%
cond_postfix  :  %MARK%  ":"  logic_or_expr  
 index is: 487, source_index: 181, before: %NULL%, after: ":"
cond_postfix  :  ":"  %MARK%  logic_or_expr  
 index is: 488, source_index: 181, before: ":", after: logic_or_expr
cond_postfix  :  ":"  logic_or_expr  %MARK%  
 index is: 489, source_index: 181, before: logic_or_expr, after: %NULL%
cond_postfix  :  %MARK%  "?"  logic_or_expr  ":"  cond_expr  
 index is: 490, source_index: 182, before: %NULL%, after: "?"
cond_postfix  :  "?"  %MARK%  logic_or_expr  ":"  cond_expr  
 index is: 491, source_index: 182, before: "?", after: logic_or_expr
cond_postfix  :  "?"  logic_or_expr  %MARK%  ":"  cond_expr  
 index is: 492, source_index: 182, before: logic_or_expr, after: ":"
cond_postfix  :  "?"  logic_or_expr  ":"  %MARK%  cond_expr  
 index is: 493, source_index: 182, before: ":", after: cond_expr
cond_postfix  :  "?"  logic_or_expr  ":"  cond_expr  %MARK%  
 index is: 494, source_index: 182, before: cond_expr, after: %NULL%
logic_or_expr  :  %MARK%  logic_and_expr  logic_or_expr_opt_2  logic_or_expr  
 index is: 495, source_index: 183, before: %NULL%, after: logic_and_expr
logic_or_expr  :  logic_and_expr  %MARK%  logic_or_expr_opt_2  logic_or_expr  
 index is: 496, source_index: 183, before: logic_and_expr, after: logic_or_expr_opt_2
logic_or_expr  :  logic_and_expr  logic_or_expr_opt_2  %MARK%  logic_or_expr  
 index is: 497, source_index: 183, before: logic_or_expr_opt_2, after: logic_or_expr
logic_or_expr  :  logic_and_expr  logic_or_expr_opt_2  logic_or_expr  %MARK%  
 index is: 498, source_index: 183, before: logic_or_expr, after: %NULL%
logic_or_expr_opt_2  :  %MARK%  
 index is: 499, source_index: 184, before: %NULL%, after: %NULL%
logic_or_expr_opt_2  :  %MARK%  "or"  
 index is: 500, source_index: 185, before: %NULL%, after: "or"
logic_or_expr_opt_2  :  "or"  %MARK%  
 index is: 501, source_index: 185, before: "or", after: %NULL%
logic_or_expr_opt_2  :  %MARK%  "||"  
 index is: 502, source_index: 186, before: %NULL%, after: "||"
logic_or_expr_opt_2  :  "||"  %MARK%  
 index is: 503, source_index: 186, before: "||", after: %NULL%
logic_and_expr  :  %MARK%  equal_expr  logic_and_expr_opt_2  logic_and_expr  
 index is: 504, source_index: 187, before: %NULL%, after: equal_expr
logic_and_expr  :  equal_expr  %MARK%  logic_and_expr_opt_2  logic_and_expr  
 index is: 505, source_index: 187, before: equal_expr, after: logic_and_expr_opt_2
logic_and_expr  :  equal_expr  logic_and_expr_opt_2  %MARK%  logic_and_expr  
 index is: 506, source_index: 187, before: logic_and_expr_opt_2, after: logic_and_expr
logic_and_expr  :  equal_expr  logic_and_expr_opt_2  logic_and_expr  %MARK%  
 index is: 507, source_index: 187, before: logic_and_expr, after: %NULL%
logic_and_expr_opt_2  :  %MARK%  
 index is: 508, source_index: 188, before: %NULL%, after: %NULL%
logic_and_expr_opt_2  :  %MARK%  "and"  
 index is: 509, source_index: 189, before: %NULL%, after: "and"
logic_and_expr_opt_2  :  "and"  %MARK%  
 index is: 510, source_index: 189, before: "and", after: %NULL%
logic_and_expr_opt_2  :  %MARK%  "&&"  
 index is: 511, source_index: 190, before: %NULL%, after: "&&"
logic_and_expr_opt_2  :  "&&"  %MARK%  
 index is: 512, source_index: 190, before: "&&", after: %NULL%
equal_expr  :  %MARK%  relat_expr  equal_expr_opt_2  
 index is: 513, source_index: 191, before: %NULL%, after: relat_expr
equal_expr  :  relat_expr  %MARK%  equal_expr_opt_2  
 index is: 514, source_index: 191, before: relat_expr, after: equal_expr_opt_2
equal_expr  :  relat_expr  equal_expr_opt_2  %MARK%  
 index is: 515, source_index: 191, before: equal_expr_opt_2, after: %NULL%
equal_expr_opt_2  :  %MARK%  
 index is: 516, source_index: 192, before: %NULL%, after: %NULL%
equal_expr_opt_2  :  %MARK%  equal_expr_opt_2_decl_1  equal_expr  
 index is: 517, source_index: 193, before: %NULL%, after: equal_expr_opt_2_decl_1
equal_expr_opt_2  :  equal_expr_opt_2_decl_1  %MARK%  equal_expr  
 index is: 518, source_index: 193, before: equal_expr_opt_2_decl_1, after: equal_expr
equal_expr_opt_2  :  equal_expr_opt_2_decl_1  equal_expr  %MARK%  
 index is: 519, source_index: 193, before: equal_expr, after: %NULL%
equal_expr_opt_2_decl_1  :  %MARK%  "!="  
 index is: 520, source_index: 194, before: %NULL%, after: "!="
equal_expr_opt_2_decl_1  :  "!="  %MARK%  
 index is: 521, source_index: 194, before: "!=", after: %NULL%
equal_expr_opt_2_decl_1  :  %MARK%  "=="  
 index is: 522, source_index: 195, before: %NULL%, after: "=="
equal_expr_opt_2_decl_1  :  "=="  %MARK%  
 index is: 523, source_index: 195, before: "==", after: %NULL%
relat_expr  :  %MARK%  add_expr  relat_expr_opt_2  
 index is: 524, source_index: 196, before: %NULL%, after: add_expr
relat_expr  :  add_expr  %MARK%  relat_expr_opt_2  
 index is: 525, source_index: 196, before: add_expr, after: relat_expr_opt_2
relat_expr  :  add_expr  relat_expr_opt_2  %MARK%  
 index is: 526, source_index: 196, before: relat_expr_opt_2, after: %NULL%
relat_expr_opt_2  :  %MARK%  
 index is: 527, source_index: 197, before: %NULL%, after: %NULL%
relat_expr_opt_2  :  %MARK%  relat_expr_opt_2_decl_1  relat_expr  
 index is: 528, source_index: 198, before: %NULL%, after: relat_expr_opt_2_decl_1
relat_expr_opt_2  :  relat_expr_opt_2_decl_1  %MARK%  relat_expr  
 index is: 529, source_index: 198, before: relat_expr_opt_2_decl_1, after: relat_expr
relat_expr_opt_2  :  relat_expr_opt_2_decl_1  relat_expr  %MARK%  
 index is: 530, source_index: 198, before: relat_expr, after: %NULL%
relat_expr_opt_2_decl_1  :  %MARK%  "<="  
 index is: 531, source_index: 199, before: %NULL%, after: "<="
relat_expr_opt_2_decl_1  :  "<="  %MARK%  
 index is: 532, source_index: 199, before: "<=", after: %NULL%
relat_expr_opt_2_decl_1  :  %MARK%  ">="  
 index is: 533, source_index: 200, before: %NULL%, after: ">="
relat_expr_opt_2_decl_1  :  ">="  %MARK%  
 index is: 534, source_index: 200, before: ">=", after: %NULL%
relat_expr_opt_2_decl_1  :  %MARK%  "<"  
 index is: 535, source_index: 201, before: %NULL%, after: "<"
relat_expr_opt_2_decl_1  :  "<"  %MARK%  
 index is: 536, source_index: 201, before: "<", after: %NULL%
relat_expr_opt_2_decl_1  :  %MARK%  ">"  
 index is: 537, source_index: 202, before: %NULL%, after: ">"
relat_expr_opt_2_decl_1  :  ">"  %MARK%  
 index is: 538, source_index: 202, before: ">", after: %NULL%
add_expr  :  %MARK%  mul_expr  add_expr_opt_2  
 index is: 539, source_index: 203, before: %NULL%, after: mul_expr
add_expr  :  mul_expr  %MARK%  add_expr_opt_2  
 index is: 540, source_index: 203, before: mul_expr, after: add_expr_opt_2
add_expr  :  mul_expr  add_expr_opt_2  %MARK%  
 index is: 541, source_index: 203, before: add_expr_opt_2, after: %NULL%
add_expr_opt_2  :  %MARK%  
 index is: 542, source_index: 204, before: %NULL%, after: %NULL%
add_expr_opt_2  :  %MARK%  add_expr_opt_2_decl_1  add_expr  
 index is: 543, source_index: 205, before: %NULL%, after: add_expr_opt_2_decl_1
add_expr_opt_2  :  add_expr_opt_2_decl_1  %MARK%  add_expr  
 index is: 544, source_index: 205, before: add_expr_opt_2_decl_1, after: add_expr
add_expr_opt_2  :  add_expr_opt_2_decl_1  add_expr  %MARK%  
 index is: 545, source_index: 205, before: add_expr, after: %NULL%
add_expr_opt_2_decl_1  :  %MARK%  "-"  
 index is: 546, source_index: 206, before: %NULL%, after: "-"
add_expr_opt_2_decl_1  :  "-"  %MARK%  
 index is: 547, source_index: 206, before: "-", after: %NULL%
add_expr_opt_2_decl_1  :  %MARK%  "+"  
 index is: 548, source_index: 207, before: %NULL%, after: "+"
add_expr_opt_2_decl_1  :  "+"  %MARK%  
 index is: 549, source_index: 207, before: "+", after: %NULL%
mul_expr  :  %MARK%  unary_expr  mul_expr_decl_2  
 index is: 550, source_index: 208, before: %NULL%, after: unary_expr
mul_expr  :  unary_expr  %MARK%  mul_expr_decl_2  
 index is: 551, source_index: 208, before: unary_expr, after: mul_expr_decl_2
mul_expr  :  unary_expr  mul_expr_decl_2  %MARK%  
 index is: 552, source_index: 208, before: mul_expr_decl_2, after: %NULL%
mul_expr_decl_2  :  %MARK%  ENDL  
 index is: 553, source_index: 209, before: %NULL%, after: ENDL
mul_expr_decl_2  :  ENDL  %MARK%  
 index is: 554, source_index: 209, before: ENDL, after: %NULL%
mul_expr_decl_2  :  %MARK%  mul_expr_decl_2_opt_1  
 index is: 555, source_index: 210, before: %NULL%, after: mul_expr_decl_2_opt_1
mul_expr_decl_2  :  mul_expr_decl_2_opt_1  %MARK%  
 index is: 556, source_index: 210, before: mul_expr_decl_2_opt_1, after: %NULL%
mul_expr_decl_2_opt_1  :  %MARK%  
 index is: 557, source_index: 211, before: %NULL%, after: %NULL%
mul_expr_decl_2_opt_1  :  %MARK%  mul_expr_decl_2_opt_1_decl_1  mul_expr  
 index is: 558, source_index: 212, before: %NULL%, after: mul_expr_decl_2_opt_1_decl_1
mul_expr_decl_2_opt_1  :  mul_expr_decl_2_opt_1_decl_1  %MARK%  mul_expr  
 index is: 559, source_index: 212, before: mul_expr_decl_2_opt_1_decl_1, after: mul_expr
mul_expr_decl_2_opt_1  :  mul_expr_decl_2_opt_1_decl_1  mul_expr  %MARK%  
 index is: 560, source_index: 212, before: mul_expr, after: %NULL%
mul_expr_decl_2_opt_1_decl_1  :  %MARK%  "^"  
 index is: 561, source_index: 213, before: %NULL%, after: "^"
mul_expr_decl_2_opt_1_decl_1  :  "^"  %MARK%  
 index is: 562, source_index: 213, before: "^", after: %NULL%
mul_expr_decl_2_opt_1_decl_1  :  %MARK%  "%"  
 index is: 563, source_index: 214, before: %NULL%, after: "%"
mul_expr_decl_2_opt_1_decl_1  :  "%"  %MARK%  
 index is: 564, source_index: 214, before: "%", after: %NULL%
mul_expr_decl_2_opt_1_decl_1  :  %MARK%  "/"  
 index is: 565, source_index: 215, before: %NULL%, after: "/"
mul_expr_decl_2_opt_1_decl_1  :  "/"  %MARK%  
 index is: 566, source_index: 215, before: "/", after: %NULL%
unary_expr  :  %MARK%  unary_expr_decl_1  
 index is: 567, source_index: 216, before: %NULL%, after: unary_expr_decl_1
unary_expr  :  unary_expr_decl_1  %MARK%  
 index is: 568, source_index: 216, before: unary_expr_decl_1, after: %NULL%
unary_expr_decl_1  :  %MARK%  prim_expr  unary_expr_decl_1_decl_2  
 index is: 569, source_index: 217, before: %NULL%, after: prim_expr
unary_expr_decl_1  :  prim_expr  %MARK%  unary_expr_decl_1_decl_2  
 index is: 570, source_index: 217, before: prim_expr, after: unary_expr_decl_1_decl_2
unary_expr_decl_1  :  prim_expr  unary_expr_decl_1_decl_2  %MARK%  
 index is: 571, source_index: 217, before: unary_expr_decl_1_decl_2, after: %NULL%
unary_expr_decl_1  :  %MARK%  unary_expr_decl_1_decl_1  unary_expr  unary_expr_decl_1_opt_3  
 index is: 572, source_index: 218, before: %NULL%, after: unary_expr_decl_1_decl_1
unary_expr_decl_1  :  unary_expr_decl_1_decl_1  %MARK%  unary_expr  unary_expr_decl_1_opt_3  
 index is: 573, source_index: 218, before: unary_expr_decl_1_decl_1, after: unary_expr
unary_expr_decl_1  :  unary_expr_decl_1_decl_1  unary_expr  %MARK%  unary_expr_decl_1_opt_3  
 index is: 574, source_index: 218, before: unary_expr, after: unary_expr_decl_1_opt_3
unary_expr_decl_1  :  unary_expr_decl_1_decl_1  unary_expr  unary_expr_decl_1_opt_3  %MARK%  
 index is: 575, source_index: 218, before: unary_expr_decl_1_opt_3, after: %NULL%
unary_expr_decl_1  :  %MARK%  unary_op  unary_expr  
 index is: 576, source_index: 219, before: %NULL%, after: unary_op
unary_expr_decl_1  :  unary_op  %MARK%  unary_expr  
 index is: 577, source_index: 219, before: unary_op, after: unary_expr
unary_expr_decl_1  :  unary_op  unary_expr  %MARK%  
 index is: 578, source_index: 219, before: unary_expr, after: %NULL%
unary_expr_decl_1_decl_2  :  %MARK%  ENDL  
 index is: 579, source_index: 220, before: %NULL%, after: ENDL
unary_expr_decl_1_decl_2  :  ENDL  %MARK%  
 index is: 580, source_index: 220, before: ENDL, after: %NULL%
unary_expr_decl_1_decl_2  :  %MARK%  unary_expr_decl_1_decl_2_opt_1  
 index is: 581, source_index: 221, before: %NULL%, after: unary_expr_decl_1_decl_2_opt_1
unary_expr_decl_1_decl_2  :  unary_expr_decl_1_decl_2_opt_1  %MARK%  
 index is: 582, source_index: 221, before: unary_expr_decl_1_decl_2_opt_1, after: %NULL%
unary_expr_decl_1_decl_2_opt_1  :  %MARK%  
 index is: 583, source_index: 222, before: %NULL%, after: %NULL%
unary_expr_decl_1_decl_2_opt_1  :  %MARK%  postifx  
 index is: 584, source_index: 223, before: %NULL%, after: postifx
unary_expr_decl_1_decl_2_opt_1  :  postifx  %MARK%  
 index is: 585, source_index: 223, before: postifx, after: %NULL%
unary_expr_decl_1_opt_3  :  %MARK%  
 index is: 586, source_index: 224, before: %NULL%, after: %NULL%
unary_expr_decl_1_opt_3  :  %MARK%  array  
 index is: 587, source_index: 225, before: %NULL%, after: array
unary_expr_decl_1_opt_3  :  array  %MARK%  
 index is: 588, source_index: 225, before: array, after: %NULL%
unary_expr_decl_1_decl_1  :  %MARK%  "gcnew"  
 index is: 589, source_index: 226, before: %NULL%, after: "gcnew"
unary_expr_decl_1_decl_1  :  "gcnew"  %MARK%  
 index is: 590, source_index: 226, before: "gcnew", after: %NULL%
unary_expr_decl_1_decl_1  :  %MARK%  "new"  
 index is: 591, source_index: 227, before: %NULL%, after: "new"
unary_expr_decl_1_decl_1  :  "new"  %MARK%  
 index is: 592, source_index: 227, before: "new", after: %NULL%
unary_op  :  %MARK%  "!"  
 index is: 593, source_index: 228, before: %NULL%, after: "!"
unary_op  :  "!"  %MARK%  
 index is: 594, source_index: 228, before: "!", after: %NULL%
unary_op  :  %MARK%  "-"  
 index is: 595, source_index: 229, before: %NULL%, after: "-"
unary_op  :  "-"  %MARK%  
 index is: 596, source_index: 229, before: "-", after: %NULL%
unary_op  :  %MARK%  "&"  
 index is: 597, source_index: 230, before: %NULL%, after: "&"
unary_op  :  "&"  %MARK%  
 index is: 598, source_index: 230, before: "&", after: %NULL%
unary_op  :  %MARK%  "*"  
 index is: 599, source_index: 231, before: %NULL%, after: "*"
unary_op  :  "*"  %MARK%  
 index is: 600, source_index: 231, before: "*", after: %NULL%
unary_op  :  %MARK%  "--"  
 index is: 601, source_index: 232, before: %NULL%, after: "--"
unary_op  :  "--"  %MARK%  
 index is: 602, source_index: 232, before: "--", after: %NULL%
unary_op  :  %MARK%  "++"  
 index is: 603, source_index: 233, before: %NULL%, after: "++"
unary_op  :  "++"  %MARK%  
 index is: 604, source_index: 233, before: "++", after: %NULL%
unary_op  :  %MARK%  "typeid"  
 index is: 605, source_index: 234, before: %NULL%, after: "typeid"
unary_op  :  "typeid"  %MARK%  
 index is: 606, source_index: 234, before: "typeid", after: %NULL%
postfix_expr  :  %MARK%  constant  
 index is: 607, source_index: 235, before: %NULL%, after: constant
postfix_expr  :  constant  %MARK%  
 index is: 608, source_index: 235, before: constant, after: %NULL%
postfix_expr  :  %MARK%  visit_expr  
 index is: 609, source_index: 236, before: %NULL%, after: visit_expr
postfix_expr  :  visit_expr  %MARK%  
 index is: 610, source_index: 236, before: visit_expr, after: %NULL%
visit_expr  :  %MARK%  object  visit_expr_opt_2  visit_expr  
 index is: 611, source_index: 237, before: %NULL%, after: object
visit_expr  :  object  %MARK%  visit_expr_opt_2  visit_expr  
 index is: 612, source_index: 237, before: object, after: visit_expr_opt_2
visit_expr  :  object  visit_expr_opt_2  %MARK%  visit_expr  
 index is: 613, source_index: 237, before: visit_expr_opt_2, after: visit_expr
visit_expr  :  object  visit_expr_opt_2  visit_expr  %MARK%  
 index is: 614, source_index: 237, before: visit_expr, after: %NULL%
visit_expr_opt_2  :  %MARK%  
 index is: 615, source_index: 238, before: %NULL%, after: %NULL%
visit_expr_opt_2  :  %MARK%  "."  
 index is: 616, source_index: 239, before: %NULL%, after: "."
visit_expr_opt_2  :  "."  %MARK%  
 index is: 617, source_index: 239, before: ".", after: %NULL%
visit_expr_opt_2  :  %MARK%  "->"  
 index is: 618, source_index: 240, before: %NULL%, after: "->"
visit_expr_opt_2  :  "->"  %MARK%  
 index is: 619, source_index: 240, before: "->", after: %NULL%
object  :  %MARK%  object_decl_1  
 index is: 620, source_index: 241, before: %NULL%, after: object_decl_1
object  :  object_decl_1  %MARK%  
 index is: 621, source_index: 241, before: object_decl_1, after: %NULL%
object_decl_1  :  %MARK%  CHAR  
 index is: 622, source_index: 242, before: %NULL%, after: CHAR
object_decl_1  :  CHAR  %MARK%  
 index is: 623, source_index: 242, before: CHAR, after: %NULL%
object_decl_1  :  %MARK%  element  
 index is: 624, source_index: 243, before: %NULL%, after: element
object_decl_1  :  element  %MARK%  
 index is: 625, source_index: 243, before: element, after: %NULL%
object_decl_1  :  %MARK%  "global"  
 index is: 626, source_index: 244, before: %NULL%, after: "global"
object_decl_1  :  "global"  %MARK%  
 index is: 627, source_index: 244, before: "global", after: %NULL%
object_decl_1  :  %MARK%  "local"  
 index is: 628, source_index: 245, before: %NULL%, after: "local"
object_decl_1  :  "local"  %MARK%  
 index is: 629, source_index: 245, before: "local", after: %NULL%
object_decl_1  :  %MARK%  str  object_decl_1_opt_2  
 index is: 630, source_index: 246, before: %NULL%, after: str
object_decl_1  :  str  %MARK%  object_decl_1_opt_2  
 index is: 631, source_index: 246, before: str, after: object_decl_1_opt_2
object_decl_1  :  str  object_decl_1_opt_2  %MARK%  
 index is: 632, source_index: 246, before: object_decl_1_opt_2, after: %NULL%
object_decl_1  :  %MARK%  array  object_decl_1_opt_2  
 index is: 633, source_index: 247, before: %NULL%, after: array
object_decl_1  :  array  %MARK%  object_decl_1_opt_2  
 index is: 634, source_index: 247, before: array, after: object_decl_1_opt_2
object_decl_1  :  array  object_decl_1_opt_2  %MARK%  
 index is: 635, source_index: 247, before: object_decl_1_opt_2, after: %NULL%
object_decl_1_opt_2  :  %MARK%  
 index is: 636, source_index: 248, before: %NULL%, after: %NULL%
object_decl_1_opt_2  :  %MARK%  index  
 index is: 637, source_index: 249, before: %NULL%, after: index
object_decl_1_opt_2  :  index  %MARK%  
 index is: 638, source_index: 249, before: index, after: %NULL%
object_decl_1_opt_2  :  %MARK%  
 index is: 639, source_index: 250, before: %NULL%, after: %NULL%
object_decl_1_opt_2  :  %MARK%  index  
 index is: 640, source_index: 251, before: %NULL%, after: index
object_decl_1_opt_2  :  index  %MARK%  
 index is: 641, source_index: 251, before: index, after: %NULL%
element  :  %MARK%  element_decl_1  element_decl_2  
 index is: 642, source_index: 252, before: %NULL%, after: element_decl_1
element  :  element_decl_1  %MARK%  element_decl_2  
 index is: 643, source_index: 252, before: element_decl_1, after: element_decl_2
element  :  element_decl_1  element_decl_2  %MARK%  
 index is: 644, source_index: 252, before: element_decl_2, after: %NULL%
element_decl_2  :  %MARK%  element_decl_2_rep_1  
 index is: 645, source_index: 253, before: %NULL%, after: element_decl_2_rep_1
element_decl_2  :  element_decl_2_rep_1  %MARK%  
 index is: 646, source_index: 253, before: element_decl_2_rep_1, after: %NULL%
element_decl_2  :  %MARK%  ENDL  
 index is: 647, source_index: 254, before: %NULL%, after: ENDL
element_decl_2  :  ENDL  %MARK%  
 index is: 648, source_index: 254, before: ENDL, after: %NULL%
element_decl_2_rep_1  :  %MARK%  
 index is: 649, source_index: 255, before: %NULL%, after: %NULL%
element_decl_2_rep_1  :  %MARK%  index  element_decl_2_rep_1  
 index is: 650, source_index: 256, before: %NULL%, after: index
element_decl_2_rep_1  :  index  %MARK%  element_decl_2_rep_1  
 index is: 651, source_index: 256, before: index, after: element_decl_2_rep_1
element_decl_2_rep_1  :  index  element_decl_2_rep_1  %MARK%  
 index is: 652, source_index: 256, before: element_decl_2_rep_1, after: %NULL%
element_decl_2_rep_1  :  %MARK%  fcall  element_decl_2_rep_1  
 index is: 653, source_index: 257, before: %NULL%, after: fcall
element_decl_2_rep_1  :  fcall  %MARK%  element_decl_2_rep_1  
 index is: 654, source_index: 257, before: fcall, after: element_decl_2_rep_1
element_decl_2_rep_1  :  fcall  element_decl_2_rep_1  %MARK%  
 index is: 655, source_index: 257, before: element_decl_2_rep_1, after: %NULL%
element_decl_1  :  %MARK%  "("  single_expr  ")"  
 index is: 656, source_index: 258, before: %NULL%, after: "("
element_decl_1  :  "("  %MARK%  single_expr  ")"  
 index is: 657, source_index: 258, before: "(", after: single_expr
element_decl_1  :  "("  single_expr  %MARK%  ")"  
 index is: 658, source_index: 258, before: single_expr, after: ")"
element_decl_1  :  "("  single_expr  ")"  %MARK%  
 index is: 659, source_index: 258, before: ")", after: %NULL%
element_decl_1  :  %MARK%  ID  
 index is: 660, source_index: 259, before: %NULL%, after: ID
element_decl_1  :  ID  %MARK%  
 index is: 661, source_index: 259, before: ID, after: %NULL%
constant  :  %MARK%  "false"  
 index is: 662, source_index: 260, before: %NULL%, after: "false"
constant  :  "false"  %MARK%  
 index is: 663, source_index: 260, before: "false", after: %NULL%
constant  :  %MARK%  "true"  
 index is: 664, source_index: 261, before: %NULL%, after: "true"
constant  :  "true"  %MARK%  
 index is: 665, source_index: 261, before: "true", after: %NULL%
constant  :  %MARK%  "null"  
 index is: 666, source_index: 262, before: %NULL%, after: "null"
constant  :  "null"  %MARK%  
 index is: 667, source_index: 262, before: "null", after: %NULL%
constant  :  %MARK%  NUM  
 index is: 668, source_index: 263, before: %NULL%, after: NUM
constant  :  NUM  %MARK%  
 index is: 669, source_index: 263, before: NUM, after: %NULL%
array  :  %MARK%  "{"  array_opt_2  "}"  
 index is: 670, source_index: 264, before: %NULL%, after: "{"
array  :  "{"  %MARK%  array_opt_2  "}"  
 index is: 671, source_index: 264, before: "{", after: array_opt_2
array  :  "{"  array_opt_2  %MARK%  "}"  
 index is: 672, source_index: 264, before: array_opt_2, after: "}"
array  :  "{"  array_opt_2  "}"  %MARK%  
 index is: 673, source_index: 264, before: "}", after: %NULL%
array_opt_2  :  %MARK%  
 index is: 674, source_index: 265, before: %NULL%, after: %NULL%
array_opt_2  :  %MARK%  expr  
 index is: 675, source_index: 266, before: %NULL%, after: expr
array_opt_2  :  expr  %MARK%  
 index is: 676, source_index: 266, before: expr, after: %NULL%
fcall  :  %MARK%  "("  fcall_opt_2  ")"  
 index is: 677, source_index: 267, before: %NULL%, after: "("
fcall  :  "("  %MARK%  fcall_opt_2  ")"  
 index is: 678, source_index: 267, before: "(", after: fcall_opt_2
fcall  :  "("  fcall_opt_2  %MARK%  ")"  
 index is: 679, source_index: 267, before: fcall_opt_2, after: ")"
fcall  :  "("  fcall_opt_2  ")"  %MARK%  
 index is: 680, source_index: 267, before: ")", after: %NULL%
fcall_opt_2  :  %MARK%  
 index is: 681, source_index: 268, before: %NULL%, after: %NULL%
fcall_opt_2  :  %MARK%  expr  
 index is: 682, source_index: 269, before: %NULL%, after: expr
fcall_opt_2  :  expr  %MARK%  
 index is: 683, source_index: 269, before: expr, after: %NULL%
index  :  %MARK%  "["  basic_expr  "]"  
 index is: 684, source_index: 270, before: %NULL%, after: "["
index  :  "["  %MARK%  basic_expr  "]"  
 index is: 685, source_index: 270, before: "[", after: basic_expr
index  :  "["  basic_expr  %MARK%  "]"  
 index is: 686, source_index: 270, before: basic_expr, after: "]"
index  :  "["  basic_expr  "]"  %MARK%  
 index is: 687, source_index: 270, before: "]", after: %NULL%



###########
ADD TARGETS
###########
%start%  :  %MARK%  begin  
 index is: 0, term type: to_deduce, before: %NULL%, after: begin
TARGET LIST: 
target index: 1  , change_value: begin
target index: 2  , change_value: %NULL%

%start%  :  begin  %MARK%  
 index is: 1, term type: accept, before: begin, after: %NULL%
TARGET LIST: 

begin  :  %MARK%  stmts  
 index is: 2, term type: to_deduce, before: %NULL%, after: stmts
TARGET LIST: 
target index: 3  , change_value: stmts
target index: 14  , change_value: %NULL%

begin  :  stmts  %MARK%  
 index is: 3, term type: deduce, before: stmts, after: %NULL%
TARGET LIST: 

ignore  :  %MARK%  ignore_rep_1  
 index is: 4, term type: to_deduce, before: %NULL%, after: ignore_rep_1
TARGET LIST: 
target index: 5  , change_value: ignore_rep_1
target index: 6  , change_value: %NULL%
target index: 7  , change_value: %NULL%

ignore  :  ignore_rep_1  %MARK%  
 index is: 5, term type: deduce, before: ignore_rep_1, after: %NULL%
TARGET LIST: 

ignore_rep_1  :  %MARK%  
 index is: 6, term type: wrong type, before: %NULL%, after: %NULL%
TARGET LIST: 

ignore_rep_1  :  %MARK%  ENDL  ignore_rep_1  
 index is: 7, term type: shift, before: %NULL%, after: ENDL
TARGET LIST: 
target index: 8  , change_value: ENDL

ignore_rep_1  :  ENDL  %MARK%  ignore_rep_1  
 index is: 8, term type: to_deduce, before: ENDL, after: ignore_rep_1
TARGET LIST: 
target index: 6  , change_value: %NULL%
target index: 7  , change_value: %NULL%
target index: 9  , change_value: ignore_rep_1

ignore_rep_1  :  ENDL  ignore_rep_1  %MARK%  
 index is: 9, term type: deduce, before: ignore_rep_1, after: %NULL%
TARGET LIST: 

endline  :  %MARK%  ";"  
 index is: 10, term type: shift, before: %NULL%, after: ";"
TARGET LIST: 
target index: 11  , change_value: ";"

endline  :  ";"  %MARK%  
 index is: 11, term type: deduce, before: ";", after: %NULL%
TARGET LIST: 

endline  :  %MARK%  ENDL  
 index is: 12, term type: shift, before: %NULL%, after: ENDL
TARGET LIST: 
target index: 13  , change_value: ENDL

endline  :  ENDL  %MARK%  
 index is: 13, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

stmts  :  %MARK%  stmts_rep_1  
 index is: 14, term type: to_deduce, before: %NULL%, after: stmts_rep_1
TARGET LIST: 
target index: 15  , change_value: stmts_rep_1
target index: 16  , change_value: %NULL%
target index: 17  , change_value: %NULL%

stmts  :  stmts_rep_1  %MARK%  
 index is: 15, term type: deduce, before: stmts_rep_1, after: %NULL%
TARGET LIST: 

stmts_rep_1  :  %MARK%  
 index is: 16, term type: wrong type, before: %NULL%, after: %NULL%
TARGET LIST: 

stmts_rep_1  :  %MARK%  statements  stmts_rep_1_rep_2  stmts_rep_1  
 index is: 17, term type: to_deduce, before: %NULL%, after: statements
TARGET LIST: 
target index: 18  , change_value: statements

stmts_rep_1  :  statements  %MARK%  stmts_rep_1_rep_2  stmts_rep_1  
 index is: 18, term type: to_deduce, before: statements, after: stmts_rep_1_rep_2
TARGET LIST: 
target index: 19  , change_value: stmts_rep_1_rep_2
target index: 21  , change_value: %NULL%
target index: 22  , change_value: %NULL%

stmts_rep_1  :  statements  stmts_rep_1_rep_2  %MARK%  stmts_rep_1  
 index is: 19, term type: to_deduce, before: stmts_rep_1_rep_2, after: stmts_rep_1
TARGET LIST: 
target index: 16  , change_value: %NULL%
target index: 17  , change_value: %NULL%
target index: 20  , change_value: stmts_rep_1

stmts_rep_1  :  statements  stmts_rep_1_rep_2  stmts_rep_1  %MARK%  
 index is: 20, term type: deduce, before: stmts_rep_1, after: %NULL%
TARGET LIST: 

stmts_rep_1_rep_2  :  %MARK%  
 index is: 21, term type: wrong type, before: %NULL%, after: %NULL%
TARGET LIST: 

stmts_rep_1_rep_2  :  %MARK%  ENDL  stmts_rep_1_rep_2  
 index is: 22, term type: shift, before: %NULL%, after: ENDL
TARGET LIST: 
target index: 23  , change_value: ENDL

stmts_rep_1_rep_2  :  ENDL  %MARK%  stmts_rep_1_rep_2  
 index is: 23, term type: to_deduce, before: ENDL, after: stmts_rep_1_rep_2
TARGET LIST: 
target index: 21  , change_value: %NULL%
target index: 22  , change_value: %NULL%
target index: 24  , change_value: stmts_rep_1_rep_2

stmts_rep_1_rep_2  :  ENDL  stmts_rep_1_rep_2  %MARK%  
 index is: 24, term type: deduce, before: stmts_rep_1_rep_2, after: %NULL%
TARGET LIST: 

decl_stmts  :  %MARK%  decl_stmts_rep_1  
 index is: 25, term type: to_deduce, before: %NULL%, after: decl_stmts_rep_1
TARGET LIST: 
target index: 26  , change_value: decl_stmts_rep_1
target index: 27  , change_value: %NULL%
target index: 28  , change_value: %NULL%

decl_stmts  :  decl_stmts_rep_1  %MARK%  
 index is: 26, term type: deduce, before: decl_stmts_rep_1, after: %NULL%
TARGET LIST: 

decl_stmts_rep_1  :  %MARK%  
 index is: 27, term type: wrong type, before: %NULL%, after: %NULL%
TARGET LIST: 

decl_stmts_rep_1  :  %MARK%  declaration  decl_stmts_rep_1_rep_2  decl_stmts_rep_1  
 index is: 28, term type: to_deduce, before: %NULL%, after: declaration
TARGET LIST: 
target index: 29  , change_value: declaration
target index: 84  , change_value: %NULL%
target index: 86  , change_value: %NULL%
target index: 88  , change_value: %NULL%
target index: 90  , change_value: %NULL%
target index: 92  , change_value: %NULL%
target index: 94  , change_value: %NULL%

decl_stmts_rep_1  :  declaration  %MARK%  decl_stmts_rep_1_rep_2  decl_stmts_rep_1  
 index is: 29, term type: to_deduce, before: declaration, after: decl_stmts_rep_1_rep_2
TARGET LIST: 
target index: 30  , change_value: decl_stmts_rep_1_rep_2
target index: 32  , change_value: %NULL%
target index: 33  , change_value: %NULL%

decl_stmts_rep_1  :  declaration  decl_stmts_rep_1_rep_2  %MARK%  decl_stmts_rep_1  
 index is: 30, term type: to_deduce, before: decl_stmts_rep_1_rep_2, after: decl_stmts_rep_1
TARGET LIST: 
target index: 27  , change_value: %NULL%
target index: 28  , change_value: %NULL%
target index: 31  , change_value: decl_stmts_rep_1

decl_stmts_rep_1  :  declaration  decl_stmts_rep_1_rep_2  decl_stmts_rep_1  %MARK%  
 index is: 31, term type: deduce, before: decl_stmts_rep_1, after: %NULL%
TARGET LIST: 

decl_stmts_rep_1_rep_2  :  %MARK%  
 index is: 32, term type: wrong type, before: %NULL%, after: %NULL%
TARGET LIST: 

decl_stmts_rep_1_rep_2  :  %MARK%  ENDL  decl_stmts_rep_1_rep_2  
 index is: 33, term type: shift, before: %NULL%, after: ENDL
TARGET LIST: 
target index: 34  , change_value: ENDL

decl_stmts_rep_1_rep_2  :  ENDL  %MARK%  decl_stmts_rep_1_rep_2  
 index is: 34, term type: to_deduce, before: ENDL, after: decl_stmts_rep_1_rep_2
TARGET LIST: 
target index: 32  , change_value: %NULL%
target index: 33  , change_value: %NULL%
target index: 35  , change_value: decl_stmts_rep_1_rep_2

decl_stmts_rep_1_rep_2  :  ENDL  decl_stmts_rep_1_rep_2  %MARK%  
 index is: 35, term type: deduce, before: decl_stmts_rep_1_rep_2, after: %NULL%
TARGET LIST: 

endblock  :  %MARK%  catch_stmt  
 index is: 36, term type: to_deduce, before: %NULL%, after: catch_stmt
TARGET LIST: 
target index: 37  , change_value: catch_stmt
target index: 336  , change_value: %NULL%

endblock  :  catch_stmt  %MARK%  
 index is: 37, term type: deduce, before: catch_stmt, after: %NULL%
TARGET LIST: 

endblock  :  %MARK%  until_stmt  
 index is: 38, term type: to_deduce, before: %NULL%, after: until_stmt
TARGET LIST: 
target index: 39  , change_value: until_stmt
target index: 246  , change_value: %NULL%

endblock  :  until_stmt  %MARK%  
 index is: 39, term type: deduce, before: until_stmt, after: %NULL%
TARGET LIST: 

endblock  :  %MARK%  else_stmt  
 index is: 40, term type: to_deduce, before: %NULL%, after: else_stmt
TARGET LIST: 
target index: 41  , change_value: else_stmt
target index: 185  , change_value: %NULL%

endblock  :  else_stmt  %MARK%  
 index is: 41, term type: deduce, before: else_stmt, after: %NULL%
TARGET LIST: 

endblock  :  %MARK%  end_stmt  
 index is: 42, term type: to_deduce, before: %NULL%, after: end_stmt
TARGET LIST: 
target index: 43  , change_value: end_stmt
target index: 378  , change_value: %NULL%

endblock  :  end_stmt  %MARK%  
 index is: 43, term type: deduce, before: end_stmt, after: %NULL%
TARGET LIST: 

statement  :  %MARK%  expr_stmt  
 index is: 44, term type: to_deduce, before: %NULL%, after: expr_stmt
TARGET LIST: 
target index: 45  , change_value: expr_stmt
target index: 375  , change_value: %NULL%

statement  :  expr_stmt  %MARK%  
 index is: 45, term type: deduce, before: expr_stmt, after: %NULL%
TARGET LIST: 

statement  :  %MARK%  class_stmt  
 index is: 46, term type: to_deduce, before: %NULL%, after: class_stmt
TARGET LIST: 
target index: 47  , change_value: class_stmt
target index: 352  , change_value: %NULL%

statement  :  class_stmt  %MARK%  
 index is: 47, term type: deduce, before: class_stmt, after: %NULL%
TARGET LIST: 

statement  :  %MARK%  throw_stmt  
 index is: 48, term type: to_deduce, before: %NULL%, after: throw_stmt
TARGET LIST: 
target index: 49  , change_value: throw_stmt
target index: 345  , change_value: %NULL%

statement  :  throw_stmt  %MARK%  
 index is: 49, term type: deduce, before: throw_stmt, after: %NULL%
TARGET LIST: 

statement  :  %MARK%  try_stmt  
 index is: 50, term type: to_deduce, before: %NULL%, after: try_stmt
TARGET LIST: 
target index: 51  , change_value: try_stmt
target index: 324  , change_value: %NULL%

statement  :  try_stmt  %MARK%  
 index is: 51, term type: deduce, before: try_stmt, after: %NULL%
TARGET LIST: 

statement  :  %MARK%  return_stmt  
 index is: 52, term type: to_deduce, before: %NULL%, after: return_stmt
TARGET LIST: 
target index: 53  , change_value: return_stmt
target index: 317  , change_value: %NULL%

statement  :  return_stmt  %MARK%  
 index is: 53, term type: deduce, before: return_stmt, after: %NULL%
TARGET LIST: 

statement  :  %MARK%  function_stmt  
 index is: 54, term type: to_deduce, before: %NULL%, after: function_stmt
TARGET LIST: 
target index: 55  , change_value: function_stmt
target index: 292  , change_value: %NULL%

statement  :  function_stmt  %MARK%  
 index is: 55, term type: deduce, before: function_stmt, after: %NULL%
TARGET LIST: 

statement  :  %MARK%  control_stmt  
 index is: 56, term type: to_deduce, before: %NULL%, after: control_stmt
TARGET LIST: 
target index: 57  , change_value: control_stmt
target index: 368  , change_value: %NULL%

statement  :  control_stmt  %MARK%  
 index is: 57, term type: deduce, before: control_stmt, after: %NULL%
TARGET LIST: 

statement  :  %MARK%  foreach_stmt  
 index is: 58, term type: to_deduce, before: %NULL%, after: foreach_stmt
TARGET LIST: 
target index: 59  , change_value: foreach_stmt
target index: 275  , change_value: %NULL%

statement  :  foreach_stmt  %MARK%  
 index is: 59, term type: deduce, before: foreach_stmt, after: %NULL%
TARGET LIST: 

statement  :  %MARK%  for_stmt  
 index is: 60, term type: to_deduce, before: %NULL%, after: for_stmt
TARGET LIST: 
target index: 61  , change_value: for_stmt
target index: 250  , change_value: %NULL%

statement  :  for_stmt  %MARK%  
 index is: 61, term type: deduce, before: for_stmt, after: %NULL%
TARGET LIST: 

statement  :  %MARK%  loop_stmt  
 index is: 62, term type: to_deduce, before: %NULL%, after: loop_stmt
TARGET LIST: 
target index: 63  , change_value: loop_stmt
target index: 235  , change_value: %NULL%

statement  :  loop_stmt  %MARK%  
 index is: 63, term type: deduce, before: loop_stmt, after: %NULL%
TARGET LIST: 

statement  :  %MARK%  while_stmt  
 index is: 64, term type: to_deduce, before: %NULL%, after: while_stmt
TARGET LIST: 
target index: 65  , change_value: while_stmt
target index: 228  , change_value: %NULL%

statement  :  while_stmt  %MARK%  
 index is: 65, term type: deduce, before: while_stmt, after: %NULL%
TARGET LIST: 

statement  :  %MARK%  switch_stmt  
 index is: 66, term type: to_deduce, before: %NULL%, after: switch_stmt
TARGET LIST: 
target index: 67  , change_value: switch_stmt
target index: 194  , change_value: %NULL%

statement  :  switch_stmt  %MARK%  
 index is: 67, term type: deduce, before: switch_stmt, after: %NULL%
TARGET LIST: 

statement  :  %MARK%  if_stmt  
 index is: 68, term type: to_deduce, before: %NULL%, after: if_stmt
TARGET LIST: 
target index: 69  , change_value: if_stmt
target index: 172  , change_value: %NULL%

statement  :  if_stmt  %MARK%  
 index is: 69, term type: deduce, before: if_stmt, after: %NULL%
TARGET LIST: 

statement  :  %MARK%  using_stmt  
 index is: 70, term type: to_deduce, before: %NULL%, after: using_stmt
TARGET LIST: 
target index: 71  , change_value: using_stmt
target index: 161  , change_value: %NULL%

statement  :  using_stmt  %MARK%  
 index is: 71, term type: deduce, before: using_stmt, after: %NULL%
TARGET LIST: 

statement  :  %MARK%  namespace_stmt  
 index is: 72, term type: to_deduce, before: %NULL%, after: namespace_stmt
TARGET LIST: 
target index: 73  , change_value: namespace_stmt
target index: 154  , change_value: %NULL%

statement  :  namespace_stmt  %MARK%  
 index is: 73, term type: deduce, before: namespace_stmt, after: %NULL%
TARGET LIST: 

statement  :  %MARK%  block_stmt  
 index is: 74, term type: to_deduce, before: %NULL%, after: block_stmt
TARGET LIST: 
target index: 75  , change_value: block_stmt
target index: 148  , change_value: %NULL%

statement  :  block_stmt  %MARK%  
 index is: 75, term type: deduce, before: block_stmt, after: %NULL%
TARGET LIST: 

statement  :  %MARK%  var_stmt  
 index is: 76, term type: to_deduce, before: %NULL%, after: var_stmt
TARGET LIST: 
target index: 77  , change_value: var_stmt
target index: 113  , change_value: %NULL%

statement  :  var_stmt  %MARK%  
 index is: 77, term type: deduce, before: var_stmt, after: %NULL%
TARGET LIST: 

statement  :  %MARK%  import_stmt  
 index is: 78, term type: to_deduce, before: %NULL%, after: import_stmt
TARGET LIST: 
target index: 79  , change_value: import_stmt
target index: 103  , change_value: %NULL%

statement  :  import_stmt  %MARK%  
 index is: 79, term type: deduce, before: import_stmt, after: %NULL%
TARGET LIST: 

statement  :  %MARK%  package_stmt  
 index is: 80, term type: to_deduce, before: %NULL%, after: package_stmt
TARGET LIST: 
target index: 81  , change_value: package_stmt
target index: 99  , change_value: %NULL%

statement  :  package_stmt  %MARK%  
 index is: 81, term type: deduce, before: package_stmt, after: %NULL%
TARGET LIST: 

statement  :  %MARK%  prep_stmt  
 index is: 82, term type: to_deduce, before: %NULL%, after: prep_stmt
TARGET LIST: 
target index: 83  , change_value: prep_stmt
target index: 96  , change_value: %NULL%

statement  :  prep_stmt  %MARK%  
 index is: 83, term type: deduce, before: prep_stmt, after: %NULL%
TARGET LIST: 

declaration  :  %MARK%  class_stmt  
 index is: 84, term type: to_deduce, before: %NULL%, after: class_stmt
TARGET LIST: 
target index: 85  , change_value: class_stmt
target index: 352  , change_value: %NULL%

declaration  :  class_stmt  %MARK%  
 index is: 85, term type: deduce, before: class_stmt, after: %NULL%
TARGET LIST: 

declaration  :  %MARK%  function_stmt  
 index is: 86, term type: to_deduce, before: %NULL%, after: function_stmt
TARGET LIST: 
target index: 87  , change_value: function_stmt
target index: 292  , change_value: %NULL%

declaration  :  function_stmt  %MARK%  
 index is: 87, term type: deduce, before: function_stmt, after: %NULL%
TARGET LIST: 

declaration  :  %MARK%  using_stmt  
 index is: 88, term type: to_deduce, before: %NULL%, after: using_stmt
TARGET LIST: 
target index: 89  , change_value: using_stmt
target index: 161  , change_value: %NULL%

declaration  :  using_stmt  %MARK%  
 index is: 89, term type: deduce, before: using_stmt, after: %NULL%
TARGET LIST: 

declaration  :  %MARK%  var_stmt  
 index is: 90, term type: to_deduce, before: %NULL%, after: var_stmt
TARGET LIST: 
target index: 91  , change_value: var_stmt
target index: 113  , change_value: %NULL%

declaration  :  var_stmt  %MARK%  
 index is: 91, term type: deduce, before: var_stmt, after: %NULL%
TARGET LIST: 

declaration  :  %MARK%  namespace_stmt  
 index is: 92, term type: to_deduce, before: %NULL%, after: namespace_stmt
TARGET LIST: 
target index: 93  , change_value: namespace_stmt
target index: 154  , change_value: %NULL%

declaration  :  namespace_stmt  %MARK%  
 index is: 93, term type: deduce, before: namespace_stmt, after: %NULL%
TARGET LIST: 

declaration  :  %MARK%  prep_stmt  
 index is: 94, term type: to_deduce, before: %NULL%, after: prep_stmt
TARGET LIST: 
target index: 95  , change_value: prep_stmt
target index: 96  , change_value: %NULL%

declaration  :  prep_stmt  %MARK%  
 index is: 95, term type: deduce, before: prep_stmt, after: %NULL%
TARGET LIST: 

prep_stmt  :  %MARK%  PREP  ENDL  
 index is: 96, term type: shift, before: %NULL%, after: PREP
TARGET LIST: 
target index: 97  , change_value: PREP

prep_stmt  :  PREP  %MARK%  ENDL  
 index is: 97, term type: shift, before: PREP, after: ENDL
TARGET LIST: 
target index: 98  , change_value: ENDL

prep_stmt  :  PREP  ENDL  %MARK%  
 index is: 98, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

package_stmt  :  %MARK%  "package"  ID  endline  
 index is: 99, term type: shift, before: %NULL%, after: "package"
TARGET LIST: 
target index: 100  , change_value: "package"

package_stmt  :  "package"  %MARK%  ID  endline  
 index is: 100, term type: shift, before: "package", after: ID
TARGET LIST: 
target index: 101  , change_value: ID

package_stmt  :  "package"  ID  %MARK%  endline  
 index is: 101, term type: to_deduce, before: ID, after: endline
TARGET LIST: 
target index: 10  , change_value: %NULL%
target index: 12  , change_value: %NULL%
target index: 102  , change_value: endline

package_stmt  :  "package"  ID  endline  %MARK%  
 index is: 102, term type: deduce, before: endline, after: %NULL%
TARGET LIST: 

import_stmt  :  %MARK%  "import"  import_list  endline  
 index is: 103, term type: shift, before: %NULL%, after: "import"
TARGET LIST: 
target index: 104  , change_value: "import"

import_stmt  :  "import"  %MARK%  import_list  endline  
 index is: 104, term type: to_deduce, before: "import", after: import_list
TARGET LIST: 
target index: 105  , change_value: import_list

import_stmt  :  "import"  import_list  %MARK%  endline  
 index is: 105, term type: to_deduce, before: import_list, after: endline
TARGET LIST: 
target index: 10  , change_value: %NULL%
target index: 12  , change_value: %NULL%
target index: 106  , change_value: endline

import_stmt  :  "import"  import_list  endline  %MARK%  
 index is: 106, term type: deduce, before: endline, after: %NULL%
TARGET LIST: 

var_def  :  %MARK%  var_list  
 index is: 107, term type: to_deduce, before: %NULL%, after: var_list
TARGET LIST: 
target index: 108  , change_value: var_list
target index: 139  , change_value: %NULL%

var_def  :  var_list  %MARK%  
 index is: 108, term type: deduce, before: var_list, after: %NULL%
TARGET LIST: 

var_def  :  %MARK%  var_bind  "="  basic_expr  
 index is: 109, term type: to_deduce, before: %NULL%, after: var_bind
TARGET LIST: 
target index: 110  , change_value: var_bind
target index: 123  , change_value: %NULL%

var_def  :  var_bind  %MARK%  "="  basic_expr  
 index is: 110, term type: shift, before: var_bind, after: "="
TARGET LIST: 
target index: 111  , change_value: "="

var_def  :  var_bind  "="  %MARK%  basic_expr  
 index is: 111, term type: to_deduce, before: "=", after: basic_expr
TARGET LIST: 
target index: 112  , change_value: basic_expr
target index: 392  , change_value: %NULL%
target index: 395  , change_value: %NULL%

var_def  :  var_bind  "="  basic_expr  %MARK%  
 index is: 112, term type: deduce, before: basic_expr, after: %NULL%
TARGET LIST: 

var_stmt  :  %MARK%  var_stmt_decl_1  var_def  endline  
 index is: 113, term type: to_deduce, before: %NULL%, after: var_stmt_decl_1
TARGET LIST: 
target index: 114  , change_value: var_stmt_decl_1
target index: 117  , change_value: %NULL%
target index: 119  , change_value: %NULL%
target index: 121  , change_value: %NULL%

var_stmt  :  var_stmt_decl_1  %MARK%  var_def  endline  
 index is: 114, term type: to_deduce, before: var_stmt_decl_1, after: var_def
TARGET LIST: 
target index: 107  , change_value: %NULL%
target index: 109  , change_value: %NULL%
target index: 115  , change_value: var_def

var_stmt  :  var_stmt_decl_1  var_def  %MARK%  endline  
 index is: 115, term type: to_deduce, before: var_def, after: endline
TARGET LIST: 
target index: 10  , change_value: %NULL%
target index: 12  , change_value: %NULL%
target index: 116  , change_value: endline

var_stmt  :  var_stmt_decl_1  var_def  endline  %MARK%  
 index is: 116, term type: deduce, before: endline, after: %NULL%
TARGET LIST: 

var_stmt_decl_1  :  %MARK%  "constant"  
 index is: 117, term type: shift, before: %NULL%, after: "constant"
TARGET LIST: 
target index: 118  , change_value: "constant"

var_stmt_decl_1  :  "constant"  %MARK%  
 index is: 118, term type: deduce, before: "constant", after: %NULL%
TARGET LIST: 

var_stmt_decl_1  :  %MARK%  "link"  
 index is: 119, term type: shift, before: %NULL%, after: "link"
TARGET LIST: 
target index: 120  , change_value: "link"

var_stmt_decl_1  :  "link"  %MARK%  
 index is: 120, term type: deduce, before: "link", after: %NULL%
TARGET LIST: 

var_stmt_decl_1  :  %MARK%  "var"  
 index is: 121, term type: shift, before: %NULL%, after: "var"
TARGET LIST: 
target index: 122  , change_value: "var"

var_stmt_decl_1  :  "var"  %MARK%  
 index is: 122, term type: deduce, before: "var", after: %NULL%
TARGET LIST: 

var_bind  :  %MARK%  "("  var_bind_list  var_bind_rep_3  ")"  
 index is: 123, term type: shift, before: %NULL%, after: "("
TARGET LIST: 
target index: 124  , change_value: "("

var_bind  :  "("  %MARK%  var_bind_list  var_bind_rep_3  ")"  
 index is: 124, term type: to_deduce, before: "(", after: var_bind_list
TARGET LIST: 
target index: 125  , change_value: var_bind_list
target index: 133  , change_value: %NULL%
target index: 135  , change_value: %NULL%
target index: 137  , change_value: %NULL%

var_bind  :  "("  var_bind_list  %MARK%  var_bind_rep_3  ")"  
 index is: 125, term type: to_deduce, before: var_bind_list, after: var_bind_rep_3
TARGET LIST: 
target index: 126  , change_value: var_bind_rep_3
target index: 128  , change_value: %NULL%
target index: 129  , change_value: %NULL%

var_bind  :  "("  var_bind_list  var_bind_rep_3  %MARK%  ")"  
 index is: 126, term type: shift, before: var_bind_rep_3, after: ")"
TARGET LIST: 
target index: 127  , change_value: ")"

var_bind  :  "("  var_bind_list  var_bind_rep_3  ")"  %MARK%  
 index is: 127, term type: deduce, before: ")", after: %NULL%
TARGET LIST: 

var_bind_rep_3  :  %MARK%  
 index is: 128, term type: wrong type, before: %NULL%, after: %NULL%
TARGET LIST: 

var_bind_rep_3  :  %MARK%  ","  var_bind_list  var_bind_rep_3  
 index is: 129, term type: shift, before: %NULL%, after: ","
TARGET LIST: 
target index: 130  , change_value: ","

var_bind_rep_3  :  ","  %MARK%  var_bind_list  var_bind_rep_3  
 index is: 130, term type: to_deduce, before: ",", after: var_bind_list
TARGET LIST: 
target index: 131  , change_value: var_bind_list
target index: 133  , change_value: %NULL%
target index: 135  , change_value: %NULL%
target index: 137  , change_value: %NULL%

var_bind_rep_3  :  ","  var_bind_list  %MARK%  var_bind_rep_3  
 index is: 131, term type: to_deduce, before: var_bind_list, after: var_bind_rep_3
TARGET LIST: 
target index: 128  , change_value: %NULL%
target index: 129  , change_value: %NULL%
target index: 132  , change_value: var_bind_rep_3

var_bind_rep_3  :  ","  var_bind_list  var_bind_rep_3  %MARK%  
 index is: 132, term type: deduce, before: var_bind_rep_3, after: %NULL%
TARGET LIST: 

var_bind_list  :  %MARK%  var_bind  
 index is: 133, term type: to_deduce, before: %NULL%, after: var_bind
TARGET LIST: 
target index: 123  , change_value: %NULL%
target index: 134  , change_value: var_bind

var_bind_list  :  var_bind  %MARK%  
 index is: 134, term type: deduce, before: var_bind, after: %NULL%
TARGET LIST: 

var_bind_list  :  %MARK%  ETC  
 index is: 135, term type: shift, before: %NULL%, after: ETC
TARGET LIST: 
target index: 136  , change_value: ETC

var_bind_list  :  ETC  %MARK%  
 index is: 136, term type: deduce, before: ETC, after: %NULL%
TARGET LIST: 

var_bind_list  :  %MARK%  ID  
 index is: 137, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 138  , change_value: ID

var_bind_list  :  ID  %MARK%  
 index is: 138, term type: deduce, before: ID, after: %NULL%
TARGET LIST: 

var_list  :  %MARK%  ID  "="  single_expr  var_list_opt_4  
 index is: 139, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 140  , change_value: ID

var_list  :  ID  %MARK%  "="  single_expr  var_list_opt_4  
 index is: 140, term type: shift, before: ID, after: "="
TARGET LIST: 
target index: 141  , change_value: "="

var_list  :  ID  "="  %MARK%  single_expr  var_list_opt_4  
 index is: 141, term type: to_deduce, before: "=", after: single_expr
TARGET LIST: 
target index: 142  , change_value: single_expr
target index: 388  , change_value: %NULL%
target index: 390  , change_value: %NULL%

var_list  :  ID  "="  single_expr  %MARK%  var_list_opt_4  
 index is: 142, term type: to_deduce, before: single_expr, after: var_list_opt_4
TARGET LIST: 
target index: 143  , change_value: var_list_opt_4
target index: 144  , change_value: %NULL%
target index: 145  , change_value: %NULL%

var_list  :  ID  "="  single_expr  var_list_opt_4  %MARK%  
 index is: 143, term type: deduce, before: var_list_opt_4, after: %NULL%
TARGET LIST: 

var_list_opt_4  :  %MARK%  
 index is: 144, term type: wrong type, before: %NULL%, after: %NULL%
TARGET LIST: 

var_list_opt_4  :  %MARK%  ","  var_list  
 index is: 145, term type: shift, before: %NULL%, after: ","
TARGET LIST: 
target index: 146  , change_value: ","

var_list_opt_4  :  ","  %MARK%  var_list  
 index is: 146, term type: to_deduce, before: ",", after: var_list
TARGET LIST: 
target index: 139  , change_value: %NULL%
target index: 147  , change_value: var_list

var_list_opt_4  :  ","  var_list  %MARK%  
 index is: 147, term type: deduce, before: var_list, after: %NULL%
TARGET LIST: 

block_stmt  :  %MARK%  "block"  ENDL  stmts  "end"  ENDL  
 index is: 148, term type: shift, before: %NULL%, after: "block"
TARGET LIST: 
target index: 149  , change_value: "block"

block_stmt  :  "block"  %MARK%  ENDL  stmts  "end"  ENDL  
 index is: 149, term type: shift, before: "block", after: ENDL
TARGET LIST: 
target index: 150  , change_value: ENDL

block_stmt  :  "block"  ENDL  %MARK%  stmts  "end"  ENDL  
 index is: 150, term type: to_deduce, before: ENDL, after: stmts
TARGET LIST: 
target index: 14  , change_value: %NULL%
target index: 151  , change_value: stmts

block_stmt  :  "block"  ENDL  stmts  %MARK%  "end"  ENDL  
 index is: 151, term type: shift, before: stmts, after: "end"
TARGET LIST: 
target index: 152  , change_value: "end"

block_stmt  :  "block"  ENDL  stmts  "end"  %MARK%  ENDL  
 index is: 152, term type: shift, before: "end", after: ENDL
TARGET LIST: 
target index: 153  , change_value: ENDL

block_stmt  :  "block"  ENDL  stmts  "end"  ENDL  %MARK%  
 index is: 153, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

namespace_stmt  :  %MARK%  "namespace"  ID  ENDL  decl_stmts  "end"  ENDL  
 index is: 154, term type: shift, before: %NULL%, after: "namespace"
TARGET LIST: 
target index: 155  , change_value: "namespace"

namespace_stmt  :  "namespace"  %MARK%  ID  ENDL  decl_stmts  "end"  ENDL  
 index is: 155, term type: shift, before: "namespace", after: ID
TARGET LIST: 
target index: 156  , change_value: ID

namespace_stmt  :  "namespace"  ID  %MARK%  ENDL  decl_stmts  "end"  ENDL  
 index is: 156, term type: shift, before: ID, after: ENDL
TARGET LIST: 
target index: 157  , change_value: ENDL

namespace_stmt  :  "namespace"  ID  ENDL  %MARK%  decl_stmts  "end"  ENDL  
 index is: 157, term type: to_deduce, before: ENDL, after: decl_stmts
TARGET LIST: 
target index: 25  , change_value: %NULL%
target index: 158  , change_value: decl_stmts

namespace_stmt  :  "namespace"  ID  ENDL  decl_stmts  %MARK%  "end"  ENDL  
 index is: 158, term type: shift, before: decl_stmts, after: "end"
TARGET LIST: 
target index: 159  , change_value: "end"

namespace_stmt  :  "namespace"  ID  ENDL  decl_stmts  "end"  %MARK%  ENDL  
 index is: 159, term type: shift, before: "end", after: ENDL
TARGET LIST: 
target index: 160  , change_value: ENDL

namespace_stmt  :  "namespace"  ID  ENDL  decl_stmts  "end"  ENDL  %MARK%  
 index is: 160, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

using_stmt  :  %MARK%  "using"  using_list  endline  
 index is: 161, term type: shift, before: %NULL%, after: "using"
TARGET LIST: 
target index: 162  , change_value: "using"

using_stmt  :  "using"  %MARK%  using_list  endline  
 index is: 162, term type: to_deduce, before: "using", after: using_list
TARGET LIST: 
target index: 163  , change_value: using_list
target index: 165  , change_value: %NULL%

using_stmt  :  "using"  using_list  %MARK%  endline  
 index is: 163, term type: to_deduce, before: using_list, after: endline
TARGET LIST: 
target index: 10  , change_value: %NULL%
target index: 12  , change_value: %NULL%
target index: 164  , change_value: endline

using_stmt  :  "using"  using_list  endline  %MARK%  
 index is: 164, term type: deduce, before: endline, after: %NULL%
TARGET LIST: 

using_list  :  %MARK%  module_list  using_list_opt_2  
 index is: 165, term type: to_deduce, before: %NULL%, after: module_list
TARGET LIST: 
target index: 166  , change_value: module_list

using_list  :  module_list  %MARK%  using_list_opt_2  
 index is: 166, term type: to_deduce, before: module_list, after: using_list_opt_2
TARGET LIST: 
target index: 167  , change_value: using_list_opt_2
target index: 168  , change_value: %NULL%
target index: 169  , change_value: %NULL%

using_list  :  module_list  using_list_opt_2  %MARK%  
 index is: 167, term type: deduce, before: using_list_opt_2, after: %NULL%
TARGET LIST: 

using_list_opt_2  :  %MARK%  
 index is: 168, term type: wrong type, before: %NULL%, after: %NULL%
TARGET LIST: 

using_list_opt_2  :  %MARK%  ","  using_list  
 index is: 169, term type: shift, before: %NULL%, after: ","
TARGET LIST: 
target index: 170  , change_value: ","

using_list_opt_2  :  ","  %MARK%  using_list  
 index is: 170, term type: to_deduce, before: ",", after: using_list
TARGET LIST: 
target index: 165  , change_value: %NULL%
target index: 171  , change_value: using_list

using_list_opt_2  :  ","  using_list  %MARK%  
 index is: 171, term type: deduce, before: using_list, after: %NULL%
TARGET LIST: 

if_stmt  :  %MARK%  "if"  basic_expr  ENDL  stmts  if_stmt_rep_5  
 index is: 172, term type: shift, before: %NULL%, after: "if"
TARGET LIST: 
target index: 173  , change_value: "if"

if_stmt  :  "if"  %MARK%  basic_expr  ENDL  stmts  if_stmt_rep_5  
 index is: 173, term type: to_deduce, before: "if", after: basic_expr
TARGET LIST: 
target index: 174  , change_value: basic_expr
target index: 392  , change_value: %NULL%
target index: 395  , change_value: %NULL%

if_stmt  :  "if"  basic_expr  %MARK%  ENDL  stmts  if_stmt_rep_5  
 index is: 174, term type: shift, before: basic_expr, after: ENDL
TARGET LIST: 
target index: 175  , change_value: ENDL

if_stmt  :  "if"  basic_expr  ENDL  %MARK%  stmts  if_stmt_rep_5  
 index is: 175, term type: to_deduce, before: ENDL, after: stmts
TARGET LIST: 
target index: 14  , change_value: %NULL%
target index: 176  , change_value: stmts

if_stmt  :  "if"  basic_expr  ENDL  stmts  %MARK%  if_stmt_rep_5  
 index is: 176, term type: to_deduce, before: stmts, after: if_stmt_rep_5
TARGET LIST: 
target index: 177  , change_value: if_stmt_rep_5
target index: 178  , change_value: %NULL%
target index: 179  , change_value: %NULL%

if_stmt  :  "if"  basic_expr  ENDL  stmts  if_stmt_rep_5  %MARK%  
 index is: 177, term type: deduce, before: if_stmt_rep_5, after: %NULL%
TARGET LIST: 

if_stmt_rep_5  :  %MARK%  
 index is: 178, term type: wrong type, before: %NULL%, after: %NULL%
TARGET LIST: 

if_stmt_rep_5  :  %MARK%  else_stmt  stmts  "end"  ENDL  if_stmt_rep_5  
 index is: 179, term type: to_deduce, before: %NULL%, after: else_stmt
TARGET LIST: 
target index: 180  , change_value: else_stmt
target index: 185  , change_value: %NULL%

if_stmt_rep_5  :  else_stmt  %MARK%  stmts  "end"  ENDL  if_stmt_rep_5  
 index is: 180, term type: to_deduce, before: else_stmt, after: stmts
TARGET LIST: 
target index: 14  , change_value: %NULL%
target index: 181  , change_value: stmts

if_stmt_rep_5  :  else_stmt  stmts  %MARK%  "end"  ENDL  if_stmt_rep_5  
 index is: 181, term type: shift, before: stmts, after: "end"
TARGET LIST: 
target index: 182  , change_value: "end"

if_stmt_rep_5  :  else_stmt  stmts  "end"  %MARK%  ENDL  if_stmt_rep_5  
 index is: 182, term type: shift, before: "end", after: ENDL
TARGET LIST: 
target index: 183  , change_value: ENDL

if_stmt_rep_5  :  else_stmt  stmts  "end"  ENDL  %MARK%  if_stmt_rep_5  
 index is: 183, term type: to_deduce, before: ENDL, after: if_stmt_rep_5
TARGET LIST: 
target index: 178  , change_value: %NULL%
target index: 179  , change_value: %NULL%
target index: 184  , change_value: if_stmt_rep_5

if_stmt_rep_5  :  else_stmt  stmts  "end"  ENDL  if_stmt_rep_5  %MARK%  
 index is: 184, term type: deduce, before: if_stmt_rep_5, after: %NULL%
TARGET LIST: 

else_stmt  :  %MARK%  "else"  else_stmt_opt_2  ENDL  basic_expr  ENDL  
 index is: 185, term type: shift, before: %NULL%, after: "else"
TARGET LIST: 
target index: 186  , change_value: "else"

else_stmt  :  "else"  %MARK%  else_stmt_opt_2  ENDL  basic_expr  ENDL  
 index is: 186, term type: to_deduce, before: "else", after: else_stmt_opt_2
TARGET LIST: 
target index: 187  , change_value: else_stmt_opt_2
target index: 191  , change_value: %NULL%
target index: 192  , change_value: %NULL%

else_stmt  :  "else"  else_stmt_opt_2  %MARK%  ENDL  basic_expr  ENDL  
 index is: 187, term type: shift, before: else_stmt_opt_2, after: ENDL
TARGET LIST: 
target index: 188  , change_value: ENDL

else_stmt  :  "else"  else_stmt_opt_2  ENDL  %MARK%  basic_expr  ENDL  
 index is: 188, term type: to_deduce, before: ENDL, after: basic_expr
TARGET LIST: 
target index: 189  , change_value: basic_expr
target index: 392  , change_value: %NULL%
target index: 395  , change_value: %NULL%

else_stmt  :  "else"  else_stmt_opt_2  ENDL  basic_expr  %MARK%  ENDL  
 index is: 189, term type: shift, before: basic_expr, after: ENDL
TARGET LIST: 
target index: 190  , change_value: ENDL

else_stmt  :  "else"  else_stmt_opt_2  ENDL  basic_expr  ENDL  %MARK%  
 index is: 190, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

else_stmt_opt_2  :  %MARK%  
 index is: 191, term type: wrong type, before: %NULL%, after: %NULL%
TARGET LIST: 

else_stmt_opt_2  :  %MARK%  "if"  
 index is: 192, term type: shift, before: %NULL%, after: "if"
TARGET LIST: 
target index: 193  , change_value: "if"

else_stmt_opt_2  :  "if"  %MARK%  
 index is: 193, term type: deduce, before: "if", after: %NULL%
TARGET LIST: 

switch_stmt  :  %MARK%  "switch"  basic_expr  ENDL  switch_stmts  "end"  ENDL  
 index is: 194, term type: shift, before: %NULL%, after: "switch"
TARGET LIST: 
target index: 195  , change_value: "switch"

switch_stmt  :  "switch"  %MARK%  basic_expr  ENDL  switch_stmts  "end"  ENDL  
 index is: 195, term type: to_deduce, before: "switch", after: basic_expr
TARGET LIST: 
target index: 196  , change_value: basic_expr
target index: 392  , change_value: %NULL%
target index: 395  , change_value: %NULL%

switch_stmt  :  "switch"  basic_expr  %MARK%  ENDL  switch_stmts  "end"  ENDL  
 index is: 196, term type: shift, before: basic_expr, after: ENDL
TARGET LIST: 
target index: 197  , change_value: ENDL

switch_stmt  :  "switch"  basic_expr  ENDL  %MARK%  switch_stmts  "end"  ENDL  
 index is: 197, term type: to_deduce, before: ENDL, after: switch_stmts
TARGET LIST: 
target index: 198  , change_value: switch_stmts
target index: 201  , change_value: %NULL%

switch_stmt  :  "switch"  basic_expr  ENDL  switch_stmts  %MARK%  "end"  ENDL  
 index is: 198, term type: shift, before: switch_stmts, after: "end"
TARGET LIST: 
target index: 199  , change_value: "end"

switch_stmt  :  "switch"  basic_expr  ENDL  switch_stmts  "end"  %MARK%  ENDL  
 index is: 199, term type: shift, before: "end", after: ENDL
TARGET LIST: 
target index: 200  , change_value: ENDL

switch_stmt  :  "switch"  basic_expr  ENDL  switch_stmts  "end"  ENDL  %MARK%  
 index is: 200, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

switch_stmts  :  %MARK%  switch_stmts_rep_1  switch_stmts_rep_2  
 index is: 201, term type: to_deduce, before: %NULL%, after: switch_stmts_rep_1
TARGET LIST: 
target index: 202  , change_value: switch_stmts_rep_1
target index: 208  , change_value: %NULL%
target index: 209  , change_value: %NULL%
target index: 212  , change_value: %NULL%

switch_stmts  :  switch_stmts_rep_1  %MARK%  switch_stmts_rep_2  
 index is: 202, term type: to_deduce, before: switch_stmts_rep_1, after: switch_stmts_rep_2
TARGET LIST: 
target index: 203  , change_value: switch_stmts_rep_2
target index: 204  , change_value: %NULL%
target index: 205  , change_value: %NULL%

switch_stmts  :  switch_stmts_rep_1  switch_stmts_rep_2  %MARK%  
 index is: 203, term type: deduce, before: switch_stmts_rep_2, after: %NULL%
TARGET LIST: 

switch_stmts_rep_2  :  %MARK%  
 index is: 204, term type: wrong type, before: %NULL%, after: %NULL%
TARGET LIST: 

switch_stmts_rep_2  :  %MARK%  ENDL  switch_stmts_rep_2  
 index is: 205, term type: shift, before: %NULL%, after: ENDL
TARGET LIST: 
target index: 206  , change_value: ENDL

switch_stmts_rep_2  :  ENDL  %MARK%  switch_stmts_rep_2  
 index is: 206, term type: to_deduce, before: ENDL, after: switch_stmts_rep_2
TARGET LIST: 
target index: 204  , change_value: %NULL%
target index: 205  , change_value: %NULL%
target index: 207  , change_value: switch_stmts_rep_2

switch_stmts_rep_2  :  ENDL  switch_stmts_rep_2  %MARK%  
 index is: 207, term type: deduce, before: switch_stmts_rep_2, after: %NULL%
TARGET LIST: 

switch_stmts_rep_1  :  %MARK%  
 index is: 208, term type: wrong type, before: %NULL%, after: %NULL%
TARGET LIST: 

switch_stmts_rep_1  :  %MARK%  switch_default  switch_stmts_rep_1  
 index is: 209, term type: to_deduce, before: %NULL%, after: switch_default
TARGET LIST: 
target index: 210  , change_value: switch_default
target index: 222  , change_value: %NULL%

switch_stmts_rep_1  :  switch_default  %MARK%  switch_stmts_rep_1  
 index is: 210, term type: to_deduce, before: switch_default, after: switch_stmts_rep_1
TARGET LIST: 
target index: 208  , change_value: %NULL%
target index: 209  , change_value: %NULL%
target index: 211  , change_value: switch_stmts_rep_1
target index: 212  , change_value: %NULL%

switch_stmts_rep_1  :  switch_default  switch_stmts_rep_1  %MARK%  
 index is: 211, term type: deduce, before: switch_stmts_rep_1, after: %NULL%
TARGET LIST: 

switch_stmts_rep_1  :  %MARK%  switch_case  switch_stmts_rep_1  
 index is: 212, term type: to_deduce, before: %NULL%, after: switch_case
TARGET LIST: 
target index: 213  , change_value: switch_case
target index: 215  , change_value: %NULL%

switch_stmts_rep_1  :  switch_case  %MARK%  switch_stmts_rep_1  
 index is: 213, term type: to_deduce, before: switch_case, after: switch_stmts_rep_1
TARGET LIST: 
target index: 208  , change_value: %NULL%
target index: 209  , change_value: %NULL%
target index: 212  , change_value: %NULL%
target index: 214  , change_value: switch_stmts_rep_1

switch_stmts_rep_1  :  switch_case  switch_stmts_rep_1  %MARK%  
 index is: 214, term type: deduce, before: switch_stmts_rep_1, after: %NULL%
TARGET LIST: 

switch_case  :  %MARK%  "case"  logic_or_expr  ENDL  stmts  "end"  ENDL  
 index is: 215, term type: shift, before: %NULL%, after: "case"
TARGET LIST: 
target index: 216  , change_value: "case"

switch_case  :  "case"  %MARK%  logic_or_expr  ENDL  stmts  "end"  ENDL  
 index is: 216, term type: to_deduce, before: "case", after: logic_or_expr
TARGET LIST: 
target index: 217  , change_value: logic_or_expr
target index: 495  , change_value: %NULL%

switch_case  :  "case"  logic_or_expr  %MARK%  ENDL  stmts  "end"  ENDL  
 index is: 217, term type: shift, before: logic_or_expr, after: ENDL
TARGET LIST: 
target index: 218  , change_value: ENDL

switch_case  :  "case"  logic_or_expr  ENDL  %MARK%  stmts  "end"  ENDL  
 index is: 218, term type: to_deduce, before: ENDL, after: stmts
TARGET LIST: 
target index: 14  , change_value: %NULL%
target index: 219  , change_value: stmts

switch_case  :  "case"  logic_or_expr  ENDL  stmts  %MARK%  "end"  ENDL  
 index is: 219, term type: shift, before: stmts, after: "end"
TARGET LIST: 
target index: 220  , change_value: "end"

switch_case  :  "case"  logic_or_expr  ENDL  stmts  "end"  %MARK%  ENDL  
 index is: 220, term type: shift, before: "end", after: ENDL
TARGET LIST: 
target index: 221  , change_value: ENDL

switch_case  :  "case"  logic_or_expr  ENDL  stmts  "end"  ENDL  %MARK%  
 index is: 221, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

switch_default  :  %MARK%  "default"  ENDL  stmts  "end"  ENDL  
 index is: 222, term type: shift, before: %NULL%, after: "default"
TARGET LIST: 
target index: 223  , change_value: "default"

switch_default  :  "default"  %MARK%  ENDL  stmts  "end"  ENDL  
 index is: 223, term type: shift, before: "default", after: ENDL
TARGET LIST: 
target index: 224  , change_value: ENDL

switch_default  :  "default"  ENDL  %MARK%  stmts  "end"  ENDL  
 index is: 224, term type: to_deduce, before: ENDL, after: stmts
TARGET LIST: 
target index: 14  , change_value: %NULL%
target index: 225  , change_value: stmts

switch_default  :  "default"  ENDL  stmts  %MARK%  "end"  ENDL  
 index is: 225, term type: shift, before: stmts, after: "end"
TARGET LIST: 
target index: 226  , change_value: "end"

switch_default  :  "default"  ENDL  stmts  "end"  %MARK%  ENDL  
 index is: 226, term type: shift, before: "end", after: ENDL
TARGET LIST: 
target index: 227  , change_value: ENDL

switch_default  :  "default"  ENDL  stmts  "end"  ENDL  %MARK%  
 index is: 227, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

while_stmt  :  %MARK%  "while"  basic_expr  ENDL  stmts  "end"  ENDL  
 index is: 228, term type: shift, before: %NULL%, after: "while"
TARGET LIST: 
target index: 229  , change_value: "while"

while_stmt  :  "while"  %MARK%  basic_expr  ENDL  stmts  "end"  ENDL  
 index is: 229, term type: to_deduce, before: "while", after: basic_expr
TARGET LIST: 
target index: 230  , change_value: basic_expr
target index: 392  , change_value: %NULL%
target index: 395  , change_value: %NULL%

while_stmt  :  "while"  basic_expr  %MARK%  ENDL  stmts  "end"  ENDL  
 index is: 230, term type: shift, before: basic_expr, after: ENDL
TARGET LIST: 
target index: 231  , change_value: ENDL

while_stmt  :  "while"  basic_expr  ENDL  %MARK%  stmts  "end"  ENDL  
 index is: 231, term type: to_deduce, before: ENDL, after: stmts
TARGET LIST: 
target index: 14  , change_value: %NULL%
target index: 232  , change_value: stmts

while_stmt  :  "while"  basic_expr  ENDL  stmts  %MARK%  "end"  ENDL  
 index is: 232, term type: shift, before: stmts, after: "end"
TARGET LIST: 
target index: 233  , change_value: "end"

while_stmt  :  "while"  basic_expr  ENDL  stmts  "end"  %MARK%  ENDL  
 index is: 233, term type: shift, before: "end", after: ENDL
TARGET LIST: 
target index: 234  , change_value: ENDL

while_stmt  :  "while"  basic_expr  ENDL  stmts  "end"  ENDL  %MARK%  
 index is: 234, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

loop_stmt  :  %MARK%  "loop"  ENDL  stmts  loop_stmt_decl_4  
 index is: 235, term type: shift, before: %NULL%, after: "loop"
TARGET LIST: 
target index: 236  , change_value: "loop"

loop_stmt  :  "loop"  %MARK%  ENDL  stmts  loop_stmt_decl_4  
 index is: 236, term type: shift, before: "loop", after: ENDL
TARGET LIST: 
target index: 237  , change_value: ENDL

loop_stmt  :  "loop"  ENDL  %MARK%  stmts  loop_stmt_decl_4  
 index is: 237, term type: to_deduce, before: ENDL, after: stmts
TARGET LIST: 
target index: 14  , change_value: %NULL%
target index: 238  , change_value: stmts

loop_stmt  :  "loop"  ENDL  stmts  %MARK%  loop_stmt_decl_4  
 index is: 238, term type: to_deduce, before: stmts, after: loop_stmt_decl_4
TARGET LIST: 
target index: 239  , change_value: loop_stmt_decl_4
target index: 240  , change_value: %NULL%
target index: 242  , change_value: %NULL%
target index: 244  , change_value: %NULL%

loop_stmt  :  "loop"  ENDL  stmts  loop_stmt_decl_4  %MARK%  
 index is: 239, term type: deduce, before: loop_stmt_decl_4, after: %NULL%
TARGET LIST: 

loop_stmt_decl_4  :  %MARK%  ENDL  
 index is: 240, term type: shift, before: %NULL%, after: ENDL
TARGET LIST: 
target index: 241  , change_value: ENDL

loop_stmt_decl_4  :  ENDL  %MARK%  
 index is: 241, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

loop_stmt_decl_4  :  %MARK%  "end"  
 index is: 242, term type: shift, before: %NULL%, after: "end"
TARGET LIST: 
target index: 243  , change_value: "end"

loop_stmt_decl_4  :  "end"  %MARK%  
 index is: 243, term type: deduce, before: "end", after: %NULL%
TARGET LIST: 

loop_stmt_decl_4  :  %MARK%  until_stmt  
 index is: 244, term type: to_deduce, before: %NULL%, after: until_stmt
TARGET LIST: 
target index: 245  , change_value: until_stmt
target index: 246  , change_value: %NULL%

loop_stmt_decl_4  :  until_stmt  %MARK%  
 index is: 245, term type: deduce, before: until_stmt, after: %NULL%
TARGET LIST: 

until_stmt  :  %MARK%  "until"  basic_expr  ENDL  
 index is: 246, term type: shift, before: %NULL%, after: "until"
TARGET LIST: 
target index: 247  , change_value: "until"

until_stmt  :  "until"  %MARK%  basic_expr  ENDL  
 index is: 247, term type: to_deduce, before: "until", after: basic_expr
TARGET LIST: 
target index: 248  , change_value: basic_expr
target index: 392  , change_value: %NULL%
target index: 395  , change_value: %NULL%

until_stmt  :  "until"  basic_expr  %MARK%  ENDL  
 index is: 248, term type: shift, before: basic_expr, after: ENDL
TARGET LIST: 
target index: 249  , change_value: ENDL

until_stmt  :  "until"  basic_expr  ENDL  %MARK%  
 index is: 249, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

for_stmt  :  %MARK%  "for"  for_stmt_opt_2  for_stmt_decl_3  for_stmt_opt_4  for_stmt_decl_5  for_stmt_opt_6  for_body  
 index is: 250, term type: shift, before: %NULL%, after: "for"
TARGET LIST: 
target index: 251  , change_value: "for"

for_stmt  :  "for"  %MARK%  for_stmt_opt_2  for_stmt_decl_3  for_stmt_opt_4  for_stmt_decl_5  for_stmt_opt_6  for_body  
 index is: 251, term type: to_deduce, before: "for", after: for_stmt_opt_2
TARGET LIST: 
target index: 252  , change_value: for_stmt_opt_2
target index: 272  , change_value: %NULL%
target index: 273  , change_value: %NULL%

for_stmt  :  "for"  for_stmt_opt_2  %MARK%  for_stmt_decl_3  for_stmt_opt_4  for_stmt_decl_5  for_stmt_opt_6  for_body  
 index is: 252, term type: to_deduce, before: for_stmt_opt_2, after: for_stmt_decl_3
TARGET LIST: 
target index: 253  , change_value: for_stmt_decl_3
target index: 268  , change_value: %NULL%
target index: 270  , change_value: %NULL%

for_stmt  :  "for"  for_stmt_opt_2  for_stmt_decl_3  %MARK%  for_stmt_opt_4  for_stmt_decl_5  for_stmt_opt_6  for_body  
 index is: 253, term type: to_deduce, before: for_stmt_decl_3, after: for_stmt_opt_4
TARGET LIST: 
target index: 254  , change_value: for_stmt_opt_4
target index: 265  , change_value: %NULL%
target index: 266  , change_value: %NULL%

for_stmt  :  "for"  for_stmt_opt_2  for_stmt_decl_3  for_stmt_opt_4  %MARK%  for_stmt_decl_5  for_stmt_opt_6  for_body  
 index is: 254, term type: to_deduce, before: for_stmt_opt_4, after: for_stmt_decl_5
TARGET LIST: 
target index: 255  , change_value: for_stmt_decl_5
target index: 261  , change_value: %NULL%
target index: 263  , change_value: %NULL%

for_stmt  :  "for"  for_stmt_opt_2  for_stmt_decl_3  for_stmt_opt_4  for_stmt_decl_5  %MARK%  for_stmt_opt_6  for_body  
 index is: 255, term type: to_deduce, before: for_stmt_decl_5, after: for_stmt_opt_6
TARGET LIST: 
target index: 256  , change_value: for_stmt_opt_6
target index: 258  , change_value: %NULL%
target index: 259  , change_value: %NULL%

for_stmt  :  "for"  for_stmt_opt_2  for_stmt_decl_3  for_stmt_opt_4  for_stmt_decl_5  for_stmt_opt_6  %MARK%  for_body  
 index is: 256, term type: to_deduce, before: for_stmt_opt_6, after: for_body
TARGET LIST: 
target index: 257  , change_value: for_body
target index: 281  , change_value: %NULL%

for_stmt  :  "for"  for_stmt_opt_2  for_stmt_decl_3  for_stmt_opt_4  for_stmt_decl_5  for_stmt_opt_6  for_body  %MARK%  
 index is: 257, term type: deduce, before: for_body, after: %NULL%
TARGET LIST: 

for_stmt_opt_6  :  %MARK%  
 index is: 258, term type: wrong type, before: %NULL%, after: %NULL%
TARGET LIST: 

for_stmt_opt_6  :  %MARK%  basic_expr  
 index is: 259, term type: to_deduce, before: %NULL%, after: basic_expr
TARGET LIST: 
target index: 260  , change_value: basic_expr
target index: 392  , change_value: %NULL%
target index: 395  , change_value: %NULL%

for_stmt_opt_6  :  basic_expr  %MARK%  
 index is: 260, term type: deduce, before: basic_expr, after: %NULL%
TARGET LIST: 

for_stmt_decl_5  :  %MARK%  ","  
 index is: 261, term type: shift, before: %NULL%, after: ","
TARGET LIST: 
target index: 262  , change_value: ","

for_stmt_decl_5  :  ","  %MARK%  
 index is: 262, term type: deduce, before: ",", after: %NULL%
TARGET LIST: 

for_stmt_decl_5  :  %MARK%  ";"  
 index is: 263, term type: shift, before: %NULL%, after: ";"
TARGET LIST: 
target index: 264  , change_value: ";"

for_stmt_decl_5  :  ";"  %MARK%  
 index is: 264, term type: deduce, before: ";", after: %NULL%
TARGET LIST: 

for_stmt_opt_4  :  %MARK%  
 index is: 265, term type: wrong type, before: %NULL%, after: %NULL%
TARGET LIST: 

for_stmt_opt_4  :  %MARK%  basic_expr  
 index is: 266, term type: to_deduce, before: %NULL%, after: basic_expr
TARGET LIST: 
target index: 267  , change_value: basic_expr
target index: 392  , change_value: %NULL%
target index: 395  , change_value: %NULL%

for_stmt_opt_4  :  basic_expr  %MARK%  
 index is: 267, term type: deduce, before: basic_expr, after: %NULL%
TARGET LIST: 

for_stmt_decl_3  :  %MARK%  ","  
 index is: 268, term type: shift, before: %NULL%, after: ","
TARGET LIST: 
target index: 269  , change_value: ","

for_stmt_decl_3  :  ","  %MARK%  
 index is: 269, term type: deduce, before: ",", after: %NULL%
TARGET LIST: 

for_stmt_decl_3  :  %MARK%  ";"  
 index is: 270, term type: shift, before: %NULL%, after: ";"
TARGET LIST: 
target index: 271  , change_value: ";"

for_stmt_decl_3  :  ";"  %MARK%  
 index is: 271, term type: deduce, before: ";", after: %NULL%
TARGET LIST: 

for_stmt_opt_2  :  %MARK%  
 index is: 272, term type: wrong type, before: %NULL%, after: %NULL%
TARGET LIST: 

for_stmt_opt_2  :  %MARK%  var_def  
 index is: 273, term type: to_deduce, before: %NULL%, after: var_def
TARGET LIST: 
target index: 107  , change_value: %NULL%
target index: 109  , change_value: %NULL%
target index: 274  , change_value: var_def

for_stmt_opt_2  :  var_def  %MARK%  
 index is: 274, term type: deduce, before: var_def, after: %NULL%
TARGET LIST: 

foreach_stmt  :  %MARK%  "foreach"  ID  "in"  basic_expr  for_body  
 index is: 275, term type: shift, before: %NULL%, after: "foreach"
TARGET LIST: 
target index: 276  , change_value: "foreach"

foreach_stmt  :  "foreach"  %MARK%  ID  "in"  basic_expr  for_body  
 index is: 276, term type: shift, before: "foreach", after: ID
TARGET LIST: 
target index: 277  , change_value: ID

foreach_stmt  :  "foreach"  ID  %MARK%  "in"  basic_expr  for_body  
 index is: 277, term type: shift, before: ID, after: "in"
TARGET LIST: 
target index: 278  , change_value: "in"

foreach_stmt  :  "foreach"  ID  "in"  %MARK%  basic_expr  for_body  
 index is: 278, term type: to_deduce, before: "in", after: basic_expr
TARGET LIST: 
target index: 279  , change_value: basic_expr
target index: 392  , change_value: %NULL%
target index: 395  , change_value: %NULL%

foreach_stmt  :  "foreach"  ID  "in"  basic_expr  %MARK%  for_body  
 index is: 279, term type: to_deduce, before: basic_expr, after: for_body
TARGET LIST: 
target index: 280  , change_value: for_body
target index: 281  , change_value: %NULL%

foreach_stmt  :  "foreach"  ID  "in"  basic_expr  for_body  %MARK%  
 index is: 280, term type: deduce, before: for_body, after: %NULL%
TARGET LIST: 

for_body  :  %MARK%  for_body_decl_1  
 index is: 281, term type: to_deduce, before: %NULL%, after: for_body_decl_1
TARGET LIST: 
target index: 282  , change_value: for_body_decl_1
target index: 283  , change_value: %NULL%
target index: 288  , change_value: %NULL%

for_body  :  for_body_decl_1  %MARK%  
 index is: 282, term type: deduce, before: for_body_decl_1, after: %NULL%
TARGET LIST: 

for_body_decl_1  :  %MARK%  ENDL  stmts  "end"  ENDL  
 index is: 283, term type: shift, before: %NULL%, after: ENDL
TARGET LIST: 
target index: 284  , change_value: ENDL

for_body_decl_1  :  ENDL  %MARK%  stmts  "end"  ENDL  
 index is: 284, term type: to_deduce, before: ENDL, after: stmts
TARGET LIST: 
target index: 14  , change_value: %NULL%
target index: 285  , change_value: stmts

for_body_decl_1  :  ENDL  stmts  %MARK%  "end"  ENDL  
 index is: 285, term type: shift, before: stmts, after: "end"
TARGET LIST: 
target index: 286  , change_value: "end"

for_body_decl_1  :  ENDL  stmts  "end"  %MARK%  ENDL  
 index is: 286, term type: shift, before: "end", after: ENDL
TARGET LIST: 
target index: 287  , change_value: ENDL

for_body_decl_1  :  ENDL  stmts  "end"  ENDL  %MARK%  
 index is: 287, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

for_body_decl_1  :  %MARK%  "do"  basic_expr  endline  
 index is: 288, term type: shift, before: %NULL%, after: "do"
TARGET LIST: 
target index: 289  , change_value: "do"

for_body_decl_1  :  "do"  %MARK%  basic_expr  endline  
 index is: 289, term type: to_deduce, before: "do", after: basic_expr
TARGET LIST: 
target index: 290  , change_value: basic_expr
target index: 392  , change_value: %NULL%
target index: 395  , change_value: %NULL%

for_body_decl_1  :  "do"  basic_expr  %MARK%  endline  
 index is: 290, term type: to_deduce, before: basic_expr, after: endline
TARGET LIST: 
target index: 10  , change_value: %NULL%
target index: 12  , change_value: %NULL%
target index: 291  , change_value: endline

for_body_decl_1  :  "do"  basic_expr  endline  %MARK%  
 index is: 291, term type: deduce, before: endline, after: %NULL%
TARGET LIST: 

function_stmt  :  %MARK%  "function"  ID  "("  function_stmt_opt_4  ")"  function_stmt_opt_6  function_body  
 index is: 292, term type: shift, before: %NULL%, after: "function"
TARGET LIST: 
target index: 293  , change_value: "function"

function_stmt  :  "function"  %MARK%  ID  "("  function_stmt_opt_4  ")"  function_stmt_opt_6  function_body  
 index is: 293, term type: shift, before: "function", after: ID
TARGET LIST: 
target index: 294  , change_value: ID

function_stmt  :  "function"  ID  %MARK%  "("  function_stmt_opt_4  ")"  function_stmt_opt_6  function_body  
 index is: 294, term type: shift, before: ID, after: "("
TARGET LIST: 
target index: 295  , change_value: "("

function_stmt  :  "function"  ID  "("  %MARK%  function_stmt_opt_4  ")"  function_stmt_opt_6  function_body  
 index is: 295, term type: to_deduce, before: "(", after: function_stmt_opt_4
TARGET LIST: 
target index: 296  , change_value: function_stmt_opt_4
target index: 303  , change_value: %NULL%
target index: 304  , change_value: %NULL%

function_stmt  :  "function"  ID  "("  function_stmt_opt_4  %MARK%  ")"  function_stmt_opt_6  function_body  
 index is: 296, term type: shift, before: function_stmt_opt_4, after: ")"
TARGET LIST: 
target index: 297  , change_value: ")"

function_stmt  :  "function"  ID  "("  function_stmt_opt_4  ")"  %MARK%  function_stmt_opt_6  function_body  
 index is: 297, term type: to_deduce, before: ")", after: function_stmt_opt_6
TARGET LIST: 
target index: 298  , change_value: function_stmt_opt_6
target index: 300  , change_value: %NULL%
target index: 301  , change_value: %NULL%

function_stmt  :  "function"  ID  "("  function_stmt_opt_4  ")"  function_stmt_opt_6  %MARK%  function_body  
 index is: 298, term type: to_deduce, before: function_stmt_opt_6, after: function_body
TARGET LIST: 
target index: 299  , change_value: function_body
target index: 306  , change_value: %NULL%

function_stmt  :  "function"  ID  "("  function_stmt_opt_4  ")"  function_stmt_opt_6  function_body  %MARK%  
 index is: 299, term type: deduce, before: function_body, after: %NULL%
TARGET LIST: 

function_stmt_opt_6  :  %MARK%  
 index is: 300, term type: wrong type, before: %NULL%, after: %NULL%
TARGET LIST: 

function_stmt_opt_6  :  %MARK%  "override"  
 index is: 301, term type: shift, before: %NULL%, after: "override"
TARGET LIST: 
target index: 302  , change_value: "override"

function_stmt_opt_6  :  "override"  %MARK%  
 index is: 302, term type: deduce, before: "override", after: %NULL%
TARGET LIST: 

function_stmt_opt_4  :  %MARK%  
 index is: 303, term type: wrong type, before: %NULL%, after: %NULL%
TARGET LIST: 

function_stmt_opt_4  :  %MARK%  argument_list  
 index is: 304, term type: to_deduce, before: %NULL%, after: argument_list
TARGET LIST: 
target index: 305  , change_value: argument_list
target index: 445  , change_value: %NULL%
target index: 451  , change_value: %NULL%

function_stmt_opt_4  :  argument_list  %MARK%  
 index is: 305, term type: deduce, before: argument_list, after: %NULL%
TARGET LIST: 

function_body  :  %MARK%  function_body_decl_1  
 index is: 306, term type: to_deduce, before: %NULL%, after: function_body_decl_1
TARGET LIST: 
target index: 307  , change_value: function_body_decl_1
target index: 308  , change_value: %NULL%
target index: 313  , change_value: %NULL%

function_body  :  function_body_decl_1  %MARK%  
 index is: 307, term type: deduce, before: function_body_decl_1, after: %NULL%
TARGET LIST: 

function_body_decl_1  :  %MARK%  ENDL  stmts  "end"  ENDL  
 index is: 308, term type: shift, before: %NULL%, after: ENDL
TARGET LIST: 
target index: 309  , change_value: ENDL

function_body_decl_1  :  ENDL  %MARK%  stmts  "end"  ENDL  
 index is: 309, term type: to_deduce, before: ENDL, after: stmts
TARGET LIST: 
target index: 14  , change_value: %NULL%
target index: 310  , change_value: stmts

function_body_decl_1  :  ENDL  stmts  %MARK%  "end"  ENDL  
 index is: 310, term type: shift, before: stmts, after: "end"
TARGET LIST: 
target index: 311  , change_value: "end"

function_body_decl_1  :  ENDL  stmts  "end"  %MARK%  ENDL  
 index is: 311, term type: shift, before: "end", after: ENDL
TARGET LIST: 
target index: 312  , change_value: ENDL

function_body_decl_1  :  ENDL  stmts  "end"  ENDL  %MARK%  
 index is: 312, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

function_body_decl_1  :  %MARK%  "{"  stmts  "}"  
 index is: 313, term type: shift, before: %NULL%, after: "{"
TARGET LIST: 
target index: 314  , change_value: "{"

function_body_decl_1  :  "{"  %MARK%  stmts  "}"  
 index is: 314, term type: to_deduce, before: "{", after: stmts
TARGET LIST: 
target index: 14  , change_value: %NULL%
target index: 315  , change_value: stmts

function_body_decl_1  :  "{"  stmts  %MARK%  "}"  
 index is: 315, term type: shift, before: stmts, after: "}"
TARGET LIST: 
target index: 316  , change_value: "}"

function_body_decl_1  :  "{"  stmts  "}"  %MARK%  
 index is: 316, term type: deduce, before: "}", after: %NULL%
TARGET LIST: 

return_stmt  :  %MARK%  "return"  return_stmt_opt_2  endline  
 index is: 317, term type: shift, before: %NULL%, after: "return"
TARGET LIST: 
target index: 318  , change_value: "return"

return_stmt  :  "return"  %MARK%  return_stmt_opt_2  endline  
 index is: 318, term type: to_deduce, before: "return", after: return_stmt_opt_2
TARGET LIST: 
target index: 319  , change_value: return_stmt_opt_2
target index: 321  , change_value: %NULL%
target index: 322  , change_value: %NULL%

return_stmt  :  "return"  return_stmt_opt_2  %MARK%  endline  
 index is: 319, term type: to_deduce, before: return_stmt_opt_2, after: endline
TARGET LIST: 
target index: 10  , change_value: %NULL%
target index: 12  , change_value: %NULL%
target index: 320  , change_value: endline

return_stmt  :  "return"  return_stmt_opt_2  endline  %MARK%  
 index is: 320, term type: deduce, before: endline, after: %NULL%
TARGET LIST: 

return_stmt_opt_2  :  %MARK%  
 index is: 321, term type: wrong type, before: %NULL%, after: %NULL%
TARGET LIST: 

return_stmt_opt_2  :  %MARK%  expr  
 index is: 322, term type: to_deduce, before: %NULL%, after: expr
TARGET LIST: 
target index: 323  , change_value: expr
target index: 381  , change_value: %NULL%

return_stmt_opt_2  :  expr  %MARK%  
 index is: 323, term type: deduce, before: expr, after: %NULL%
TARGET LIST: 

try_stmt  :  %MARK%  "try"  ENDL  stmts  try_stmt_rep_4  "end"  ENDL  
 index is: 324, term type: shift, before: %NULL%, after: "try"
TARGET LIST: 
target index: 325  , change_value: "try"

try_stmt  :  "try"  %MARK%  ENDL  stmts  try_stmt_rep_4  "end"  ENDL  
 index is: 325, term type: shift, before: "try", after: ENDL
TARGET LIST: 
target index: 326  , change_value: ENDL

try_stmt  :  "try"  ENDL  %MARK%  stmts  try_stmt_rep_4  "end"  ENDL  
 index is: 326, term type: to_deduce, before: ENDL, after: stmts
TARGET LIST: 
target index: 14  , change_value: %NULL%
target index: 327  , change_value: stmts

try_stmt  :  "try"  ENDL  stmts  %MARK%  try_stmt_rep_4  "end"  ENDL  
 index is: 327, term type: to_deduce, before: stmts, after: try_stmt_rep_4
TARGET LIST: 
target index: 328  , change_value: try_stmt_rep_4
target index: 331  , change_value: %NULL%
target index: 332  , change_value: %NULL%

try_stmt  :  "try"  ENDL  stmts  try_stmt_rep_4  %MARK%  "end"  ENDL  
 index is: 328, term type: shift, before: try_stmt_rep_4, after: "end"
TARGET LIST: 
target index: 329  , change_value: "end"

try_stmt  :  "try"  ENDL  stmts  try_stmt_rep_4  "end"  %MARK%  ENDL  
 index is: 329, term type: shift, before: "end", after: ENDL
TARGET LIST: 
target index: 330  , change_value: ENDL

try_stmt  :  "try"  ENDL  stmts  try_stmt_rep_4  "end"  ENDL  %MARK%  
 index is: 330, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

try_stmt_rep_4  :  %MARK%  
 index is: 331, term type: wrong type, before: %NULL%, after: %NULL%
TARGET LIST: 

try_stmt_rep_4  :  %MARK%  catch_stmt  stmts  try_stmt_rep_4  
 index is: 332, term type: to_deduce, before: %NULL%, after: catch_stmt
TARGET LIST: 
target index: 333  , change_value: catch_stmt
target index: 336  , change_value: %NULL%

try_stmt_rep_4  :  catch_stmt  %MARK%  stmts  try_stmt_rep_4  
 index is: 333, term type: to_deduce, before: catch_stmt, after: stmts
TARGET LIST: 
target index: 14  , change_value: %NULL%
target index: 334  , change_value: stmts

try_stmt_rep_4  :  catch_stmt  stmts  %MARK%  try_stmt_rep_4  
 index is: 334, term type: to_deduce, before: stmts, after: try_stmt_rep_4
TARGET LIST: 
target index: 331  , change_value: %NULL%
target index: 332  , change_value: %NULL%
target index: 335  , change_value: try_stmt_rep_4

try_stmt_rep_4  :  catch_stmt  stmts  try_stmt_rep_4  %MARK%  
 index is: 335, term type: deduce, before: try_stmt_rep_4, after: %NULL%
TARGET LIST: 

catch_stmt  :  %MARK%  "catch"  ID  catch_stmt_opt_3  ENDL  
 index is: 336, term type: shift, before: %NULL%, after: "catch"
TARGET LIST: 
target index: 337  , change_value: "catch"

catch_stmt  :  "catch"  %MARK%  ID  catch_stmt_opt_3  ENDL  
 index is: 337, term type: shift, before: "catch", after: ID
TARGET LIST: 
target index: 338  , change_value: ID

catch_stmt  :  "catch"  ID  %MARK%  catch_stmt_opt_3  ENDL  
 index is: 338, term type: to_deduce, before: ID, after: catch_stmt_opt_3
TARGET LIST: 
target index: 339  , change_value: catch_stmt_opt_3
target index: 341  , change_value: %NULL%
target index: 342  , change_value: %NULL%

catch_stmt  :  "catch"  ID  catch_stmt_opt_3  %MARK%  ENDL  
 index is: 339, term type: shift, before: catch_stmt_opt_3, after: ENDL
TARGET LIST: 
target index: 340  , change_value: ENDL

catch_stmt  :  "catch"  ID  catch_stmt_opt_3  ENDL  %MARK%  
 index is: 340, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

catch_stmt_opt_3  :  %MARK%  
 index is: 341, term type: wrong type, before: %NULL%, after: %NULL%
TARGET LIST: 

catch_stmt_opt_3  :  %MARK%  ":"  visit_expr  
 index is: 342, term type: shift, before: %NULL%, after: ":"
TARGET LIST: 
target index: 343  , change_value: ":"

catch_stmt_opt_3  :  ":"  %MARK%  visit_expr  
 index is: 343, term type: to_deduce, before: ":", after: visit_expr
TARGET LIST: 
target index: 344  , change_value: visit_expr
target index: 611  , change_value: %NULL%

catch_stmt_opt_3  :  ":"  visit_expr  %MARK%  
 index is: 344, term type: deduce, before: visit_expr, after: %NULL%
TARGET LIST: 

throw_stmt  :  %MARK%  "throw"  throw_stmt_opt_2  endline  
 index is: 345, term type: shift, before: %NULL%, after: "throw"
TARGET LIST: 
target index: 346  , change_value: "throw"

throw_stmt  :  "throw"  %MARK%  throw_stmt_opt_2  endline  
 index is: 346, term type: to_deduce, before: "throw", after: throw_stmt_opt_2
TARGET LIST: 
target index: 347  , change_value: throw_stmt_opt_2
target index: 349  , change_value: %NULL%
target index: 350  , change_value: %NULL%

throw_stmt  :  "throw"  throw_stmt_opt_2  %MARK%  endline  
 index is: 347, term type: to_deduce, before: throw_stmt_opt_2, after: endline
TARGET LIST: 
target index: 10  , change_value: %NULL%
target index: 12  , change_value: %NULL%
target index: 348  , change_value: endline

throw_stmt  :  "throw"  throw_stmt_opt_2  endline  %MARK%  
 index is: 348, term type: deduce, before: endline, after: %NULL%
TARGET LIST: 

throw_stmt_opt_2  :  %MARK%  
 index is: 349, term type: wrong type, before: %NULL%, after: %NULL%
TARGET LIST: 

throw_stmt_opt_2  :  %MARK%  expr  
 index is: 350, term type: to_deduce, before: %NULL%, after: expr
TARGET LIST: 
target index: 351  , change_value: expr
target index: 381  , change_value: %NULL%

throw_stmt_opt_2  :  expr  %MARK%  
 index is: 351, term type: deduce, before: expr, after: %NULL%
TARGET LIST: 

class_stmt  :  %MARK%  class_stmt_decl_1  ID  class_stmt_opt_3  ENDL  decl_stmts  "end"  ENDL  
 index is: 352, term type: to_deduce, before: %NULL%, after: class_stmt_decl_1
TARGET LIST: 
target index: 353  , change_value: class_stmt_decl_1
target index: 364  , change_value: %NULL%
target index: 366  , change_value: %NULL%

class_stmt  :  class_stmt_decl_1  %MARK%  ID  class_stmt_opt_3  ENDL  decl_stmts  "end"  ENDL  
 index is: 353, term type: shift, before: class_stmt_decl_1, after: ID
TARGET LIST: 
target index: 354  , change_value: ID

class_stmt  :  class_stmt_decl_1  ID  %MARK%  class_stmt_opt_3  ENDL  decl_stmts  "end"  ENDL  
 index is: 354, term type: to_deduce, before: ID, after: class_stmt_opt_3
TARGET LIST: 
target index: 355  , change_value: class_stmt_opt_3
target index: 360  , change_value: %NULL%
target index: 361  , change_value: %NULL%

class_stmt  :  class_stmt_decl_1  ID  class_stmt_opt_3  %MARK%  ENDL  decl_stmts  "end"  ENDL  
 index is: 355, term type: shift, before: class_stmt_opt_3, after: ENDL
TARGET LIST: 
target index: 356  , change_value: ENDL

class_stmt  :  class_stmt_decl_1  ID  class_stmt_opt_3  ENDL  %MARK%  decl_stmts  "end"  ENDL  
 index is: 356, term type: to_deduce, before: ENDL, after: decl_stmts
TARGET LIST: 
target index: 25  , change_value: %NULL%
target index: 357  , change_value: decl_stmts

class_stmt  :  class_stmt_decl_1  ID  class_stmt_opt_3  ENDL  decl_stmts  %MARK%  "end"  ENDL  
 index is: 357, term type: shift, before: decl_stmts, after: "end"
TARGET LIST: 
target index: 358  , change_value: "end"

class_stmt  :  class_stmt_decl_1  ID  class_stmt_opt_3  ENDL  decl_stmts  "end"  %MARK%  ENDL  
 index is: 358, term type: shift, before: "end", after: ENDL
TARGET LIST: 
target index: 359  , change_value: ENDL

class_stmt  :  class_stmt_decl_1  ID  class_stmt_opt_3  ENDL  decl_stmts  "end"  ENDL  %MARK%  
 index is: 359, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

class_stmt_opt_3  :  %MARK%  
 index is: 360, term type: wrong type, before: %NULL%, after: %NULL%
TARGET LIST: 

class_stmt_opt_3  :  %MARK%  "extends"  visit_expr  
 index is: 361, term type: shift, before: %NULL%, after: "extends"
TARGET LIST: 
target index: 362  , change_value: "extends"

class_stmt_opt_3  :  "extends"  %MARK%  visit_expr  
 index is: 362, term type: to_deduce, before: "extends", after: visit_expr
TARGET LIST: 
target index: 363  , change_value: visit_expr
target index: 611  , change_value: %NULL%

class_stmt_opt_3  :  "extends"  visit_expr  %MARK%  
 index is: 363, term type: deduce, before: visit_expr, after: %NULL%
TARGET LIST: 

class_stmt_decl_1  :  %MARK%  "struct"  
 index is: 364, term type: shift, before: %NULL%, after: "struct"
TARGET LIST: 
target index: 365  , change_value: "struct"

class_stmt_decl_1  :  "struct"  %MARK%  
 index is: 365, term type: deduce, before: "struct", after: %NULL%
TARGET LIST: 

class_stmt_decl_1  :  %MARK%  "class"  
 index is: 366, term type: shift, before: %NULL%, after: "class"
TARGET LIST: 
target index: 367  , change_value: "class"

class_stmt_decl_1  :  "class"  %MARK%  
 index is: 367, term type: deduce, before: "class", after: %NULL%
TARGET LIST: 

control_stmt  :  %MARK%  control_stmt_decl_1  endline  
 index is: 368, term type: to_deduce, before: %NULL%, after: control_stmt_decl_1
TARGET LIST: 
target index: 369  , change_value: control_stmt_decl_1
target index: 371  , change_value: %NULL%
target index: 373  , change_value: %NULL%

control_stmt  :  control_stmt_decl_1  %MARK%  endline  
 index is: 369, term type: to_deduce, before: control_stmt_decl_1, after: endline
TARGET LIST: 
target index: 10  , change_value: %NULL%
target index: 12  , change_value: %NULL%
target index: 370  , change_value: endline

control_stmt  :  control_stmt_decl_1  endline  %MARK%  
 index is: 370, term type: deduce, before: endline, after: %NULL%
TARGET LIST: 

control_stmt_decl_1  :  %MARK%  "continue"  
 index is: 371, term type: shift, before: %NULL%, after: "continue"
TARGET LIST: 
target index: 372  , change_value: "continue"

control_stmt_decl_1  :  "continue"  %MARK%  
 index is: 372, term type: deduce, before: "continue", after: %NULL%
TARGET LIST: 

control_stmt_decl_1  :  %MARK%  "break"  
 index is: 373, term type: shift, before: %NULL%, after: "break"
TARGET LIST: 
target index: 374  , change_value: "break"

control_stmt_decl_1  :  "break"  %MARK%  
 index is: 374, term type: deduce, before: "break", after: %NULL%
TARGET LIST: 

expr_stmt  :  %MARK%  expr  endline  
 index is: 375, term type: to_deduce, before: %NULL%, after: expr
TARGET LIST: 
target index: 376  , change_value: expr
target index: 381  , change_value: %NULL%

expr_stmt  :  expr  %MARK%  endline  
 index is: 376, term type: to_deduce, before: expr, after: endline
TARGET LIST: 
target index: 10  , change_value: %NULL%
target index: 12  , change_value: %NULL%
target index: 377  , change_value: endline

expr_stmt  :  expr  endline  %MARK%  
 index is: 377, term type: deduce, before: endline, after: %NULL%
TARGET LIST: 

end_stmt  :  %MARK%  "end"  ENDL  
 index is: 378, term type: shift, before: %NULL%, after: "end"
TARGET LIST: 
target index: 379  , change_value: "end"

end_stmt  :  "end"  %MARK%  ENDL  
 index is: 379, term type: shift, before: "end", after: ENDL
TARGET LIST: 
target index: 380  , change_value: ENDL

end_stmt  :  "end"  ENDL  %MARK%  
 index is: 380, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

expr  :  %MARK%  single_expr  expr_opt_2  
 index is: 381, term type: to_deduce, before: %NULL%, after: single_expr
TARGET LIST: 
target index: 382  , change_value: single_expr
target index: 388  , change_value: %NULL%
target index: 390  , change_value: %NULL%

expr  :  single_expr  %MARK%  expr_opt_2  
 index is: 382, term type: to_deduce, before: single_expr, after: expr_opt_2
TARGET LIST: 
target index: 383  , change_value: expr_opt_2
target index: 384  , change_value: %NULL%
target index: 385  , change_value: %NULL%

expr  :  single_expr  expr_opt_2  %MARK%  
 index is: 383, term type: deduce, before: expr_opt_2, after: %NULL%
TARGET LIST: 

expr_opt_2  :  %MARK%  
 index is: 384, term type: wrong type, before: %NULL%, after: %NULL%
TARGET LIST: 

expr_opt_2  :  %MARK%  ","  expr  
 index is: 385, term type: shift, before: %NULL%, after: ","
TARGET LIST: 
target index: 386  , change_value: ","

expr_opt_2  :  ","  %MARK%  expr  
 index is: 386, term type: to_deduce, before: ",", after: expr
TARGET LIST: 
target index: 381  , change_value: %NULL%
target index: 387  , change_value: expr

expr_opt_2  :  ","  expr  %MARK%  
 index is: 387, term type: deduce, before: expr, after: %NULL%
TARGET LIST: 

single_expr  :  %MARK%  basic_expr  
 index is: 388, term type: to_deduce, before: %NULL%, after: basic_expr
TARGET LIST: 
target index: 389  , change_value: basic_expr
target index: 392  , change_value: %NULL%
target index: 395  , change_value: %NULL%

single_expr  :  basic_expr  %MARK%  
 index is: 389, term type: deduce, before: basic_expr, after: %NULL%
TARGET LIST: 

single_expr  :  %MARK%  lambda_expr  
 index is: 390, term type: to_deduce, before: %NULL%, after: lambda_expr
TARGET LIST: 
target index: 391  , change_value: lambda_expr
target index: 419  , change_value: %NULL%

single_expr  :  lambda_expr  %MARK%  
 index is: 391, term type: deduce, before: lambda_expr, after: %NULL%
TARGET LIST: 

basic_expr  :  %MARK%  cond_expr  basic_expr_opt_2  
 index is: 392, term type: to_deduce, before: %NULL%, after: cond_expr
TARGET LIST: 
target index: 393  , change_value: cond_expr
target index: 481  , change_value: %NULL%

basic_expr  :  cond_expr  %MARK%  basic_expr_opt_2  
 index is: 393, term type: to_deduce, before: cond_expr, after: basic_expr_opt_2
TARGET LIST: 
target index: 394  , change_value: basic_expr_opt_2
target index: 399  , change_value: %NULL%
target index: 400  , change_value: %NULL%

basic_expr  :  cond_expr  basic_expr_opt_2  %MARK%  
 index is: 394, term type: deduce, before: basic_expr_opt_2, after: %NULL%
TARGET LIST: 

basic_expr  :  %MARK%  var_bind  "="  cond_expr  
 index is: 395, term type: to_deduce, before: %NULL%, after: var_bind
TARGET LIST: 
target index: 123  , change_value: %NULL%
target index: 396  , change_value: var_bind

basic_expr  :  var_bind  %MARK%  "="  cond_expr  
 index is: 396, term type: shift, before: var_bind, after: "="
TARGET LIST: 
target index: 397  , change_value: "="

basic_expr  :  var_bind  "="  %MARK%  cond_expr  
 index is: 397, term type: to_deduce, before: "=", after: cond_expr
TARGET LIST: 
target index: 398  , change_value: cond_expr
target index: 481  , change_value: %NULL%

basic_expr  :  var_bind  "="  cond_expr  %MARK%  
 index is: 398, term type: deduce, before: cond_expr, after: %NULL%
TARGET LIST: 

basic_expr_opt_2  :  %MARK%  
 index is: 399, term type: wrong type, before: %NULL%, after: %NULL%
TARGET LIST: 

basic_expr_opt_2  :  %MARK%  asi_op  single_expr  
 index is: 400, term type: to_deduce, before: %NULL%, after: asi_op
TARGET LIST: 
target index: 401  , change_value: asi_op
target index: 403  , change_value: %NULL%
target index: 405  , change_value: %NULL%
target index: 407  , change_value: %NULL%
target index: 409  , change_value: %NULL%
target index: 411  , change_value: %NULL%
target index: 413  , change_value: %NULL%
target index: 415  , change_value: %NULL%
target index: 417  , change_value: %NULL%

basic_expr_opt_2  :  asi_op  %MARK%  single_expr  
 index is: 401, term type: to_deduce, before: asi_op, after: single_expr
TARGET LIST: 
target index: 388  , change_value: %NULL%
target index: 390  , change_value: %NULL%
target index: 402  , change_value: single_expr

basic_expr_opt_2  :  asi_op  single_expr  %MARK%  
 index is: 402, term type: deduce, before: single_expr, after: %NULL%
TARGET LIST: 

asi_op  :  %MARK%  "^="  
 index is: 403, term type: shift, before: %NULL%, after: "^="
TARGET LIST: 
target index: 404  , change_value: "^="

asi_op  :  "^="  %MARK%  
 index is: 404, term type: deduce, before: "^=", after: %NULL%
TARGET LIST: 

asi_op  :  %MARK%  "%="  
 index is: 405, term type: shift, before: %NULL%, after: "%="
TARGET LIST: 
target index: 406  , change_value: "%="

asi_op  :  "%="  %MARK%  
 index is: 406, term type: deduce, before: "%=", after: %NULL%
TARGET LIST: 

asi_op  :  %MARK%  "/="  
 index is: 407, term type: shift, before: %NULL%, after: "/="
TARGET LIST: 
target index: 408  , change_value: "/="

asi_op  :  "/="  %MARK%  
 index is: 408, term type: deduce, before: "/=", after: %NULL%
TARGET LIST: 

asi_op  :  %MARK%  "*="  
 index is: 409, term type: shift, before: %NULL%, after: "*="
TARGET LIST: 
target index: 410  , change_value: "*="

asi_op  :  "*="  %MARK%  
 index is: 410, term type: deduce, before: "*=", after: %NULL%
TARGET LIST: 

asi_op  :  %MARK%  "-="  
 index is: 411, term type: shift, before: %NULL%, after: "-="
TARGET LIST: 
target index: 412  , change_value: "-="

asi_op  :  "-="  %MARK%  
 index is: 412, term type: deduce, before: "-=", after: %NULL%
TARGET LIST: 

asi_op  :  %MARK%  "+="  
 index is: 413, term type: shift, before: %NULL%, after: "+="
TARGET LIST: 
target index: 414  , change_value: "+="

asi_op  :  "+="  %MARK%  
 index is: 414, term type: deduce, before: "+=", after: %NULL%
TARGET LIST: 

asi_op  :  %MARK%  ":="  
 index is: 415, term type: shift, before: %NULL%, after: ":="
TARGET LIST: 
target index: 416  , change_value: ":="

asi_op  :  ":="  %MARK%  
 index is: 416, term type: deduce, before: ":=", after: %NULL%
TARGET LIST: 

asi_op  :  %MARK%  "="  
 index is: 417, term type: shift, before: %NULL%, after: "="
TARGET LIST: 
target index: 418  , change_value: "="

asi_op  :  "="  %MARK%  
 index is: 418, term type: deduce, before: "=", after: %NULL%
TARGET LIST: 

lambda_expr  :  %MARK%  "["  lambda_expr_opt_2  "]"  "("  lambda_expr_opt_5  ")"  lambda_body  
 index is: 419, term type: shift, before: %NULL%, after: "["
TARGET LIST: 
target index: 420  , change_value: "["

lambda_expr  :  "["  %MARK%  lambda_expr_opt_2  "]"  "("  lambda_expr_opt_5  ")"  lambda_body  
 index is: 420, term type: to_deduce, before: "[", after: lambda_expr_opt_2
TARGET LIST: 
target index: 421  , change_value: lambda_expr_opt_2
target index: 430  , change_value: %NULL%
target index: 431  , change_value: %NULL%

lambda_expr  :  "["  lambda_expr_opt_2  %MARK%  "]"  "("  lambda_expr_opt_5  ")"  lambda_body  
 index is: 421, term type: shift, before: lambda_expr_opt_2, after: "]"
TARGET LIST: 
target index: 422  , change_value: "]"

lambda_expr  :  "["  lambda_expr_opt_2  "]"  %MARK%  "("  lambda_expr_opt_5  ")"  lambda_body  
 index is: 422, term type: shift, before: "]", after: "("
TARGET LIST: 
target index: 423  , change_value: "("

lambda_expr  :  "["  lambda_expr_opt_2  "]"  "("  %MARK%  lambda_expr_opt_5  ")"  lambda_body  
 index is: 423, term type: to_deduce, before: "(", after: lambda_expr_opt_5
TARGET LIST: 
target index: 424  , change_value: lambda_expr_opt_5
target index: 427  , change_value: %NULL%
target index: 428  , change_value: %NULL%

lambda_expr  :  "["  lambda_expr_opt_2  "]"  "("  lambda_expr_opt_5  %MARK%  ")"  lambda_body  
 index is: 424, term type: shift, before: lambda_expr_opt_5, after: ")"
TARGET LIST: 
target index: 425  , change_value: ")"

lambda_expr  :  "["  lambda_expr_opt_2  "]"  "("  lambda_expr_opt_5  ")"  %MARK%  lambda_body  
 index is: 425, term type: to_deduce, before: ")", after: lambda_body
TARGET LIST: 
target index: 426  , change_value: lambda_body
target index: 465  , change_value: %NULL%
target index: 468  , change_value: %NULL%

lambda_expr  :  "["  lambda_expr_opt_2  "]"  "("  lambda_expr_opt_5  ")"  lambda_body  %MARK%  
 index is: 426, term type: deduce, before: lambda_body, after: %NULL%
TARGET LIST: 

lambda_expr_opt_5  :  %MARK%  
 index is: 427, term type: wrong type, before: %NULL%, after: %NULL%
TARGET LIST: 

lambda_expr_opt_5  :  %MARK%  argument_list  
 index is: 428, term type: to_deduce, before: %NULL%, after: argument_list
TARGET LIST: 
target index: 429  , change_value: argument_list
target index: 445  , change_value: %NULL%
target index: 451  , change_value: %NULL%

lambda_expr_opt_5  :  argument_list  %MARK%  
 index is: 429, term type: deduce, before: argument_list, after: %NULL%
TARGET LIST: 

lambda_expr_opt_2  :  %MARK%  
 index is: 430, term type: wrong type, before: %NULL%, after: %NULL%
TARGET LIST: 

lambda_expr_opt_2  :  %MARK%  capture_list  
 index is: 431, term type: to_deduce, before: %NULL%, after: capture_list
TARGET LIST: 
target index: 432  , change_value: capture_list
target index: 433  , change_value: %NULL%

lambda_expr_opt_2  :  capture_list  %MARK%  
 index is: 432, term type: deduce, before: capture_list, after: %NULL%
TARGET LIST: 

capture_list  :  %MARK%  capture_list_opt_1  ID  capture_list_rep_3  
 index is: 433, term type: to_deduce, before: %NULL%, after: capture_list_opt_1
TARGET LIST: 
target index: 434  , change_value: capture_list_opt_1
target index: 442  , change_value: %NULL%
target index: 443  , change_value: %NULL%

capture_list  :  capture_list_opt_1  %MARK%  ID  capture_list_rep_3  
 index is: 434, term type: shift, before: capture_list_opt_1, after: ID
TARGET LIST: 
target index: 435  , change_value: ID

capture_list  :  capture_list_opt_1  ID  %MARK%  capture_list_rep_3  
 index is: 435, term type: to_deduce, before: ID, after: capture_list_rep_3
TARGET LIST: 
target index: 436  , change_value: capture_list_rep_3
target index: 437  , change_value: %NULL%
target index: 438  , change_value: %NULL%

capture_list  :  capture_list_opt_1  ID  capture_list_rep_3  %MARK%  
 index is: 436, term type: deduce, before: capture_list_rep_3, after: %NULL%
TARGET LIST: 

capture_list_rep_3  :  %MARK%  
 index is: 437, term type: wrong type, before: %NULL%, after: %NULL%
TARGET LIST: 

capture_list_rep_3  :  %MARK%  ","  capture_list  capture_list_rep_3  
 index is: 438, term type: shift, before: %NULL%, after: ","
TARGET LIST: 
target index: 439  , change_value: ","

capture_list_rep_3  :  ","  %MARK%  capture_list  capture_list_rep_3  
 index is: 439, term type: to_deduce, before: ",", after: capture_list
TARGET LIST: 
target index: 433  , change_value: %NULL%
target index: 440  , change_value: capture_list

capture_list_rep_3  :  ","  capture_list  %MARK%  capture_list_rep_3  
 index is: 440, term type: to_deduce, before: capture_list, after: capture_list_rep_3
TARGET LIST: 
target index: 437  , change_value: %NULL%
target index: 438  , change_value: %NULL%
target index: 441  , change_value: capture_list_rep_3

capture_list_rep_3  :  ","  capture_list  capture_list_rep_3  %MARK%  
 index is: 441, term type: deduce, before: capture_list_rep_3, after: %NULL%
TARGET LIST: 

capture_list_opt_1  :  %MARK%  
 index is: 442, term type: wrong type, before: %NULL%, after: %NULL%
TARGET LIST: 

capture_list_opt_1  :  %MARK%  "="  
 index is: 443, term type: shift, before: %NULL%, after: "="
TARGET LIST: 
target index: 444  , change_value: "="

capture_list_opt_1  :  "="  %MARK%  
 index is: 444, term type: deduce, before: "=", after: %NULL%
TARGET LIST: 

argument_list  :  %MARK%  argument_list_opt_1  ID  argument_list_opt_3  visit_expr  argument_list_rep_5  
 index is: 445, term type: to_deduce, before: %NULL%, after: argument_list_opt_1
TARGET LIST: 
target index: 446  , change_value: argument_list_opt_1
target index: 462  , change_value: %NULL%
target index: 463  , change_value: %NULL%

argument_list  :  argument_list_opt_1  %MARK%  ID  argument_list_opt_3  visit_expr  argument_list_rep_5  
 index is: 446, term type: shift, before: argument_list_opt_1, after: ID
TARGET LIST: 
target index: 447  , change_value: ID

argument_list  :  argument_list_opt_1  ID  %MARK%  argument_list_opt_3  visit_expr  argument_list_rep_5  
 index is: 447, term type: to_deduce, before: ID, after: argument_list_opt_3
TARGET LIST: 
target index: 448  , change_value: argument_list_opt_3
target index: 459  , change_value: %NULL%
target index: 460  , change_value: %NULL%

argument_list  :  argument_list_opt_1  ID  argument_list_opt_3  %MARK%  visit_expr  argument_list_rep_5  
 index is: 448, term type: to_deduce, before: argument_list_opt_3, after: visit_expr
TARGET LIST: 
target index: 449  , change_value: visit_expr
target index: 611  , change_value: %NULL%

argument_list  :  argument_list_opt_1  ID  argument_list_opt_3  visit_expr  %MARK%  argument_list_rep_5  
 index is: 449, term type: to_deduce, before: visit_expr, after: argument_list_rep_5
TARGET LIST: 
target index: 450  , change_value: argument_list_rep_5
target index: 454  , change_value: %NULL%
target index: 455  , change_value: %NULL%

argument_list  :  argument_list_opt_1  ID  argument_list_opt_3  visit_expr  argument_list_rep_5  %MARK%  
 index is: 450, term type: deduce, before: argument_list_rep_5, after: %NULL%
TARGET LIST: 

argument_list  :  %MARK%  ETC  ID  
 index is: 451, term type: shift, before: %NULL%, after: ETC
TARGET LIST: 
target index: 452  , change_value: ETC

argument_list  :  ETC  %MARK%  ID  
 index is: 452, term type: shift, before: ETC, after: ID
TARGET LIST: 
target index: 453  , change_value: ID

argument_list  :  ETC  ID  %MARK%  
 index is: 453, term type: deduce, before: ID, after: %NULL%
TARGET LIST: 

argument_list_rep_5  :  %MARK%  
 index is: 454, term type: wrong type, before: %NULL%, after: %NULL%
TARGET LIST: 

argument_list_rep_5  :  %MARK%  ","  argument_list  argument_list_rep_5  
 index is: 455, term type: shift, before: %NULL%, after: ","
TARGET LIST: 
target index: 456  , change_value: ","

argument_list_rep_5  :  ","  %MARK%  argument_list  argument_list_rep_5  
 index is: 456, term type: to_deduce, before: ",", after: argument_list
TARGET LIST: 
target index: 445  , change_value: %NULL%
target index: 451  , change_value: %NULL%
target index: 457  , change_value: argument_list

argument_list_rep_5  :  ","  argument_list  %MARK%  argument_list_rep_5  
 index is: 457, term type: to_deduce, before: argument_list, after: argument_list_rep_5
TARGET LIST: 
target index: 454  , change_value: %NULL%
target index: 455  , change_value: %NULL%
target index: 458  , change_value: argument_list_rep_5

argument_list_rep_5  :  ","  argument_list  argument_list_rep_5  %MARK%  
 index is: 458, term type: deduce, before: argument_list_rep_5, after: %NULL%
TARGET LIST: 

argument_list_opt_3  :  %MARK%  
 index is: 459, term type: wrong type, before: %NULL%, after: %NULL%
TARGET LIST: 

argument_list_opt_3  :  %MARK%  ":"  
 index is: 460, term type: shift, before: %NULL%, after: ":"
TARGET LIST: 
target index: 461  , change_value: ":"

argument_list_opt_3  :  ":"  %MARK%  
 index is: 461, term type: deduce, before: ":", after: %NULL%
TARGET LIST: 

argument_list_opt_1  :  %MARK%  
 index is: 462, term type: wrong type, before: %NULL%, after: %NULL%
TARGET LIST: 

argument_list_opt_1  :  %MARK%  "="  
 index is: 463, term type: shift, before: %NULL%, after: "="
TARGET LIST: 
target index: 464  , change_value: "="

argument_list_opt_1  :  "="  %MARK%  
 index is: 464, term type: deduce, before: "=", after: %NULL%
TARGET LIST: 

lambda_body  :  %MARK%  "->"  cond_expr  
 index is: 465, term type: shift, before: %NULL%, after: "->"
TARGET LIST: 
target index: 466  , change_value: "->"

lambda_body  :  "->"  %MARK%  cond_expr  
 index is: 466, term type: to_deduce, before: "->", after: cond_expr
TARGET LIST: 
target index: 467  , change_value: cond_expr
target index: 481  , change_value: %NULL%

lambda_body  :  "->"  cond_expr  %MARK%  
 index is: 467, term type: deduce, before: cond_expr, after: %NULL%
TARGET LIST: 

lambda_body  :  %MARK%  "{"  lambda_body_rep_2  "}"  
 index is: 468, term type: shift, before: %NULL%, after: "{"
TARGET LIST: 
target index: 469  , change_value: "{"

lambda_body  :  "{"  %MARK%  lambda_body_rep_2  "}"  
 index is: 469, term type: to_deduce, before: "{", after: lambda_body_rep_2
TARGET LIST: 
target index: 470  , change_value: lambda_body_rep_2
target index: 472  , change_value: %NULL%
target index: 473  , change_value: %NULL%

lambda_body  :  "{"  lambda_body_rep_2  %MARK%  "}"  
 index is: 470, term type: shift, before: lambda_body_rep_2, after: "}"
TARGET LIST: 
target index: 471  , change_value: "}"

lambda_body  :  "{"  lambda_body_rep_2  "}"  %MARK%  
 index is: 471, term type: deduce, before: "}", after: %NULL%
TARGET LIST: 

lambda_body_rep_2  :  %MARK%  
 index is: 472, term type: wrong type, before: %NULL%, after: %NULL%
TARGET LIST: 

lambda_body_rep_2  :  %MARK%  statement  lambda_body_rep_2_rep_2  lambda_body_rep_2  
 index is: 473, term type: to_deduce, before: %NULL%, after: statement
TARGET LIST: 
target index: 44  , change_value: %NULL%
target index: 46  , change_value: %NULL%
target index: 48  , change_value: %NULL%
target index: 50  , change_value: %NULL%
target index: 52  , change_value: %NULL%
target index: 54  , change_value: %NULL%
target index: 56  , change_value: %NULL%
target index: 58  , change_value: %NULL%
target index: 60  , change_value: %NULL%
target index: 62  , change_value: %NULL%
target index: 64  , change_value: %NULL%
target index: 66  , change_value: %NULL%
target index: 68  , change_value: %NULL%
target index: 70  , change_value: %NULL%
target index: 72  , change_value: %NULL%
target index: 74  , change_value: %NULL%
target index: 76  , change_value: %NULL%
target index: 78  , change_value: %NULL%
target index: 80  , change_value: %NULL%
target index: 82  , change_value: %NULL%
target index: 474  , change_value: statement

lambda_body_rep_2  :  statement  %MARK%  lambda_body_rep_2_rep_2  lambda_body_rep_2  
 index is: 474, term type: to_deduce, before: statement, after: lambda_body_rep_2_rep_2
TARGET LIST: 
target index: 475  , change_value: lambda_body_rep_2_rep_2
target index: 477  , change_value: %NULL%
target index: 478  , change_value: %NULL%

lambda_body_rep_2  :  statement  lambda_body_rep_2_rep_2  %MARK%  lambda_body_rep_2  
 index is: 475, term type: to_deduce, before: lambda_body_rep_2_rep_2, after: lambda_body_rep_2
TARGET LIST: 
target index: 472  , change_value: %NULL%
target index: 473  , change_value: %NULL%
target index: 476  , change_value: lambda_body_rep_2

lambda_body_rep_2  :  statement  lambda_body_rep_2_rep_2  lambda_body_rep_2  %MARK%  
 index is: 476, term type: deduce, before: lambda_body_rep_2, after: %NULL%
TARGET LIST: 

lambda_body_rep_2_rep_2  :  %MARK%  
 index is: 477, term type: wrong type, before: %NULL%, after: %NULL%
TARGET LIST: 

lambda_body_rep_2_rep_2  :  %MARK%  ENDL  lambda_body_rep_2_rep_2  
 index is: 478, term type: shift, before: %NULL%, after: ENDL
TARGET LIST: 
target index: 479  , change_value: ENDL

lambda_body_rep_2_rep_2  :  ENDL  %MARK%  lambda_body_rep_2_rep_2  
 index is: 479, term type: to_deduce, before: ENDL, after: lambda_body_rep_2_rep_2
TARGET LIST: 
target index: 477  , change_value: %NULL%
target index: 478  , change_value: %NULL%
target index: 480  , change_value: lambda_body_rep_2_rep_2

lambda_body_rep_2_rep_2  :  ENDL  lambda_body_rep_2_rep_2  %MARK%  
 index is: 480, term type: deduce, before: lambda_body_rep_2_rep_2, after: %NULL%
TARGET LIST: 

cond_expr  :  %MARK%  logic_expr  cond_expr_opt_2  
 index is: 481, term type: to_deduce, before: %NULL%, after: logic_expr
TARGET LIST: 
target index: 482  , change_value: logic_expr

cond_expr  :  logic_expr  %MARK%  cond_expr_opt_2  
 index is: 482, term type: to_deduce, before: logic_expr, after: cond_expr_opt_2
TARGET LIST: 
target index: 483  , change_value: cond_expr_opt_2
target index: 484  , change_value: %NULL%
target index: 485  , change_value: %NULL%

cond_expr  :  logic_expr  cond_expr_opt_2  %MARK%  
 index is: 483, term type: deduce, before: cond_expr_opt_2, after: %NULL%
TARGET LIST: 

cond_expr_opt_2  :  %MARK%  
 index is: 484, term type: wrong type, before: %NULL%, after: %NULL%
TARGET LIST: 

cond_expr_opt_2  :  %MARK%  cond_postfix  
 index is: 485, term type: to_deduce, before: %NULL%, after: cond_postfix
TARGET LIST: 
target index: 486  , change_value: cond_postfix
target index: 487  , change_value: %NULL%
target index: 490  , change_value: %NULL%

cond_expr_opt_2  :  cond_postfix  %MARK%  
 index is: 486, term type: deduce, before: cond_postfix, after: %NULL%
TARGET LIST: 

cond_postfix  :  %MARK%  ":"  logic_or_expr  
 index is: 487, term type: shift, before: %NULL%, after: ":"
TARGET LIST: 
target index: 488  , change_value: ":"

cond_postfix  :  ":"  %MARK%  logic_or_expr  
 index is: 488, term type: to_deduce, before: ":", after: logic_or_expr
TARGET LIST: 
target index: 489  , change_value: logic_or_expr
target index: 495  , change_value: %NULL%

cond_postfix  :  ":"  logic_or_expr  %MARK%  
 index is: 489, term type: deduce, before: logic_or_expr, after: %NULL%
TARGET LIST: 

cond_postfix  :  %MARK%  "?"  logic_or_expr  ":"  cond_expr  
 index is: 490, term type: shift, before: %NULL%, after: "?"
TARGET LIST: 
target index: 491  , change_value: "?"

cond_postfix  :  "?"  %MARK%  logic_or_expr  ":"  cond_expr  
 index is: 491, term type: to_deduce, before: "?", after: logic_or_expr
TARGET LIST: 
target index: 492  , change_value: logic_or_expr
target index: 495  , change_value: %NULL%

cond_postfix  :  "?"  logic_or_expr  %MARK%  ":"  cond_expr  
 index is: 492, term type: shift, before: logic_or_expr, after: ":"
TARGET LIST: 
target index: 493  , change_value: ":"

cond_postfix  :  "?"  logic_or_expr  ":"  %MARK%  cond_expr  
 index is: 493, term type: to_deduce, before: ":", after: cond_expr
TARGET LIST: 
target index: 481  , change_value: %NULL%
target index: 494  , change_value: cond_expr

cond_postfix  :  "?"  logic_or_expr  ":"  cond_expr  %MARK%  
 index is: 494, term type: deduce, before: cond_expr, after: %NULL%
TARGET LIST: 

logic_or_expr  :  %MARK%  logic_and_expr  logic_or_expr_opt_2  logic_or_expr  
 index is: 495, term type: to_deduce, before: %NULL%, after: logic_and_expr
TARGET LIST: 
target index: 496  , change_value: logic_and_expr
target index: 504  , change_value: %NULL%

logic_or_expr  :  logic_and_expr  %MARK%  logic_or_expr_opt_2  logic_or_expr  
 index is: 496, term type: to_deduce, before: logic_and_expr, after: logic_or_expr_opt_2
TARGET LIST: 
target index: 497  , change_value: logic_or_expr_opt_2
target index: 499  , change_value: %NULL%
target index: 500  , change_value: %NULL%
target index: 502  , change_value: %NULL%

logic_or_expr  :  logic_and_expr  logic_or_expr_opt_2  %MARK%  logic_or_expr  
 index is: 497, term type: to_deduce, before: logic_or_expr_opt_2, after: logic_or_expr
TARGET LIST: 
target index: 495  , change_value: %NULL%
target index: 498  , change_value: logic_or_expr

logic_or_expr  :  logic_and_expr  logic_or_expr_opt_2  logic_or_expr  %MARK%  
 index is: 498, term type: deduce, before: logic_or_expr, after: %NULL%
TARGET LIST: 

logic_or_expr_opt_2  :  %MARK%  
 index is: 499, term type: wrong type, before: %NULL%, after: %NULL%
TARGET LIST: 

logic_or_expr_opt_2  :  %MARK%  "or"  
 index is: 500, term type: shift, before: %NULL%, after: "or"
TARGET LIST: 
target index: 501  , change_value: "or"

logic_or_expr_opt_2  :  "or"  %MARK%  
 index is: 501, term type: deduce, before: "or", after: %NULL%
TARGET LIST: 

logic_or_expr_opt_2  :  %MARK%  "||"  
 index is: 502, term type: shift, before: %NULL%, after: "||"
TARGET LIST: 
target index: 503  , change_value: "||"

logic_or_expr_opt_2  :  "||"  %MARK%  
 index is: 503, term type: deduce, before: "||", after: %NULL%
TARGET LIST: 

logic_and_expr  :  %MARK%  equal_expr  logic_and_expr_opt_2  logic_and_expr  
 index is: 504, term type: to_deduce, before: %NULL%, after: equal_expr
TARGET LIST: 
target index: 505  , change_value: equal_expr
target index: 513  , change_value: %NULL%

logic_and_expr  :  equal_expr  %MARK%  logic_and_expr_opt_2  logic_and_expr  
 index is: 505, term type: to_deduce, before: equal_expr, after: logic_and_expr_opt_2
TARGET LIST: 
target index: 506  , change_value: logic_and_expr_opt_2
target index: 508  , change_value: %NULL%
target index: 509  , change_value: %NULL%
target index: 511  , change_value: %NULL%

logic_and_expr  :  equal_expr  logic_and_expr_opt_2  %MARK%  logic_and_expr  
 index is: 506, term type: to_deduce, before: logic_and_expr_opt_2, after: logic_and_expr
TARGET LIST: 
target index: 504  , change_value: %NULL%
target index: 507  , change_value: logic_and_expr

logic_and_expr  :  equal_expr  logic_and_expr_opt_2  logic_and_expr  %MARK%  
 index is: 507, term type: deduce, before: logic_and_expr, after: %NULL%
TARGET LIST: 

logic_and_expr_opt_2  :  %MARK%  
 index is: 508, term type: wrong type, before: %NULL%, after: %NULL%
TARGET LIST: 

logic_and_expr_opt_2  :  %MARK%  "and"  
 index is: 509, term type: shift, before: %NULL%, after: "and"
TARGET LIST: 
target index: 510  , change_value: "and"

logic_and_expr_opt_2  :  "and"  %MARK%  
 index is: 510, term type: deduce, before: "and", after: %NULL%
TARGET LIST: 

logic_and_expr_opt_2  :  %MARK%  "&&"  
 index is: 511, term type: shift, before: %NULL%, after: "&&"
TARGET LIST: 
target index: 512  , change_value: "&&"

logic_and_expr_opt_2  :  "&&"  %MARK%  
 index is: 512, term type: deduce, before: "&&", after: %NULL%
TARGET LIST: 

equal_expr  :  %MARK%  relat_expr  equal_expr_opt_2  
 index is: 513, term type: to_deduce, before: %NULL%, after: relat_expr
TARGET LIST: 
target index: 514  , change_value: relat_expr
target index: 524  , change_value: %NULL%

equal_expr  :  relat_expr  %MARK%  equal_expr_opt_2  
 index is: 514, term type: to_deduce, before: relat_expr, after: equal_expr_opt_2
TARGET LIST: 
target index: 515  , change_value: equal_expr_opt_2
target index: 516  , change_value: %NULL%
target index: 517  , change_value: %NULL%

equal_expr  :  relat_expr  equal_expr_opt_2  %MARK%  
 index is: 515, term type: deduce, before: equal_expr_opt_2, after: %NULL%
TARGET LIST: 

equal_expr_opt_2  :  %MARK%  
 index is: 516, term type: wrong type, before: %NULL%, after: %NULL%
TARGET LIST: 

equal_expr_opt_2  :  %MARK%  equal_expr_opt_2_decl_1  equal_expr  
 index is: 517, term type: to_deduce, before: %NULL%, after: equal_expr_opt_2_decl_1
TARGET LIST: 
target index: 518  , change_value: equal_expr_opt_2_decl_1
target index: 520  , change_value: %NULL%
target index: 522  , change_value: %NULL%

equal_expr_opt_2  :  equal_expr_opt_2_decl_1  %MARK%  equal_expr  
 index is: 518, term type: to_deduce, before: equal_expr_opt_2_decl_1, after: equal_expr
TARGET LIST: 
target index: 513  , change_value: %NULL%
target index: 519  , change_value: equal_expr

equal_expr_opt_2  :  equal_expr_opt_2_decl_1  equal_expr  %MARK%  
 index is: 519, term type: deduce, before: equal_expr, after: %NULL%
TARGET LIST: 

equal_expr_opt_2_decl_1  :  %MARK%  "!="  
 index is: 520, term type: shift, before: %NULL%, after: "!="
TARGET LIST: 
target index: 521  , change_value: "!="

equal_expr_opt_2_decl_1  :  "!="  %MARK%  
 index is: 521, term type: deduce, before: "!=", after: %NULL%
TARGET LIST: 

equal_expr_opt_2_decl_1  :  %MARK%  "=="  
 index is: 522, term type: shift, before: %NULL%, after: "=="
TARGET LIST: 
target index: 523  , change_value: "=="

equal_expr_opt_2_decl_1  :  "=="  %MARK%  
 index is: 523, term type: deduce, before: "==", after: %NULL%
TARGET LIST: 

relat_expr  :  %MARK%  add_expr  relat_expr_opt_2  
 index is: 524, term type: to_deduce, before: %NULL%, after: add_expr
TARGET LIST: 
target index: 525  , change_value: add_expr
target index: 539  , change_value: %NULL%

relat_expr  :  add_expr  %MARK%  relat_expr_opt_2  
 index is: 525, term type: to_deduce, before: add_expr, after: relat_expr_opt_2
TARGET LIST: 
target index: 526  , change_value: relat_expr_opt_2
target index: 527  , change_value: %NULL%
target index: 528  , change_value: %NULL%

relat_expr  :  add_expr  relat_expr_opt_2  %MARK%  
 index is: 526, term type: deduce, before: relat_expr_opt_2, after: %NULL%
TARGET LIST: 

relat_expr_opt_2  :  %MARK%  
 index is: 527, term type: wrong type, before: %NULL%, after: %NULL%
TARGET LIST: 

relat_expr_opt_2  :  %MARK%  relat_expr_opt_2_decl_1  relat_expr  
 index is: 528, term type: to_deduce, before: %NULL%, after: relat_expr_opt_2_decl_1
TARGET LIST: 
target index: 529  , change_value: relat_expr_opt_2_decl_1
target index: 531  , change_value: %NULL%
target index: 533  , change_value: %NULL%
target index: 535  , change_value: %NULL%
target index: 537  , change_value: %NULL%

relat_expr_opt_2  :  relat_expr_opt_2_decl_1  %MARK%  relat_expr  
 index is: 529, term type: to_deduce, before: relat_expr_opt_2_decl_1, after: relat_expr
TARGET LIST: 
target index: 524  , change_value: %NULL%
target index: 530  , change_value: relat_expr

relat_expr_opt_2  :  relat_expr_opt_2_decl_1  relat_expr  %MARK%  
 index is: 530, term type: deduce, before: relat_expr, after: %NULL%
TARGET LIST: 

relat_expr_opt_2_decl_1  :  %MARK%  "<="  
 index is: 531, term type: shift, before: %NULL%, after: "<="
TARGET LIST: 
target index: 532  , change_value: "<="

relat_expr_opt_2_decl_1  :  "<="  %MARK%  
 index is: 532, term type: deduce, before: "<=", after: %NULL%
TARGET LIST: 

relat_expr_opt_2_decl_1  :  %MARK%  ">="  
 index is: 533, term type: shift, before: %NULL%, after: ">="
TARGET LIST: 
target index: 534  , change_value: ">="

relat_expr_opt_2_decl_1  :  ">="  %MARK%  
 index is: 534, term type: deduce, before: ">=", after: %NULL%
TARGET LIST: 

relat_expr_opt_2_decl_1  :  %MARK%  "<"  
 index is: 535, term type: shift, before: %NULL%, after: "<"
TARGET LIST: 
target index: 536  , change_value: "<"

relat_expr_opt_2_decl_1  :  "<"  %MARK%  
 index is: 536, term type: deduce, before: "<", after: %NULL%
TARGET LIST: 

relat_expr_opt_2_decl_1  :  %MARK%  ">"  
 index is: 537, term type: shift, before: %NULL%, after: ">"
TARGET LIST: 
target index: 538  , change_value: ">"

relat_expr_opt_2_decl_1  :  ">"  %MARK%  
 index is: 538, term type: deduce, before: ">", after: %NULL%
TARGET LIST: 

add_expr  :  %MARK%  mul_expr  add_expr_opt_2  
 index is: 539, term type: to_deduce, before: %NULL%, after: mul_expr
TARGET LIST: 
target index: 540  , change_value: mul_expr
target index: 550  , change_value: %NULL%

add_expr  :  mul_expr  %MARK%  add_expr_opt_2  
 index is: 540, term type: to_deduce, before: mul_expr, after: add_expr_opt_2
TARGET LIST: 
target index: 541  , change_value: add_expr_opt_2
target index: 542  , change_value: %NULL%
target index: 543  , change_value: %NULL%

add_expr  :  mul_expr  add_expr_opt_2  %MARK%  
 index is: 541, term type: deduce, before: add_expr_opt_2, after: %NULL%
TARGET LIST: 

add_expr_opt_2  :  %MARK%  
 index is: 542, term type: wrong type, before: %NULL%, after: %NULL%
TARGET LIST: 

add_expr_opt_2  :  %MARK%  add_expr_opt_2_decl_1  add_expr  
 index is: 543, term type: to_deduce, before: %NULL%, after: add_expr_opt_2_decl_1
TARGET LIST: 
target index: 544  , change_value: add_expr_opt_2_decl_1
target index: 546  , change_value: %NULL%
target index: 548  , change_value: %NULL%

add_expr_opt_2  :  add_expr_opt_2_decl_1  %MARK%  add_expr  
 index is: 544, term type: to_deduce, before: add_expr_opt_2_decl_1, after: add_expr
TARGET LIST: 
target index: 539  , change_value: %NULL%
target index: 545  , change_value: add_expr

add_expr_opt_2  :  add_expr_opt_2_decl_1  add_expr  %MARK%  
 index is: 545, term type: deduce, before: add_expr, after: %NULL%
TARGET LIST: 

add_expr_opt_2_decl_1  :  %MARK%  "-"  
 index is: 546, term type: shift, before: %NULL%, after: "-"
TARGET LIST: 
target index: 547  , change_value: "-"

add_expr_opt_2_decl_1  :  "-"  %MARK%  
 index is: 547, term type: deduce, before: "-", after: %NULL%
TARGET LIST: 

add_expr_opt_2_decl_1  :  %MARK%  "+"  
 index is: 548, term type: shift, before: %NULL%, after: "+"
TARGET LIST: 
target index: 549  , change_value: "+"

add_expr_opt_2_decl_1  :  "+"  %MARK%  
 index is: 549, term type: deduce, before: "+", after: %NULL%
TARGET LIST: 

mul_expr  :  %MARK%  unary_expr  mul_expr_decl_2  
 index is: 550, term type: to_deduce, before: %NULL%, after: unary_expr
TARGET LIST: 
target index: 551  , change_value: unary_expr
target index: 567  , change_value: %NULL%

mul_expr  :  unary_expr  %MARK%  mul_expr_decl_2  
 index is: 551, term type: to_deduce, before: unary_expr, after: mul_expr_decl_2
TARGET LIST: 
target index: 552  , change_value: mul_expr_decl_2
target index: 553  , change_value: %NULL%
target index: 555  , change_value: %NULL%

mul_expr  :  unary_expr  mul_expr_decl_2  %MARK%  
 index is: 552, term type: deduce, before: mul_expr_decl_2, after: %NULL%
TARGET LIST: 

mul_expr_decl_2  :  %MARK%  ENDL  
 index is: 553, term type: shift, before: %NULL%, after: ENDL
TARGET LIST: 
target index: 554  , change_value: ENDL

mul_expr_decl_2  :  ENDL  %MARK%  
 index is: 554, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

mul_expr_decl_2  :  %MARK%  mul_expr_decl_2_opt_1  
 index is: 555, term type: to_deduce, before: %NULL%, after: mul_expr_decl_2_opt_1
TARGET LIST: 
target index: 556  , change_value: mul_expr_decl_2_opt_1
target index: 557  , change_value: %NULL%
target index: 558  , change_value: %NULL%

mul_expr_decl_2  :  mul_expr_decl_2_opt_1  %MARK%  
 index is: 556, term type: deduce, before: mul_expr_decl_2_opt_1, after: %NULL%
TARGET LIST: 

mul_expr_decl_2_opt_1  :  %MARK%  
 index is: 557, term type: wrong type, before: %NULL%, after: %NULL%
TARGET LIST: 

mul_expr_decl_2_opt_1  :  %MARK%  mul_expr_decl_2_opt_1_decl_1  mul_expr  
 index is: 558, term type: to_deduce, before: %NULL%, after: mul_expr_decl_2_opt_1_decl_1
TARGET LIST: 
target index: 559  , change_value: mul_expr_decl_2_opt_1_decl_1
target index: 561  , change_value: %NULL%
target index: 563  , change_value: %NULL%
target index: 565  , change_value: %NULL%

mul_expr_decl_2_opt_1  :  mul_expr_decl_2_opt_1_decl_1  %MARK%  mul_expr  
 index is: 559, term type: to_deduce, before: mul_expr_decl_2_opt_1_decl_1, after: mul_expr
TARGET LIST: 
target index: 550  , change_value: %NULL%
target index: 560  , change_value: mul_expr

mul_expr_decl_2_opt_1  :  mul_expr_decl_2_opt_1_decl_1  mul_expr  %MARK%  
 index is: 560, term type: deduce, before: mul_expr, after: %NULL%
TARGET LIST: 

mul_expr_decl_2_opt_1_decl_1  :  %MARK%  "^"  
 index is: 561, term type: shift, before: %NULL%, after: "^"
TARGET LIST: 
target index: 562  , change_value: "^"

mul_expr_decl_2_opt_1_decl_1  :  "^"  %MARK%  
 index is: 562, term type: deduce, before: "^", after: %NULL%
TARGET LIST: 

mul_expr_decl_2_opt_1_decl_1  :  %MARK%  "%"  
 index is: 563, term type: shift, before: %NULL%, after: "%"
TARGET LIST: 
target index: 564  , change_value: "%"

mul_expr_decl_2_opt_1_decl_1  :  "%"  %MARK%  
 index is: 564, term type: deduce, before: "%", after: %NULL%
TARGET LIST: 

mul_expr_decl_2_opt_1_decl_1  :  %MARK%  "/"  
 index is: 565, term type: shift, before: %NULL%, after: "/"
TARGET LIST: 
target index: 566  , change_value: "/"

mul_expr_decl_2_opt_1_decl_1  :  "/"  %MARK%  
 index is: 566, term type: deduce, before: "/", after: %NULL%
TARGET LIST: 

unary_expr  :  %MARK%  unary_expr_decl_1  
 index is: 567, term type: to_deduce, before: %NULL%, after: unary_expr_decl_1
TARGET LIST: 
target index: 568  , change_value: unary_expr_decl_1
target index: 569  , change_value: %NULL%
target index: 572  , change_value: %NULL%
target index: 576  , change_value: %NULL%

unary_expr  :  unary_expr_decl_1  %MARK%  
 index is: 568, term type: deduce, before: unary_expr_decl_1, after: %NULL%
TARGET LIST: 

unary_expr_decl_1  :  %MARK%  prim_expr  unary_expr_decl_1_decl_2  
 index is: 569, term type: to_deduce, before: %NULL%, after: prim_expr
TARGET LIST: 
target index: 570  , change_value: prim_expr

unary_expr_decl_1  :  prim_expr  %MARK%  unary_expr_decl_1_decl_2  
 index is: 570, term type: to_deduce, before: prim_expr, after: unary_expr_decl_1_decl_2
TARGET LIST: 
target index: 571  , change_value: unary_expr_decl_1_decl_2
target index: 579  , change_value: %NULL%
target index: 581  , change_value: %NULL%

unary_expr_decl_1  :  prim_expr  unary_expr_decl_1_decl_2  %MARK%  
 index is: 571, term type: deduce, before: unary_expr_decl_1_decl_2, after: %NULL%
TARGET LIST: 

unary_expr_decl_1  :  %MARK%  unary_expr_decl_1_decl_1  unary_expr  unary_expr_decl_1_opt_3  
 index is: 572, term type: to_deduce, before: %NULL%, after: unary_expr_decl_1_decl_1
TARGET LIST: 
target index: 573  , change_value: unary_expr_decl_1_decl_1
target index: 589  , change_value: %NULL%
target index: 591  , change_value: %NULL%

unary_expr_decl_1  :  unary_expr_decl_1_decl_1  %MARK%  unary_expr  unary_expr_decl_1_opt_3  
 index is: 573, term type: to_deduce, before: unary_expr_decl_1_decl_1, after: unary_expr
TARGET LIST: 
target index: 567  , change_value: %NULL%
target index: 574  , change_value: unary_expr

unary_expr_decl_1  :  unary_expr_decl_1_decl_1  unary_expr  %MARK%  unary_expr_decl_1_opt_3  
 index is: 574, term type: to_deduce, before: unary_expr, after: unary_expr_decl_1_opt_3
TARGET LIST: 
target index: 575  , change_value: unary_expr_decl_1_opt_3
target index: 586  , change_value: %NULL%
target index: 587  , change_value: %NULL%

unary_expr_decl_1  :  unary_expr_decl_1_decl_1  unary_expr  unary_expr_decl_1_opt_3  %MARK%  
 index is: 575, term type: deduce, before: unary_expr_decl_1_opt_3, after: %NULL%
TARGET LIST: 

unary_expr_decl_1  :  %MARK%  unary_op  unary_expr  
 index is: 576, term type: to_deduce, before: %NULL%, after: unary_op
TARGET LIST: 
target index: 577  , change_value: unary_op
target index: 593  , change_value: %NULL%
target index: 595  , change_value: %NULL%
target index: 597  , change_value: %NULL%
target index: 599  , change_value: %NULL%
target index: 601  , change_value: %NULL%
target index: 603  , change_value: %NULL%
target index: 605  , change_value: %NULL%

unary_expr_decl_1  :  unary_op  %MARK%  unary_expr  
 index is: 577, term type: to_deduce, before: unary_op, after: unary_expr
TARGET LIST: 
target index: 567  , change_value: %NULL%
target index: 578  , change_value: unary_expr

unary_expr_decl_1  :  unary_op  unary_expr  %MARK%  
 index is: 578, term type: deduce, before: unary_expr, after: %NULL%
TARGET LIST: 

unary_expr_decl_1_decl_2  :  %MARK%  ENDL  
 index is: 579, term type: shift, before: %NULL%, after: ENDL
TARGET LIST: 
target index: 580  , change_value: ENDL

unary_expr_decl_1_decl_2  :  ENDL  %MARK%  
 index is: 580, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

unary_expr_decl_1_decl_2  :  %MARK%  unary_expr_decl_1_decl_2_opt_1  
 index is: 581, term type: to_deduce, before: %NULL%, after: unary_expr_decl_1_decl_2_opt_1
TARGET LIST: 
target index: 582  , change_value: unary_expr_decl_1_decl_2_opt_1
target index: 583  , change_value: %NULL%
target index: 584  , change_value: %NULL%

unary_expr_decl_1_decl_2  :  unary_expr_decl_1_decl_2_opt_1  %MARK%  
 index is: 582, term type: deduce, before: unary_expr_decl_1_decl_2_opt_1, after: %NULL%
TARGET LIST: 

unary_expr_decl_1_decl_2_opt_1  :  %MARK%  
 index is: 583, term type: wrong type, before: %NULL%, after: %NULL%
TARGET LIST: 

unary_expr_decl_1_decl_2_opt_1  :  %MARK%  postifx  
 index is: 584, term type: to_deduce, before: %NULL%, after: postifx
TARGET LIST: 
target index: 585  , change_value: postifx

unary_expr_decl_1_decl_2_opt_1  :  postifx  %MARK%  
 index is: 585, term type: deduce, before: postifx, after: %NULL%
TARGET LIST: 

unary_expr_decl_1_opt_3  :  %MARK%  
 index is: 586, term type: wrong type, before: %NULL%, after: %NULL%
TARGET LIST: 

unary_expr_decl_1_opt_3  :  %MARK%  array  
 index is: 587, term type: to_deduce, before: %NULL%, after: array
TARGET LIST: 
target index: 588  , change_value: array
target index: 670  , change_value: %NULL%

unary_expr_decl_1_opt_3  :  array  %MARK%  
 index is: 588, term type: deduce, before: array, after: %NULL%
TARGET LIST: 

unary_expr_decl_1_decl_1  :  %MARK%  "gcnew"  
 index is: 589, term type: shift, before: %NULL%, after: "gcnew"
TARGET LIST: 
target index: 590  , change_value: "gcnew"

unary_expr_decl_1_decl_1  :  "gcnew"  %MARK%  
 index is: 590, term type: deduce, before: "gcnew", after: %NULL%
TARGET LIST: 

unary_expr_decl_1_decl_1  :  %MARK%  "new"  
 index is: 591, term type: shift, before: %NULL%, after: "new"
TARGET LIST: 
target index: 592  , change_value: "new"

unary_expr_decl_1_decl_1  :  "new"  %MARK%  
 index is: 592, term type: deduce, before: "new", after: %NULL%
TARGET LIST: 

unary_op  :  %MARK%  "!"  
 index is: 593, term type: shift, before: %NULL%, after: "!"
TARGET LIST: 
target index: 594  , change_value: "!"

unary_op  :  "!"  %MARK%  
 index is: 594, term type: deduce, before: "!", after: %NULL%
TARGET LIST: 

unary_op  :  %MARK%  "-"  
 index is: 595, term type: shift, before: %NULL%, after: "-"
TARGET LIST: 
target index: 596  , change_value: "-"

unary_op  :  "-"  %MARK%  
 index is: 596, term type: deduce, before: "-", after: %NULL%
TARGET LIST: 

unary_op  :  %MARK%  "&"  
 index is: 597, term type: shift, before: %NULL%, after: "&"
TARGET LIST: 
target index: 598  , change_value: "&"

unary_op  :  "&"  %MARK%  
 index is: 598, term type: deduce, before: "&", after: %NULL%
TARGET LIST: 

unary_op  :  %MARK%  "*"  
 index is: 599, term type: shift, before: %NULL%, after: "*"
TARGET LIST: 
target index: 600  , change_value: "*"

unary_op  :  "*"  %MARK%  
 index is: 600, term type: deduce, before: "*", after: %NULL%
TARGET LIST: 

unary_op  :  %MARK%  "--"  
 index is: 601, term type: shift, before: %NULL%, after: "--"
TARGET LIST: 
target index: 602  , change_value: "--"

unary_op  :  "--"  %MARK%  
 index is: 602, term type: deduce, before: "--", after: %NULL%
TARGET LIST: 

unary_op  :  %MARK%  "++"  
 index is: 603, term type: shift, before: %NULL%, after: "++"
TARGET LIST: 
target index: 604  , change_value: "++"

unary_op  :  "++"  %MARK%  
 index is: 604, term type: deduce, before: "++", after: %NULL%
TARGET LIST: 

unary_op  :  %MARK%  "typeid"  
 index is: 605, term type: shift, before: %NULL%, after: "typeid"
TARGET LIST: 
target index: 606  , change_value: "typeid"

unary_op  :  "typeid"  %MARK%  
 index is: 606, term type: deduce, before: "typeid", after: %NULL%
TARGET LIST: 

postfix_expr  :  %MARK%  constant  
 index is: 607, term type: to_deduce, before: %NULL%, after: constant
TARGET LIST: 
target index: 608  , change_value: constant
target index: 662  , change_value: %NULL%
target index: 664  , change_value: %NULL%
target index: 666  , change_value: %NULL%
target index: 668  , change_value: %NULL%

postfix_expr  :  constant  %MARK%  
 index is: 608, term type: deduce, before: constant, after: %NULL%
TARGET LIST: 

postfix_expr  :  %MARK%  visit_expr  
 index is: 609, term type: to_deduce, before: %NULL%, after: visit_expr
TARGET LIST: 
target index: 610  , change_value: visit_expr
target index: 611  , change_value: %NULL%

postfix_expr  :  visit_expr  %MARK%  
 index is: 610, term type: deduce, before: visit_expr, after: %NULL%
TARGET LIST: 

visit_expr  :  %MARK%  object  visit_expr_opt_2  visit_expr  
 index is: 611, term type: to_deduce, before: %NULL%, after: object
TARGET LIST: 
target index: 612  , change_value: object
target index: 620  , change_value: %NULL%

visit_expr  :  object  %MARK%  visit_expr_opt_2  visit_expr  
 index is: 612, term type: to_deduce, before: object, after: visit_expr_opt_2
TARGET LIST: 
target index: 613  , change_value: visit_expr_opt_2
target index: 615  , change_value: %NULL%
target index: 616  , change_value: %NULL%
target index: 618  , change_value: %NULL%

visit_expr  :  object  visit_expr_opt_2  %MARK%  visit_expr  
 index is: 613, term type: to_deduce, before: visit_expr_opt_2, after: visit_expr
TARGET LIST: 
target index: 611  , change_value: %NULL%
target index: 614  , change_value: visit_expr

visit_expr  :  object  visit_expr_opt_2  visit_expr  %MARK%  
 index is: 614, term type: deduce, before: visit_expr, after: %NULL%
TARGET LIST: 

visit_expr_opt_2  :  %MARK%  
 index is: 615, term type: wrong type, before: %NULL%, after: %NULL%
TARGET LIST: 

visit_expr_opt_2  :  %MARK%  "."  
 index is: 616, term type: shift, before: %NULL%, after: "."
TARGET LIST: 
target index: 617  , change_value: "."

visit_expr_opt_2  :  "."  %MARK%  
 index is: 617, term type: deduce, before: ".", after: %NULL%
TARGET LIST: 

visit_expr_opt_2  :  %MARK%  "->"  
 index is: 618, term type: shift, before: %NULL%, after: "->"
TARGET LIST: 
target index: 619  , change_value: "->"

visit_expr_opt_2  :  "->"  %MARK%  
 index is: 619, term type: deduce, before: "->", after: %NULL%
TARGET LIST: 

object  :  %MARK%  object_decl_1  
 index is: 620, term type: to_deduce, before: %NULL%, after: object_decl_1
TARGET LIST: 
target index: 621  , change_value: object_decl_1
target index: 622  , change_value: %NULL%
target index: 624  , change_value: %NULL%
target index: 626  , change_value: %NULL%
target index: 628  , change_value: %NULL%
target index: 630  , change_value: %NULL%
target index: 633  , change_value: %NULL%

object  :  object_decl_1  %MARK%  
 index is: 621, term type: deduce, before: object_decl_1, after: %NULL%
TARGET LIST: 

object_decl_1  :  %MARK%  CHAR  
 index is: 622, term type: shift, before: %NULL%, after: CHAR
TARGET LIST: 
target index: 623  , change_value: CHAR

object_decl_1  :  CHAR  %MARK%  
 index is: 623, term type: deduce, before: CHAR, after: %NULL%
TARGET LIST: 

object_decl_1  :  %MARK%  element  
 index is: 624, term type: to_deduce, before: %NULL%, after: element
TARGET LIST: 
target index: 625  , change_value: element
target index: 642  , change_value: %NULL%

object_decl_1  :  element  %MARK%  
 index is: 625, term type: deduce, before: element, after: %NULL%
TARGET LIST: 

object_decl_1  :  %MARK%  "global"  
 index is: 626, term type: shift, before: %NULL%, after: "global"
TARGET LIST: 
target index: 627  , change_value: "global"

object_decl_1  :  "global"  %MARK%  
 index is: 627, term type: deduce, before: "global", after: %NULL%
TARGET LIST: 

object_decl_1  :  %MARK%  "local"  
 index is: 628, term type: shift, before: %NULL%, after: "local"
TARGET LIST: 
target index: 629  , change_value: "local"

object_decl_1  :  "local"  %MARK%  
 index is: 629, term type: deduce, before: "local", after: %NULL%
TARGET LIST: 

object_decl_1  :  %MARK%  str  object_decl_1_opt_2  
 index is: 630, term type: to_deduce, before: %NULL%, after: str
TARGET LIST: 
target index: 631  , change_value: str

object_decl_1  :  str  %MARK%  object_decl_1_opt_2  
 index is: 631, term type: to_deduce, before: str, after: object_decl_1_opt_2
TARGET LIST: 
target index: 632  , change_value: object_decl_1_opt_2
target index: 636  , change_value: %NULL%
target index: 637  , change_value: %NULL%
target index: 639  , change_value: %NULL%
target index: 640  , change_value: %NULL%

object_decl_1  :  str  object_decl_1_opt_2  %MARK%  
 index is: 632, term type: deduce, before: object_decl_1_opt_2, after: %NULL%
TARGET LIST: 

object_decl_1  :  %MARK%  array  object_decl_1_opt_2  
 index is: 633, term type: to_deduce, before: %NULL%, after: array
TARGET LIST: 
target index: 634  , change_value: array
target index: 670  , change_value: %NULL%

object_decl_1  :  array  %MARK%  object_decl_1_opt_2  
 index is: 634, term type: to_deduce, before: array, after: object_decl_1_opt_2
TARGET LIST: 
target index: 635  , change_value: object_decl_1_opt_2
target index: 636  , change_value: %NULL%
target index: 637  , change_value: %NULL%
target index: 639  , change_value: %NULL%
target index: 640  , change_value: %NULL%

object_decl_1  :  array  object_decl_1_opt_2  %MARK%  
 index is: 635, term type: deduce, before: object_decl_1_opt_2, after: %NULL%
TARGET LIST: 

object_decl_1_opt_2  :  %MARK%  
 index is: 636, term type: wrong type, before: %NULL%, after: %NULL%
TARGET LIST: 

object_decl_1_opt_2  :  %MARK%  index  
 index is: 637, term type: to_deduce, before: %NULL%, after: index
TARGET LIST: 
target index: 638  , change_value: index
target index: 684  , change_value: %NULL%

object_decl_1_opt_2  :  index  %MARK%  
 index is: 638, term type: deduce, before: index, after: %NULL%
TARGET LIST: 

object_decl_1_opt_2  :  %MARK%  
 index is: 639, term type: wrong type, before: %NULL%, after: %NULL%
TARGET LIST: 

object_decl_1_opt_2  :  %MARK%  index  
 index is: 640, term type: to_deduce, before: %NULL%, after: index
TARGET LIST: 
target index: 641  , change_value: index
target index: 684  , change_value: %NULL%

object_decl_1_opt_2  :  index  %MARK%  
 index is: 641, term type: deduce, before: index, after: %NULL%
TARGET LIST: 

element  :  %MARK%  element_decl_1  element_decl_2  
 index is: 642, term type: to_deduce, before: %NULL%, after: element_decl_1
TARGET LIST: 
target index: 643  , change_value: element_decl_1
target index: 656  , change_value: %NULL%
target index: 660  , change_value: %NULL%

element  :  element_decl_1  %MARK%  element_decl_2  
 index is: 643, term type: to_deduce, before: element_decl_1, after: element_decl_2
TARGET LIST: 
target index: 644  , change_value: element_decl_2
target index: 645  , change_value: %NULL%
target index: 647  , change_value: %NULL%

element  :  element_decl_1  element_decl_2  %MARK%  
 index is: 644, term type: deduce, before: element_decl_2, after: %NULL%
TARGET LIST: 

element_decl_2  :  %MARK%  element_decl_2_rep_1  
 index is: 645, term type: to_deduce, before: %NULL%, after: element_decl_2_rep_1
TARGET LIST: 
target index: 646  , change_value: element_decl_2_rep_1
target index: 649  , change_value: %NULL%
target index: 650  , change_value: %NULL%
target index: 653  , change_value: %NULL%

element_decl_2  :  element_decl_2_rep_1  %MARK%  
 index is: 646, term type: deduce, before: element_decl_2_rep_1, after: %NULL%
TARGET LIST: 

element_decl_2  :  %MARK%  ENDL  
 index is: 647, term type: shift, before: %NULL%, after: ENDL
TARGET LIST: 
target index: 648  , change_value: ENDL

element_decl_2  :  ENDL  %MARK%  
 index is: 648, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

element_decl_2_rep_1  :  %MARK%  
 index is: 649, term type: wrong type, before: %NULL%, after: %NULL%
TARGET LIST: 

element_decl_2_rep_1  :  %MARK%  index  element_decl_2_rep_1  
 index is: 650, term type: to_deduce, before: %NULL%, after: index
TARGET LIST: 
target index: 651  , change_value: index
target index: 684  , change_value: %NULL%

element_decl_2_rep_1  :  index  %MARK%  element_decl_2_rep_1  
 index is: 651, term type: to_deduce, before: index, after: element_decl_2_rep_1
TARGET LIST: 
target index: 649  , change_value: %NULL%
target index: 650  , change_value: %NULL%
target index: 652  , change_value: element_decl_2_rep_1
target index: 653  , change_value: %NULL%

element_decl_2_rep_1  :  index  element_decl_2_rep_1  %MARK%  
 index is: 652, term type: deduce, before: element_decl_2_rep_1, after: %NULL%
TARGET LIST: 

element_decl_2_rep_1  :  %MARK%  fcall  element_decl_2_rep_1  
 index is: 653, term type: to_deduce, before: %NULL%, after: fcall
TARGET LIST: 
target index: 654  , change_value: fcall
target index: 677  , change_value: %NULL%

element_decl_2_rep_1  :  fcall  %MARK%  element_decl_2_rep_1  
 index is: 654, term type: to_deduce, before: fcall, after: element_decl_2_rep_1
TARGET LIST: 
target index: 649  , change_value: %NULL%
target index: 650  , change_value: %NULL%
target index: 653  , change_value: %NULL%
target index: 655  , change_value: element_decl_2_rep_1

element_decl_2_rep_1  :  fcall  element_decl_2_rep_1  %MARK%  
 index is: 655, term type: deduce, before: element_decl_2_rep_1, after: %NULL%
TARGET LIST: 

element_decl_1  :  %MARK%  "("  single_expr  ")"  
 index is: 656, term type: shift, before: %NULL%, after: "("
TARGET LIST: 
target index: 657  , change_value: "("

element_decl_1  :  "("  %MARK%  single_expr  ")"  
 index is: 657, term type: to_deduce, before: "(", after: single_expr
TARGET LIST: 
target index: 388  , change_value: %NULL%
target index: 390  , change_value: %NULL%
target index: 658  , change_value: single_expr

element_decl_1  :  "("  single_expr  %MARK%  ")"  
 index is: 658, term type: shift, before: single_expr, after: ")"
TARGET LIST: 
target index: 659  , change_value: ")"

element_decl_1  :  "("  single_expr  ")"  %MARK%  
 index is: 659, term type: deduce, before: ")", after: %NULL%
TARGET LIST: 

element_decl_1  :  %MARK%  ID  
 index is: 660, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 661  , change_value: ID

element_decl_1  :  ID  %MARK%  
 index is: 661, term type: deduce, before: ID, after: %NULL%
TARGET LIST: 

constant  :  %MARK%  "false"  
 index is: 662, term type: shift, before: %NULL%, after: "false"
TARGET LIST: 
target index: 663  , change_value: "false"

constant  :  "false"  %MARK%  
 index is: 663, term type: deduce, before: "false", after: %NULL%
TARGET LIST: 

constant  :  %MARK%  "true"  
 index is: 664, term type: shift, before: %NULL%, after: "true"
TARGET LIST: 
target index: 665  , change_value: "true"

constant  :  "true"  %MARK%  
 index is: 665, term type: deduce, before: "true", after: %NULL%
TARGET LIST: 

constant  :  %MARK%  "null"  
 index is: 666, term type: shift, before: %NULL%, after: "null"
TARGET LIST: 
target index: 667  , change_value: "null"

constant  :  "null"  %MARK%  
 index is: 667, term type: deduce, before: "null", after: %NULL%
TARGET LIST: 

constant  :  %MARK%  NUM  
 index is: 668, term type: shift, before: %NULL%, after: NUM
TARGET LIST: 
target index: 669  , change_value: NUM

constant  :  NUM  %MARK%  
 index is: 669, term type: deduce, before: NUM, after: %NULL%
TARGET LIST: 

array  :  %MARK%  "{"  array_opt_2  "}"  
 index is: 670, term type: shift, before: %NULL%, after: "{"
TARGET LIST: 
target index: 671  , change_value: "{"

array  :  "{"  %MARK%  array_opt_2  "}"  
 index is: 671, term type: to_deduce, before: "{", after: array_opt_2
TARGET LIST: 
target index: 672  , change_value: array_opt_2
target index: 674  , change_value: %NULL%
target index: 675  , change_value: %NULL%

array  :  "{"  array_opt_2  %MARK%  "}"  
 index is: 672, term type: shift, before: array_opt_2, after: "}"
TARGET LIST: 
target index: 673  , change_value: "}"

array  :  "{"  array_opt_2  "}"  %MARK%  
 index is: 673, term type: deduce, before: "}", after: %NULL%
TARGET LIST: 

array_opt_2  :  %MARK%  
 index is: 674, term type: wrong type, before: %NULL%, after: %NULL%
TARGET LIST: 

array_opt_2  :  %MARK%  expr  
 index is: 675, term type: to_deduce, before: %NULL%, after: expr
TARGET LIST: 
target index: 381  , change_value: %NULL%
target index: 676  , change_value: expr

array_opt_2  :  expr  %MARK%  
 index is: 676, term type: deduce, before: expr, after: %NULL%
TARGET LIST: 

fcall  :  %MARK%  "("  fcall_opt_2  ")"  
 index is: 677, term type: shift, before: %NULL%, after: "("
TARGET LIST: 
target index: 678  , change_value: "("

fcall  :  "("  %MARK%  fcall_opt_2  ")"  
 index is: 678, term type: to_deduce, before: "(", after: fcall_opt_2
TARGET LIST: 
target index: 679  , change_value: fcall_opt_2
target index: 681  , change_value: %NULL%
target index: 682  , change_value: %NULL%

fcall  :  "("  fcall_opt_2  %MARK%  ")"  
 index is: 679, term type: shift, before: fcall_opt_2, after: ")"
TARGET LIST: 
target index: 680  , change_value: ")"

fcall  :  "("  fcall_opt_2  ")"  %MARK%  
 index is: 680, term type: deduce, before: ")", after: %NULL%
TARGET LIST: 

fcall_opt_2  :  %MARK%  
 index is: 681, term type: wrong type, before: %NULL%, after: %NULL%
TARGET LIST: 

fcall_opt_2  :  %MARK%  expr  
 index is: 682, term type: to_deduce, before: %NULL%, after: expr
TARGET LIST: 
target index: 381  , change_value: %NULL%
target index: 683  , change_value: expr

fcall_opt_2  :  expr  %MARK%  
 index is: 683, term type: deduce, before: expr, after: %NULL%
TARGET LIST: 

index  :  %MARK%  "["  basic_expr  "]"  
 index is: 684, term type: shift, before: %NULL%, after: "["
TARGET LIST: 
target index: 685  , change_value: "["

index  :  "["  %MARK%  basic_expr  "]"  
 index is: 685, term type: to_deduce, before: "[", after: basic_expr
TARGET LIST: 
target index: 392  , change_value: %NULL%
target index: 395  , change_value: %NULL%
target index: 686  , change_value: basic_expr

index  :  "["  basic_expr  %MARK%  "]"  
 index is: 686, term type: shift, before: basic_expr, after: "]"
TARGET LIST: 
target index: 687  , change_value: "]"

index  :  "["  basic_expr  "]"  %MARK%  
 index is: 687, term type: deduce, before: "]", after: %NULL%
TARGET LIST: 

#####
#DFA#
#####
#########
#0  TERM#
#########


##########
#FROM SET#
##########
%start%  :  %MARK%  begin  
 index is: 0, term type: to_deduce, before: %NULL%, after: begin
TARGET LIST: 
target index: 1  , change_value: begin
target index: 2  , change_value: %NULL%

########
#SUBSET#
########
%start%  :  %MARK%  begin  
 index is: 0, term type: to_deduce, before: %NULL%, after: begin
TARGET LIST: 
target index: 1  , change_value: begin
target index: 2  , change_value: %NULL%

begin  :  %MARK%  stmts  
 index is: 2, term type: to_deduce, before: %NULL%, after: stmts
TARGET LIST: 
target index: 3  , change_value: stmts
target index: 14  , change_value: %NULL%

########
#TO SET#
########
%start%  :  begin  %MARK%  
 index is: 1, term type: accept, before: begin, after: %NULL%
TARGET LIST: 

begin  :  stmts  %MARK%  
 index is: 3, term type: deduce, before: stmts, after: %NULL%
TARGET LIST: 



#########
#1  TERM#
#########


##########
#FROM SET#
##########
%start%  :  begin  %MARK%  
 index is: 1, term type: accept, before: begin, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
%start%  :  begin  %MARK%  
 index is: 1, term type: accept, before: begin, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


#########
#2  TERM#
#########


##########
#FROM SET#
##########
begin  :  stmts  %MARK%  
 index is: 3, term type: deduce, before: stmts, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
begin  :  stmts  %MARK%  
 index is: 3, term type: deduce, before: stmts, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


???
???
???
deduce



########
LOG INFO
########



##########
ERROR INFO
##########
