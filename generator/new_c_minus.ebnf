program ::= program_0_rep_1 ;

program_0_rep_1 ::= NULL 
                  | external_declaration program_0_rep_1 ;

external_declaration ::= struct_specifier 
                       | declaration 
                       | function_declaration ;
                       
function_declaration ::= type_specifier direct_declarator compound_statement ;

type_specifier ::= ID ;

direct_declarator ::= ID extend_part ;

extend_part ::= '(' extend_part_1_opt_2 ')' 
              | extend_part_0_rep_1 ;

extend_part_1_opt_2 ::= NULL 
                      | parameter_list ;

extend_part_0_rep_1 ::= NULL
                      | '[' extend_part_0_rep_1_0_opt_2 ']' extend_part_0_rep_1 ;

extend_part_0_rep_1_0_opt_2 ::= NULL
                              | constant_expression ;

constant_expression ::= relat_expression ;

parameter_list ::= parameter_declaration parameter_list_0_rep_2 ;

parameter_list_0_rep_2 ::= NULL 
                         | ',' parameter_declaration parameter_list_0_rep_2 ;

parameter_declaration ::= declaration_specifier ID ;

declaration_specifier ::= type_specifier ;

compound_statement ::= '{' compound_statement_0_rep_2 '}' ;

compound_statement_0_rep_2 ::= NULL 
                             | statement compound_statement_0_rep_2 
                             | declaration compound_statement_0_rep_2 ;

declaration ::= type_specifier init_declarator ';' ;

init_declarator ::= direct_declarator init_declarator_0_opt_2 ;

init_declarator_0_opt_2 ::= NULL 
                          | '=' initializer ;

initializer ::= '{' initializer_list initializer_1_opt_3 '}' 
              | assignment_expression ;

initializer_1_opt_3 ::= NULL 
                      | ',' ;

initializer_list ::= initializer initializer_list_0_rep_2 ;

initializer_list_0_rep_2 ::= NULL 
                           | ',' initializer initializer_list_0_rep_2 ;

statement ::= return_statement 
            | iteration_statement 
            | selection_statement 
            | expression_statement 
            | compound_statement ;

expression_statement ::= expression ';'
                       | ';' ;

selection_statement ::= 'if' '(' expression ')' statement selection_statement_0_opt_6 ;

selection_statement_0_opt_6 ::= NULL 
                              | 'else' statement ;

iteration_statement ::= 'for' '(' iteration_statement_0_opt_3 ';' iteration_statement_0_opt_5 ';' iteration_statement_0_opt_7 ')' statement ;

iteration_statement_0_opt_7 ::= NULL
                              | expression ;

iteration_statement_0_opt_5 ::= NULL
                              | expression ;

iteration_statement_0_opt_3 ::= NULL 
                              | iteration_statement_0_opt_3_0_opt_1 init_declarator ;

iteration_statement_0_opt_3_0_opt_1 ::= NULL 
                                      | type_specifier ;

return_statement ::= 'return' expression_statement ;

expression ::= assignment_expression expression_0_rep_2 ;

expression_0_rep_2 ::= NULL 
                     | ',' assignment_expression expression_0_rep_2 ;

assignment_expression ::= equality_expression assignment_expression_0_opt_2 ;

assignment_expression_0_opt_2 ::= NULL 
                                | assign_op assignment_expression ;

assign_op ::= '/=' 
            | '*=' 
            | '-=' 
            | '+=' 
            | '=' 
            ;

equality_expression ::= relat_expression equality_expression_0_opt_2 ;

equality_expression_0_opt_2 ::= NULL 
                              | equal_op equality_expression ;

equal_op ::= '!=' 
           | '==' ;

relat_expression ::= additive_expression relat_expression_0_opt_2 ;

relat_expression_0_opt_2 ::= NULL 
                           | relat_op relat_expression ;

relat_op ::= '<=' 
           | '>=' 
           | '<' 
           | '>' ;

additive_expression ::= multiplicative_expression additive_expression_0_opt_2 ;

additive_expression_0_opt_2 ::= NULL 
                              | add_op additive_expression ;

add_op ::= '-' 
         | '+' ;

multiplicative_expression ::= unary_expression multiplicative_expression_0_opt_2 ;

multiplicative_expression_0_opt_2 ::= NULL 
                                    | mul_op multiplicative_expression ;

mul_op ::= '/' 
         | '*' ;

unary_expression ::= postfix_expression 
                   | sadd_op unary_expression ;

sadd_op ::= '-' 
          | '--' 
          | '++' ;

postfix_expression ::= primary_expression postfix_expression_0_rep_2 ;

postfix_expression_0_rep_2 ::= NULL 
                             | postfix_extend_part postfix_expression_0_rep_2 ;

postfix_extend_part ::= post_op 
                      | '.' ID 
                      | '(' postfix_extend_part_1_opt_2 ')' 
                      | '[' expression ']' ;

postfix_extend_part_1_opt_2 ::= NULL 
                              | assignment_expression postfix_extend_part_1_opt_2_0_rep_2 ;

postfix_extend_part_1_opt_2_0_rep_2 ::= NULL 
                                      | ',' assignment_expression postfix_extend_part_1_opt_2_0_rep_2 ;

post_op ::= '--' 
          | '++' ;

primary_expression ::= '(' expression ')' 
                     | NUMBER 
                     | ID ;

struct_specifier ::= 'struct' ID '{' struct_specifier_0_rep_4 '}' struct_specifier_0_opt_6 ';' ;

struct_specifier_0_opt_6 ::= NULL 
                           | ID ;

struct_specifier_0_rep_4 ::= NULL 
                           | declaration struct_specifier_0_rep_4 ;