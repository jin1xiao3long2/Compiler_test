#########################
Begin Lexical Analysis...
#########################
############
Lexer Output
############
CP = 0    Type = id	Data = program	Pos = (0, 0)
CP = 1    Type = sig	Data = ::=	Pos = (7, 0)
CP = 2    Type = brac	Data = {	Pos = (11, 0)
CP = 3    Type = id	Data = external_declaration	Pos = (12, 0)
CP = 4    Type = brac	Data = }	Pos = (32, 0)
CP = 5    Type = sig	Data = ;	Pos = (34, 0)
CP = 6    Type = id	Data = external_declaration	Pos = (0, 2)
CP = 7    Type = sig	Data = ::=	Pos = (21, 2)
CP = 8    Type = id	Data = function_declaration	Pos = (25, 2)
CP = 9    Type = sig	Data = |	Pos = (14, 3)
CP = 10   Type = id	Data = declaration	Pos = (16, 3)
CP = 11   Type = sig	Data = |	Pos = (14, 4)
CP = 12   Type = id	Data = struct_specifier	Pos = (16, 4)
CP = 13   Type = sig	Data = ;	Pos = (14, 5)
CP = 14   Type = id	Data = function_declaration	Pos = (0, 7)
CP = 15   Type = sig	Data = ::=	Pos = (21, 7)
CP = 16   Type = id	Data = type_specifier	Pos = (25, 7)
CP = 17   Type = id	Data = direct_declarator	Pos = (40, 7)
CP = 18   Type = id	Data = compound_statement	Pos = (58, 7)
CP = 19   Type = sig	Data = ;	Pos = (77, 7)
CP = 20   Type = id	Data = type_specifier	Pos = (0, 9)
CP = 21   Type = sig	Data = ::=	Pos = (15, 9)
CP = 22   Type = token	Data = ID	Pos = (19, 9)
CP = 23   Type = sig	Data = ;	Pos = (21, 9)
CP = 24   Type = id	Data = direct_declarator	Pos = (0, 11)
CP = 25   Type = sig	Data = ::=	Pos = (18, 11)
CP = 26   Type = token	Data = ID	Pos = (22, 11)
CP = 27   Type = sig	Data = |	Pos = (20, 12)
CP = 28   Type = id	Data = direct_declarator	Pos = (22, 12)
CP = 29   Type = slit	Data = '['	Pos = (40, 12)
CP = 30   Type = slit	Data = ']'	Pos = (44, 12)
CP = 31   Type = sig	Data = |	Pos = (20, 13)
CP = 32   Type = id	Data = direct_declarator	Pos = (22, 13)
CP = 33   Type = slit	Data = '['	Pos = (40, 13)
CP = 34   Type = id	Data = constant_expression	Pos = (44, 13)
CP = 35   Type = slit	Data = ']'	Pos = (64, 13)
CP = 36   Type = sig	Data = |	Pos = (20, 14)
CP = 37   Type = token	Data = ID	Pos = (22, 14)
CP = 38   Type = slit	Data = '('	Pos = (25, 14)
CP = 39   Type = id	Data = parameter_list	Pos = (29, 14)
CP = 40   Type = slit	Data = ')'	Pos = (44, 14)
CP = 41   Type = sig	Data = |	Pos = (20, 15)
CP = 42   Type = token	Data = ID	Pos = (22, 15)
CP = 43   Type = slit	Data = '('	Pos = (25, 15)
CP = 44   Type = slit	Data = ')'	Pos = (29, 15)
CP = 45   Type = sig	Data = ;	Pos = (20, 16)
CP = 46   Type = id	Data = constant_expression	Pos = (0, 18)
CP = 47   Type = sig	Data = ::=	Pos = (20, 18)
CP = 48   Type = id	Data = relat_expression	Pos = (24, 18)
CP = 49   Type = sig	Data = ;	Pos = (41, 18)
CP = 50   Type = id	Data = parameter_list	Pos = (0, 20)
CP = 51   Type = sig	Data = ::=	Pos = (15, 20)
CP = 52   Type = id	Data = parameter_declaration	Pos = (19, 20)
CP = 53   Type = brac	Data = {	Pos = (41, 20)
CP = 54   Type = slit	Data = ','	Pos = (42, 20)
CP = 55   Type = id	Data = parameter_declaration	Pos = (46, 20)
CP = 56   Type = brac	Data = }	Pos = (67, 20)
CP = 57   Type = sig	Data = ;	Pos = (69, 20)
CP = 58   Type = id	Data = parameter_declaration	Pos = (0, 22)
CP = 59   Type = sig	Data = ::=	Pos = (22, 22)
CP = 60   Type = id	Data = declaration_specifier	Pos = (26, 22)
CP = 61   Type = token	Data = ID	Pos = (48, 22)
CP = 62   Type = sig	Data = ;	Pos = (51, 22)
CP = 63   Type = id	Data = declaration_specifier	Pos = (0, 24)
CP = 64   Type = sig	Data = ::=	Pos = (22, 24)
CP = 65   Type = id	Data = type_specifier	Pos = (26, 24)
CP = 66   Type = sig	Data = ;	Pos = (41, 24)
CP = 67   Type = id	Data = compound_statement	Pos = (0, 26)
CP = 68   Type = sig	Data = ::=	Pos = (19, 26)
CP = 69   Type = slit	Data = '{'	Pos = (23, 26)
CP = 70   Type = brac	Data = {	Pos = (27, 26)
CP = 71   Type = id	Data = declaration	Pos = (28, 26)
CP = 72   Type = sig	Data = |	Pos = (40, 26)
CP = 73   Type = id	Data = statement	Pos = (42, 26)
CP = 74   Type = brac	Data = }	Pos = (51, 26)
CP = 75   Type = slit	Data = '}'	Pos = (53, 26)
CP = 76   Type = sig	Data = ;	Pos = (57, 26)
CP = 77   Type = id	Data = declaration	Pos = (0, 28)
CP = 78   Type = sig	Data = ::=	Pos = (12, 28)
CP = 79   Type = id	Data = type_specifier	Pos = (16, 28)
CP = 80   Type = id	Data = init_declarator	Pos = (31, 28)
CP = 81   Type = slit	Data = ';'	Pos = (47, 28)
CP = 82   Type = sig	Data = ;	Pos = (50, 28)
CP = 83   Type = id	Data = init_declarator	Pos = (0, 30)
CP = 84   Type = sig	Data = ::=	Pos = (16, 30)
CP = 85   Type = id	Data = direct_declarator	Pos = (20, 30)
CP = 86   Type = brac	Data = [	Pos = (38, 30)
CP = 87   Type = slit	Data = '='	Pos = (39, 30)
CP = 88   Type = id	Data = initializer	Pos = (43, 30)
CP = 89   Type = brac	Data = ]	Pos = (54, 30)
CP = 90   Type = sig	Data = ;	Pos = (56, 30)
CP = 91   Type = id	Data = initializer	Pos = (0, 32)
CP = 92   Type = sig	Data = ::=	Pos = (12, 32)
CP = 93   Type = id	Data = assignment_expression	Pos = (16, 32)
CP = 94   Type = sig	Data = |	Pos = (14, 33)
CP = 95   Type = slit	Data = '{'	Pos = (16, 33)
CP = 96   Type = id	Data = initializer_list	Pos = (20, 33)
CP = 97   Type = brac	Data = [	Pos = (37, 33)
CP = 98   Type = slit	Data = ','	Pos = (38, 33)
CP = 99   Type = brac	Data = ]	Pos = (41, 33)
CP = 100  Type = slit	Data = '}'	Pos = (43, 33)
CP = 101  Type = sig	Data = ;	Pos = (14, 34)
CP = 102  Type = id	Data = initializer_list	Pos = (0, 36)
CP = 103  Type = sig	Data = ::=	Pos = (17, 36)
CP = 104  Type = id	Data = initializer	Pos = (21, 36)
CP = 105  Type = brac	Data = {	Pos = (33, 36)
CP = 106  Type = slit	Data = ','	Pos = (34, 36)
CP = 107  Type = id	Data = initializer	Pos = (38, 36)
CP = 108  Type = brac	Data = }	Pos = (49, 36)
CP = 109  Type = sig	Data = ;	Pos = (51, 36)
CP = 110  Type = id	Data = statement	Pos = (0, 38)
CP = 111  Type = sig	Data = ::=	Pos = (10, 38)
CP = 112  Type = id	Data = compound_statement	Pos = (14, 38)
CP = 113  Type = sig	Data = |	Pos = (12, 39)
CP = 114  Type = id	Data = expression_statement	Pos = (14, 39)
CP = 115  Type = sig	Data = |	Pos = (12, 40)
CP = 116  Type = id	Data = selection_statement	Pos = (14, 40)
CP = 117  Type = sig	Data = |	Pos = (12, 41)
CP = 118  Type = id	Data = iteration_statement	Pos = (14, 41)
CP = 119  Type = sig	Data = |	Pos = (12, 42)
CP = 120  Type = id	Data = return_statement	Pos = (14, 42)
CP = 121  Type = sig	Data = ;	Pos = (12, 43)
CP = 122  Type = id	Data = expression_statement	Pos = (0, 45)
CP = 123  Type = sig	Data = ::=	Pos = (21, 45)
CP = 124  Type = slit	Data = ';'	Pos = (25, 45)
CP = 125  Type = sig	Data = |	Pos = (23, 46)
CP = 126  Type = id	Data = expression	Pos = (25, 46)
CP = 127  Type = slit	Data = ';'	Pos = (36, 46)
CP = 128  Type = sig	Data = ;	Pos = (23, 47)
CP = 129  Type = id	Data = selection_statement	Pos = (0, 49)
CP = 130  Type = sig	Data = ::=	Pos = (20, 49)
CP = 131  Type = slit	Data = 'if'	Pos = (24, 49)
CP = 132  Type = slit	Data = '('	Pos = (29, 49)
CP = 133  Type = id	Data = expression	Pos = (33, 49)
CP = 134  Type = slit	Data = ')'	Pos = (44, 49)
CP = 135  Type = id	Data = statement	Pos = (48, 49)
CP = 136  Type = brac	Data = [	Pos = (58, 49)
CP = 137  Type = slit	Data = 'else'	Pos = (59, 49)
CP = 138  Type = id	Data = statement	Pos = (66, 49)
CP = 139  Type = brac	Data = ]	Pos = (75, 49)
CP = 140  Type = sig	Data = ;	Pos = (77, 49)
CP = 141  Type = id	Data = iteration_statement	Pos = (0, 51)
CP = 142  Type = sig	Data = ::=	Pos = (20, 51)
CP = 143  Type = slit	Data = 'for'	Pos = (24, 51)
CP = 144  Type = slit	Data = '('	Pos = (30, 51)
CP = 145  Type = brac	Data = [	Pos = (34, 51)
CP = 146  Type = brac	Data = [	Pos = (35, 51)
CP = 147  Type = id	Data = type_specifier	Pos = (36, 51)
CP = 148  Type = brac	Data = ]	Pos = (50, 51)
CP = 149  Type = id	Data = init_declarator	Pos = (52, 51)
CP = 150  Type = brac	Data = ]	Pos = (67, 51)
CP = 151  Type = slit	Data = ';'	Pos = (69, 51)
CP = 152  Type = brac	Data = [	Pos = (73, 51)
CP = 153  Type = id	Data = expression	Pos = (74, 51)
CP = 154  Type = brac	Data = ]	Pos = (84, 51)
CP = 155  Type = slit	Data = ';'	Pos = (86, 51)
CP = 156  Type = brac	Data = [	Pos = (90, 51)
CP = 157  Type = id	Data = expression	Pos = (91, 51)
CP = 158  Type = brac	Data = ]	Pos = (101, 51)
CP = 159  Type = slit	Data = ')'	Pos = (103, 51)
CP = 160  Type = id	Data = statement	Pos = (107, 51)
CP = 161  Type = sig	Data = ;	Pos = (117, 51)
CP = 162  Type = id	Data = return_statement	Pos = (0, 53)
CP = 163  Type = sig	Data = ::=	Pos = (17, 53)
CP = 164  Type = slit	Data = 'return'	Pos = (21, 53)
CP = 165  Type = id	Data = expression_statement	Pos = (30, 53)
CP = 166  Type = sig	Data = ;	Pos = (51, 53)
CP = 167  Type = id	Data = expression	Pos = (0, 55)
CP = 168  Type = sig	Data = ::=	Pos = (11, 55)
CP = 169  Type = id	Data = assignment_expression	Pos = (15, 55)
CP = 170  Type = brac	Data = {	Pos = (37, 55)
CP = 171  Type = slit	Data = ','	Pos = (38, 55)
CP = 172  Type = id	Data = assignment_expression	Pos = (42, 55)
CP = 173  Type = brac	Data = }	Pos = (63, 55)
CP = 174  Type = sig	Data = ;	Pos = (65, 55)
CP = 175  Type = id	Data = assignment_expression	Pos = (0, 57)
CP = 176  Type = sig	Data = ::=	Pos = (22, 57)
CP = 177  Type = id	Data = equality_expression	Pos = (25, 57)
CP = 178  Type = brac	Data = [	Pos = (45, 57)
CP = 179  Type = id	Data = assign_op	Pos = (46, 57)
CP = 180  Type = id	Data = assignment_expression	Pos = (56, 57)
CP = 181  Type = brac	Data = ]	Pos = (78, 57)
CP = 182  Type = sig	Data = ;	Pos = (81, 57)
CP = 183  Type = id	Data = assign_op	Pos = (0, 59)
CP = 184  Type = sig	Data = ::=	Pos = (10, 59)
CP = 185  Type = slit	Data = '='	Pos = (14, 59)
CP = 186  Type = sig	Data = |	Pos = (12, 60)
CP = 187  Type = slit	Data = '+='	Pos = (14, 60)
CP = 188  Type = sig	Data = |	Pos = (12, 61)
CP = 189  Type = slit	Data = '-='	Pos = (14, 61)
CP = 190  Type = sig	Data = |	Pos = (12, 62)
CP = 191  Type = slit	Data = '*='	Pos = (14, 62)
CP = 192  Type = sig	Data = |	Pos = (12, 63)
CP = 193  Type = slit	Data = '/='	Pos = (14, 63)
CP = 194  Type = sig	Data = ;	Pos = (12, 64)
CP = 195  Type = id	Data = equality_expression	Pos = (0, 66)
CP = 196  Type = sig	Data = ::=	Pos = (20, 66)
CP = 197  Type = id	Data = relat_expression	Pos = (23, 66)
CP = 198  Type = brac	Data = [	Pos = (40, 66)
CP = 199  Type = id	Data = equal_op	Pos = (41, 66)
CP = 200  Type = id	Data = equality_expression	Pos = (50, 66)
CP = 201  Type = brac	Data = ]	Pos = (70, 66)
CP = 202  Type = sig	Data = ;	Pos = (73, 66)
CP = 203  Type = id	Data = equal_op	Pos = (0, 68)
CP = 204  Type = sig	Data = ::=	Pos = (9, 68)
CP = 205  Type = slit	Data = '=='	Pos = (13, 68)
CP = 206  Type = sig	Data = |	Pos = (11, 69)
CP = 207  Type = slit	Data = '!='	Pos = (13, 69)
CP = 208  Type = sig	Data = ;	Pos = (11, 70)
CP = 209  Type = id	Data = relat_expression	Pos = (0, 72)
CP = 210  Type = sig	Data = ::=	Pos = (17, 72)
CP = 211  Type = id	Data = additive_expression	Pos = (20, 72)
CP = 212  Type = brac	Data = [	Pos = (41, 72)
CP = 213  Type = id	Data = relat_op	Pos = (42, 72)
CP = 214  Type = id	Data = relat_expression	Pos = (51, 72)
CP = 215  Type = brac	Data = ]	Pos = (68, 72)
CP = 216  Type = sig	Data = ;	Pos = (70, 72)
CP = 217  Type = id	Data = relat_op	Pos = (0, 74)
CP = 218  Type = sig	Data = ::=	Pos = (9, 74)
CP = 219  Type = slit	Data = '>'	Pos = (13, 74)
CP = 220  Type = sig	Data = |	Pos = (11, 75)
CP = 221  Type = slit	Data = '<'	Pos = (13, 75)
CP = 222  Type = sig	Data = |	Pos = (11, 76)
CP = 223  Type = slit	Data = '>='	Pos = (13, 76)
CP = 224  Type = sig	Data = |	Pos = (11, 77)
CP = 225  Type = slit	Data = '<='	Pos = (13, 77)
CP = 226  Type = sig	Data = ;	Pos = (11, 78)
CP = 227  Type = id	Data = additive_expression	Pos = (0, 80)
CP = 228  Type = sig	Data = ::=	Pos = (20, 80)
CP = 229  Type = id	Data = multiplicative_expression	Pos = (24, 80)
CP = 230  Type = brac	Data = [	Pos = (50, 80)
CP = 231  Type = id	Data = add_op	Pos = (51, 80)
CP = 232  Type = id	Data = additive_expression	Pos = (58, 80)
CP = 233  Type = brac	Data = ]	Pos = (79, 80)
CP = 234  Type = sig	Data = ;	Pos = (82, 80)
CP = 235  Type = id	Data = add_op	Pos = (0, 82)
CP = 236  Type = sig	Data = ::=	Pos = (7, 82)
CP = 237  Type = slit	Data = '+'	Pos = (11, 82)
CP = 238  Type = sig	Data = |	Pos = (9, 83)
CP = 239  Type = slit	Data = '-'	Pos = (11, 83)
CP = 240  Type = sig	Data = ;	Pos = (9, 84)
CP = 241  Type = id	Data = multiplicative_expression	Pos = (0, 86)
CP = 242  Type = sig	Data = ::=	Pos = (26, 86)
CP = 243  Type = id	Data = unary_expression	Pos = (31, 86)
CP = 244  Type = brac	Data = [	Pos = (48, 86)
CP = 245  Type = id	Data = mul_op	Pos = (50, 86)
CP = 246  Type = id	Data = multiplicative_expression	Pos = (57, 86)
CP = 247  Type = brac	Data = ]	Pos = (82, 86)
CP = 248  Type = sig	Data = ;	Pos = (84, 86)
CP = 249  Type = id	Data = mul_op	Pos = (0, 88)
CP = 250  Type = sig	Data = ::=	Pos = (7, 88)
CP = 251  Type = slit	Data = '*'	Pos = (11, 88)
CP = 252  Type = sig	Data = |	Pos = (9, 89)
CP = 253  Type = slit	Data = '/'	Pos = (11, 89)
CP = 254  Type = sig	Data = ;	Pos = (9, 90)
CP = 255  Type = id	Data = unary_expression	Pos = (0, 92)
CP = 256  Type = sig	Data = ::=	Pos = (17, 92)
CP = 257  Type = id	Data = sadd_op	Pos = (21, 92)
CP = 258  Type = id	Data = unary_expression	Pos = (29, 92)
CP = 259  Type = sig	Data = |	Pos = (19, 93)
CP = 260  Type = id	Data = postfix_expression	Pos = (21, 93)
CP = 261  Type = sig	Data = ;	Pos = (19, 94)
CP = 262  Type = id	Data = sadd_op	Pos = (0, 96)
CP = 263  Type = sig	Data = ::=	Pos = (8, 96)
CP = 264  Type = slit	Data = '++'	Pos = (12, 96)
CP = 265  Type = sig	Data = |	Pos = (10, 97)
CP = 266  Type = slit	Data = '--'	Pos = (12, 97)
CP = 267  Type = sig	Data = |	Pos = (10, 98)
CP = 268  Type = slit	Data = '-'	Pos = (12, 98)
CP = 269  Type = sig	Data = ;	Pos = (10, 99)
CP = 270  Type = id	Data = postfix_expression	Pos = (0, 101)
CP = 271  Type = sig	Data = ::=	Pos = (19, 101)
CP = 272  Type = id	Data = primary_expression	Pos = (23, 101)
CP = 273  Type = sig	Data = |	Pos = (21, 102)
CP = 274  Type = id	Data = postfix_expression	Pos = (23, 102)
CP = 275  Type = slit	Data = '['	Pos = (42, 102)
CP = 276  Type = id	Data = expression	Pos = (46, 102)
CP = 277  Type = slit	Data = ']'	Pos = (57, 102)
CP = 278  Type = sig	Data = |	Pos = (21, 103)
CP = 279  Type = id	Data = postfix_expression	Pos = (23, 103)
CP = 280  Type = slit	Data = '('	Pos = (42, 103)
CP = 281  Type = slit	Data = ')'	Pos = (46, 103)
CP = 282  Type = sig	Data = |	Pos = (21, 104)
CP = 283  Type = id	Data = postfix_expression	Pos = (23, 104)
CP = 284  Type = slit	Data = '('	Pos = (42, 104)
CP = 285  Type = id	Data = assignment_expression	Pos = (46, 104)
CP = 286  Type = brac	Data = {	Pos = (68, 104)
CP = 287  Type = slit	Data = ','	Pos = (69, 104)
CP = 288  Type = id	Data = assignment_expression	Pos = (73, 104)
CP = 289  Type = brac	Data = }	Pos = (94, 104)
CP = 290  Type = slit	Data = ')'	Pos = (96, 104)
CP = 291  Type = sig	Data = |	Pos = (21, 105)
CP = 292  Type = id	Data = postfix_expression	Pos = (23, 105)
CP = 293  Type = slit	Data = '.'	Pos = (42, 105)
CP = 294  Type = token	Data = ID	Pos = (46, 105)
CP = 295  Type = sig	Data = |	Pos = (21, 106)
CP = 296  Type = id	Data = postfix_expression	Pos = (23, 106)
CP = 297  Type = id	Data = post_op	Pos = (42, 106)
CP = 298  Type = sig	Data = ;	Pos = (21, 107)
CP = 299  Type = id	Data = post_op	Pos = (0, 109)
CP = 300  Type = sig	Data = ::=	Pos = (8, 109)
CP = 301  Type = slit	Data = '++'	Pos = (12, 109)
CP = 302  Type = sig	Data = |	Pos = (10, 110)
CP = 303  Type = slit	Data = '--'	Pos = (12, 110)
CP = 304  Type = sig	Data = ;	Pos = (10, 111)
CP = 305  Type = id	Data = primary_expression	Pos = (0, 113)
CP = 306  Type = sig	Data = ::=	Pos = (19, 113)
CP = 307  Type = token	Data = ID	Pos = (23, 113)
CP = 308  Type = sig	Data = |	Pos = (21, 114)
CP = 309  Type = token	Data = NUMBER	Pos = (23, 114)
CP = 310  Type = sig	Data = |	Pos = (21, 115)
CP = 311  Type = slit	Data = '('	Pos = (23, 115)
CP = 312  Type = id	Data = expression	Pos = (27, 115)
CP = 313  Type = slit	Data = ')'	Pos = (38, 115)
CP = 314  Type = sig	Data = ;	Pos = (21, 116)
CP = 315  Type = id	Data = struct_specifier	Pos = (0, 118)
CP = 316  Type = sig	Data = ::=	Pos = (17, 118)
CP = 317  Type = slit	Data = 'struct'	Pos = (21, 118)
CP = 318  Type = token	Data = ID	Pos = (30, 118)
CP = 319  Type = slit	Data = '{'	Pos = (33, 118)
CP = 320  Type = brac	Data = {	Pos = (37, 118)
CP = 321  Type = id	Data = declaration	Pos = (38, 118)
CP = 322  Type = brac	Data = }	Pos = (49, 118)
CP = 323  Type = slit	Data = '}'	Pos = (51, 118)
CP = 324  Type = brac	Data = [	Pos = (55, 118)
CP = 325  Type = token	Data = ID	Pos = (56, 118)
CP = 326  Type = brac	Data = ]	Pos = (58, 118)
CP = 327  Type = slit	Data = ';'	Pos = (60, 118)
CP = 328  Type = sig	Data = ;	Pos = (64, 118)
###########################
Begin Syntactic Analysis...
###########################
SS = 3	CP = 0	Deduce statement
SS = 4	CP = 0	  Deduce non_terminal_symbol
SS = 4	CP = 0	    Match  id
SS = 4	CP = 0	    Accept id
SS = 4	CP = 1	  Accept non_terminal_symbol
SS = 4	CP = 1	  Deduce assign_op
SS = 5	CP = 1	    Match  ::=
SS = 5	CP = 1	    Accept ::=
SS = 4	CP = 2	  Accept assign_op
SS = 4	CP = 2	  Deduce declaration
SS = 5	CP = 2	    Deduce term
SS = 6	CP = 2	      Deduce part
SS = 8	CP = 2	        Deduce repeat_part
SS = 8	CP = 2	          Match  {
SS = 8	CP = 2	          Accept {
SS = 9	CP = 3	          Deduce declaration
SS = 10	CP = 3	            Deduce term
SS = 11	CP = 3	              Deduce part
SS = 11	CP = 3	                Predict Failed in CONDITION
SS = 11	CP = 3	                Predict Failed in CONDITION
SS = 11	CP = 3	                Predict Failed in CONDITION
SS = 13	CP = 3	                Deduce simple_part
SS = 15	CP = 3	                  Deduce right_non_terminal_symbol
SS = 16	CP = 3	                    Deduce non_terminal_symbol
SS = 16	CP = 3	                      Match  id
SS = 16	CP = 3	                      Accept id
SS = 16	CP = 4	                    Accept non_terminal_symbol
SS = 15	CP = 4	                  Accept right_non_terminal_symbol
SS = 13	CP = 4	                Accept simple_part
SS = 11	CP = 4	              Accept part
SS = 12	CP = 4	              Match  ,
SS = 12	CP = 4	              Reject ,
SS = 11	CP = 4	              Predict Failed: part
SS = 10	CP = 4	            Accept term
SS = 10	CP = 4	            Match  |
SS = 10	CP = 4	            Reject |
SS = 9	CP = 4	          Accept declaration
SS = 8	CP = 4	          Match  }
SS = 8	CP = 4	          Accept }
SS = 8	CP = 5	        Accept repeat_part
SS = 6	CP = 5	      Accept part
SS = 7	CP = 5	      Match  ,
SS = 7	CP = 5	      Reject ,
SS = 6	CP = 5	      Predict Failed: part
SS = 5	CP = 5	    Accept term
SS = 5	CP = 5	    Match  |
SS = 5	CP = 5	    Reject |
SS = 4	CP = 5	  Accept declaration
SS = 4	CP = 5	  Deduce end_op
SS = 5	CP = 5	    Match  ;
SS = 5	CP = 5	    Accept ;
SS = 4	CP = 6	  Accept end_op
SS = 3	CP = 6	Accept statement
SS = 3	CP = 6	Deduce statement
SS = 4	CP = 6	  Deduce non_terminal_symbol
SS = 4	CP = 6	    Match  id
SS = 4	CP = 6	    Accept id
SS = 4	CP = 7	  Accept non_terminal_symbol
SS = 4	CP = 7	  Deduce assign_op
SS = 5	CP = 7	    Match  ::=
SS = 5	CP = 7	    Accept ::=
SS = 4	CP = 8	  Accept assign_op
SS = 4	CP = 8	  Deduce declaration
SS = 5	CP = 8	    Deduce term
SS = 6	CP = 8	      Deduce part
SS = 6	CP = 8	        Predict Failed in CONDITION
SS = 6	CP = 8	        Predict Failed in CONDITION
SS = 6	CP = 8	        Predict Failed in CONDITION
SS = 8	CP = 8	        Deduce simple_part
SS = 10	CP = 8	          Deduce right_non_terminal_symbol
SS = 11	CP = 8	            Deduce non_terminal_symbol
SS = 11	CP = 8	              Match  id
SS = 11	CP = 8	              Accept id
SS = 11	CP = 9	            Accept non_terminal_symbol
SS = 10	CP = 9	          Accept right_non_terminal_symbol
SS = 8	CP = 9	        Accept simple_part
SS = 6	CP = 9	      Accept part
SS = 7	CP = 9	      Match  ,
SS = 7	CP = 9	      Reject ,
SS = 6	CP = 9	      Predict Failed: part
SS = 5	CP = 9	    Accept term
SS = 5	CP = 9	    Match  |
SS = 5	CP = 9	    Accept |
SS = 6	CP = 10	    Deduce term
SS = 7	CP = 10	      Deduce part
SS = 7	CP = 10	        Predict Failed in CONDITION
SS = 7	CP = 10	        Predict Failed in CONDITION
SS = 7	CP = 10	        Predict Failed in CONDITION
SS = 9	CP = 10	        Deduce simple_part
SS = 11	CP = 10	          Deduce right_non_terminal_symbol
SS = 12	CP = 10	            Deduce non_terminal_symbol
SS = 12	CP = 10	              Match  id
SS = 12	CP = 10	              Accept id
SS = 12	CP = 11	            Accept non_terminal_symbol
SS = 11	CP = 11	          Accept right_non_terminal_symbol
SS = 9	CP = 11	        Accept simple_part
SS = 7	CP = 11	      Accept part
SS = 8	CP = 11	      Match  ,
SS = 8	CP = 11	      Reject ,
SS = 7	CP = 11	      Predict Failed: part
SS = 6	CP = 11	    Accept term
SS = 5	CP = 11	    Match  |
SS = 5	CP = 11	    Accept |
SS = 6	CP = 12	    Deduce term
SS = 7	CP = 12	      Deduce part
SS = 7	CP = 12	        Predict Failed in CONDITION
SS = 7	CP = 12	        Predict Failed in CONDITION
SS = 7	CP = 12	        Predict Failed in CONDITION
SS = 9	CP = 12	        Deduce simple_part
SS = 11	CP = 12	          Deduce right_non_terminal_symbol
SS = 12	CP = 12	            Deduce non_terminal_symbol
SS = 12	CP = 12	              Match  id
SS = 12	CP = 12	              Accept id
SS = 12	CP = 13	            Accept non_terminal_symbol
SS = 11	CP = 13	          Accept right_non_terminal_symbol
SS = 9	CP = 13	        Accept simple_part
SS = 7	CP = 13	      Accept part
SS = 8	CP = 13	      Match  ,
SS = 8	CP = 13	      Reject ,
SS = 7	CP = 13	      Predict Failed: part
SS = 6	CP = 13	    Accept term
SS = 5	CP = 13	    Match  |
SS = 5	CP = 13	    Reject |
SS = 4	CP = 13	  Accept declaration
SS = 4	CP = 13	  Deduce end_op
SS = 5	CP = 13	    Match  ;
SS = 5	CP = 13	    Accept ;
SS = 4	CP = 14	  Accept end_op
SS = 3	CP = 14	Accept statement
SS = 3	CP = 14	Deduce statement
SS = 4	CP = 14	  Deduce non_terminal_symbol
SS = 4	CP = 14	    Match  id
SS = 4	CP = 14	    Accept id
SS = 4	CP = 15	  Accept non_terminal_symbol
SS = 4	CP = 15	  Deduce assign_op
SS = 5	CP = 15	    Match  ::=
SS = 5	CP = 15	    Accept ::=
SS = 4	CP = 16	  Accept assign_op
SS = 4	CP = 16	  Deduce declaration
SS = 5	CP = 16	    Deduce term
SS = 6	CP = 16	      Deduce part
SS = 6	CP = 16	        Predict Failed in CONDITION
SS = 6	CP = 16	        Predict Failed in CONDITION
SS = 6	CP = 16	        Predict Failed in CONDITION
SS = 8	CP = 16	        Deduce simple_part
SS = 10	CP = 16	          Deduce right_non_terminal_symbol
SS = 11	CP = 16	            Deduce non_terminal_symbol
SS = 11	CP = 16	              Match  id
SS = 11	CP = 16	              Accept id
SS = 11	CP = 17	            Accept non_terminal_symbol
SS = 10	CP = 17	          Accept right_non_terminal_symbol
SS = 8	CP = 17	        Accept simple_part
SS = 6	CP = 17	      Accept part
SS = 7	CP = 17	      Match  ,
SS = 7	CP = 17	      Reject ,
SS = 7	CP = 17	      Deduce part
SS = 7	CP = 17	        Predict Failed in CONDITION
SS = 7	CP = 17	        Predict Failed in CONDITION
SS = 7	CP = 17	        Predict Failed in CONDITION
SS = 9	CP = 17	        Deduce simple_part
SS = 11	CP = 17	          Deduce right_non_terminal_symbol
SS = 12	CP = 17	            Deduce non_terminal_symbol
SS = 12	CP = 17	              Match  id
SS = 12	CP = 17	              Accept id
SS = 12	CP = 18	            Accept non_terminal_symbol
SS = 11	CP = 18	          Accept right_non_terminal_symbol
SS = 9	CP = 18	        Accept simple_part
SS = 7	CP = 18	      Accept part
SS = 7	CP = 18	      Match  ,
SS = 7	CP = 18	      Reject ,
SS = 7	CP = 18	      Deduce part
SS = 7	CP = 18	        Predict Failed in CONDITION
SS = 7	CP = 18	        Predict Failed in CONDITION
SS = 7	CP = 18	        Predict Failed in CONDITION
SS = 9	CP = 18	        Deduce simple_part
SS = 11	CP = 18	          Deduce right_non_terminal_symbol
SS = 12	CP = 18	            Deduce non_terminal_symbol
SS = 12	CP = 18	              Match  id
SS = 12	CP = 18	              Accept id
SS = 12	CP = 19	            Accept non_terminal_symbol
SS = 11	CP = 19	          Accept right_non_terminal_symbol
SS = 9	CP = 19	        Accept simple_part
SS = 7	CP = 19	      Accept part
SS = 7	CP = 19	      Match  ,
SS = 7	CP = 19	      Reject ,
SS = 6	CP = 19	      Predict Failed: part
SS = 5	CP = 19	    Accept term
SS = 5	CP = 19	    Match  |
SS = 5	CP = 19	    Reject |
SS = 4	CP = 19	  Accept declaration
SS = 4	CP = 19	  Deduce end_op
SS = 5	CP = 19	    Match  ;
SS = 5	CP = 19	    Accept ;
SS = 4	CP = 20	  Accept end_op
SS = 3	CP = 20	Accept statement
SS = 3	CP = 20	Deduce statement
SS = 4	CP = 20	  Deduce non_terminal_symbol
SS = 4	CP = 20	    Match  id
SS = 4	CP = 20	    Accept id
SS = 4	CP = 21	  Accept non_terminal_symbol
SS = 4	CP = 21	  Deduce assign_op
SS = 5	CP = 21	    Match  ::=
SS = 5	CP = 21	    Accept ::=
SS = 4	CP = 22	  Accept assign_op
SS = 4	CP = 22	  Deduce declaration
SS = 5	CP = 22	    Deduce term
SS = 6	CP = 22	      Deduce part
SS = 6	CP = 22	        Predict Failed in CONDITION
SS = 6	CP = 22	        Predict Failed in CONDITION
SS = 6	CP = 22	        Predict Failed in CONDITION
SS = 8	CP = 22	        Deduce simple_part
SS = 8	CP = 22	          Predict Failed in CONDITION
SS = 10	CP = 22	          Deduce terminal_symbol
SS = 10	CP = 22	            Predict Failed in CONDITION
SS = 10	CP = 22	            Predict Failed in CONDITION
SS = 11	CP = 22	            Match  token
SS = 11	CP = 22	            Accept token
SS = 10	CP = 23	          Accept terminal_symbol
SS = 8	CP = 23	        Accept simple_part
SS = 6	CP = 23	      Accept part
SS = 7	CP = 23	      Match  ,
SS = 7	CP = 23	      Reject ,
SS = 6	CP = 23	      Predict Failed: part
SS = 5	CP = 23	    Accept term
SS = 5	CP = 23	    Match  |
SS = 5	CP = 23	    Reject |
SS = 4	CP = 23	  Accept declaration
SS = 4	CP = 23	  Deduce end_op
SS = 5	CP = 23	    Match  ;
SS = 5	CP = 23	    Accept ;
SS = 4	CP = 24	  Accept end_op
SS = 3	CP = 24	Accept statement
SS = 3	CP = 24	Deduce statement
SS = 4	CP = 24	  Deduce non_terminal_symbol
SS = 4	CP = 24	    Match  id
SS = 4	CP = 24	    Accept id
SS = 4	CP = 25	  Accept non_terminal_symbol
SS = 4	CP = 25	  Deduce assign_op
SS = 5	CP = 25	    Match  ::=
SS = 5	CP = 25	    Accept ::=
SS = 4	CP = 26	  Accept assign_op
SS = 4	CP = 26	  Deduce declaration
SS = 5	CP = 26	    Deduce term
SS = 6	CP = 26	      Deduce part
SS = 6	CP = 26	        Predict Failed in CONDITION
SS = 6	CP = 26	        Predict Failed in CONDITION
SS = 6	CP = 26	        Predict Failed in CONDITION
SS = 8	CP = 26	        Deduce simple_part
SS = 8	CP = 26	          Predict Failed in CONDITION
SS = 10	CP = 26	          Deduce terminal_symbol
SS = 10	CP = 26	            Predict Failed in CONDITION
SS = 10	CP = 26	            Predict Failed in CONDITION
SS = 11	CP = 26	            Match  token
SS = 11	CP = 26	            Accept token
SS = 10	CP = 27	          Accept terminal_symbol
SS = 8	CP = 27	        Accept simple_part
SS = 6	CP = 27	      Accept part
SS = 7	CP = 27	      Match  ,
SS = 7	CP = 27	      Reject ,
SS = 6	CP = 27	      Predict Failed: part
SS = 5	CP = 27	    Accept term
SS = 5	CP = 27	    Match  |
SS = 5	CP = 27	    Accept |
SS = 6	CP = 28	    Deduce term
SS = 7	CP = 28	      Deduce part
SS = 7	CP = 28	        Predict Failed in CONDITION
SS = 7	CP = 28	        Predict Failed in CONDITION
SS = 7	CP = 28	        Predict Failed in CONDITION
SS = 9	CP = 28	        Deduce simple_part
SS = 11	CP = 28	          Deduce right_non_terminal_symbol
SS = 12	CP = 28	            Deduce non_terminal_symbol
SS = 12	CP = 28	              Match  id
SS = 12	CP = 28	              Accept id
SS = 12	CP = 29	            Accept non_terminal_symbol
SS = 11	CP = 29	          Accept right_non_terminal_symbol
SS = 9	CP = 29	        Accept simple_part
SS = 7	CP = 29	      Accept part
SS = 8	CP = 29	      Match  ,
SS = 8	CP = 29	      Reject ,
SS = 8	CP = 29	      Deduce part
SS = 8	CP = 29	        Predict Failed in CONDITION
SS = 8	CP = 29	        Predict Failed in CONDITION
SS = 8	CP = 29	        Predict Failed in CONDITION
SS = 10	CP = 29	        Deduce simple_part
SS = 10	CP = 29	          Predict Failed in CONDITION
SS = 12	CP = 29	          Deduce terminal_symbol
SS = 13	CP = 29	            Match  slit
SS = 13	CP = 29	            Accept slit
SS = 12	CP = 30	          Accept terminal_symbol
SS = 10	CP = 30	        Accept simple_part
SS = 8	CP = 30	      Accept part
SS = 8	CP = 30	      Match  ,
SS = 8	CP = 30	      Reject ,
SS = 8	CP = 30	      Deduce part
SS = 8	CP = 30	        Predict Failed in CONDITION
SS = 8	CP = 30	        Predict Failed in CONDITION
SS = 8	CP = 30	        Predict Failed in CONDITION
SS = 10	CP = 30	        Deduce simple_part
SS = 10	CP = 30	          Predict Failed in CONDITION
SS = 12	CP = 30	          Deduce terminal_symbol
SS = 13	CP = 30	            Match  slit
SS = 13	CP = 30	            Accept slit
SS = 12	CP = 31	          Accept terminal_symbol
SS = 10	CP = 31	        Accept simple_part
SS = 8	CP = 31	      Accept part
SS = 8	CP = 31	      Match  ,
SS = 8	CP = 31	      Reject ,
SS = 7	CP = 31	      Predict Failed: part
SS = 6	CP = 31	    Accept term
SS = 5	CP = 31	    Match  |
SS = 5	CP = 31	    Accept |
SS = 6	CP = 32	    Deduce term
SS = 7	CP = 32	      Deduce part
SS = 7	CP = 32	        Predict Failed in CONDITION
SS = 7	CP = 32	        Predict Failed in CONDITION
SS = 7	CP = 32	        Predict Failed in CONDITION
SS = 9	CP = 32	        Deduce simple_part
SS = 11	CP = 32	          Deduce right_non_terminal_symbol
SS = 12	CP = 32	            Deduce non_terminal_symbol
SS = 12	CP = 32	              Match  id
SS = 12	CP = 32	              Accept id
SS = 12	CP = 33	            Accept non_terminal_symbol
SS = 11	CP = 33	          Accept right_non_terminal_symbol
SS = 9	CP = 33	        Accept simple_part
SS = 7	CP = 33	      Accept part
SS = 8	CP = 33	      Match  ,
SS = 8	CP = 33	      Reject ,
SS = 8	CP = 33	      Deduce part
SS = 8	CP = 33	        Predict Failed in CONDITION
SS = 8	CP = 33	        Predict Failed in CONDITION
SS = 8	CP = 33	        Predict Failed in CONDITION
SS = 10	CP = 33	        Deduce simple_part
SS = 10	CP = 33	          Predict Failed in CONDITION
SS = 12	CP = 33	          Deduce terminal_symbol
SS = 13	CP = 33	            Match  slit
SS = 13	CP = 33	            Accept slit
SS = 12	CP = 34	          Accept terminal_symbol
SS = 10	CP = 34	        Accept simple_part
SS = 8	CP = 34	      Accept part
SS = 8	CP = 34	      Match  ,
SS = 8	CP = 34	      Reject ,
SS = 8	CP = 34	      Deduce part
SS = 8	CP = 34	        Predict Failed in CONDITION
SS = 8	CP = 34	        Predict Failed in CONDITION
SS = 8	CP = 34	        Predict Failed in CONDITION
SS = 10	CP = 34	        Deduce simple_part
SS = 12	CP = 34	          Deduce right_non_terminal_symbol
SS = 13	CP = 34	            Deduce non_terminal_symbol
SS = 13	CP = 34	              Match  id
SS = 13	CP = 34	              Accept id
SS = 13	CP = 35	            Accept non_terminal_symbol
SS = 12	CP = 35	          Accept right_non_terminal_symbol
SS = 10	CP = 35	        Accept simple_part
SS = 8	CP = 35	      Accept part
SS = 8	CP = 35	      Match  ,
SS = 8	CP = 35	      Reject ,
SS = 8	CP = 35	      Deduce part
SS = 8	CP = 35	        Predict Failed in CONDITION
SS = 8	CP = 35	        Predict Failed in CONDITION
SS = 8	CP = 35	        Predict Failed in CONDITION
SS = 10	CP = 35	        Deduce simple_part
SS = 10	CP = 35	          Predict Failed in CONDITION
SS = 12	CP = 35	          Deduce terminal_symbol
SS = 13	CP = 35	            Match  slit
SS = 13	CP = 35	            Accept slit
SS = 12	CP = 36	          Accept terminal_symbol
SS = 10	CP = 36	        Accept simple_part
SS = 8	CP = 36	      Accept part
SS = 8	CP = 36	      Match  ,
SS = 8	CP = 36	      Reject ,
SS = 7	CP = 36	      Predict Failed: part
SS = 6	CP = 36	    Accept term
SS = 5	CP = 36	    Match  |
SS = 5	CP = 36	    Accept |
SS = 6	CP = 37	    Deduce term
SS = 7	CP = 37	      Deduce part
SS = 7	CP = 37	        Predict Failed in CONDITION
SS = 7	CP = 37	        Predict Failed in CONDITION
SS = 7	CP = 37	        Predict Failed in CONDITION
SS = 9	CP = 37	        Deduce simple_part
SS = 9	CP = 37	          Predict Failed in CONDITION
SS = 11	CP = 37	          Deduce terminal_symbol
SS = 11	CP = 37	            Predict Failed in CONDITION
SS = 11	CP = 37	            Predict Failed in CONDITION
SS = 12	CP = 37	            Match  token
SS = 12	CP = 37	            Accept token
SS = 11	CP = 38	          Accept terminal_symbol
SS = 9	CP = 38	        Accept simple_part
SS = 7	CP = 38	      Accept part
SS = 8	CP = 38	      Match  ,
SS = 8	CP = 38	      Reject ,
SS = 8	CP = 38	      Deduce part
SS = 8	CP = 38	        Predict Failed in CONDITION
SS = 8	CP = 38	        Predict Failed in CONDITION
SS = 8	CP = 38	        Predict Failed in CONDITION
SS = 10	CP = 38	        Deduce simple_part
SS = 10	CP = 38	          Predict Failed in CONDITION
SS = 12	CP = 38	          Deduce terminal_symbol
SS = 13	CP = 38	            Match  slit
SS = 13	CP = 38	            Accept slit
SS = 12	CP = 39	          Accept terminal_symbol
SS = 10	CP = 39	        Accept simple_part
SS = 8	CP = 39	      Accept part
SS = 8	CP = 39	      Match  ,
SS = 8	CP = 39	      Reject ,
SS = 8	CP = 39	      Deduce part
SS = 8	CP = 39	        Predict Failed in CONDITION
SS = 8	CP = 39	        Predict Failed in CONDITION
SS = 8	CP = 39	        Predict Failed in CONDITION
SS = 10	CP = 39	        Deduce simple_part
SS = 12	CP = 39	          Deduce right_non_terminal_symbol
SS = 13	CP = 39	            Deduce non_terminal_symbol
SS = 13	CP = 39	              Match  id
SS = 13	CP = 39	              Accept id
SS = 13	CP = 40	            Accept non_terminal_symbol
SS = 12	CP = 40	          Accept right_non_terminal_symbol
SS = 10	CP = 40	        Accept simple_part
SS = 8	CP = 40	      Accept part
SS = 8	CP = 40	      Match  ,
SS = 8	CP = 40	      Reject ,
SS = 8	CP = 40	      Deduce part
SS = 8	CP = 40	        Predict Failed in CONDITION
SS = 8	CP = 40	        Predict Failed in CONDITION
SS = 8	CP = 40	        Predict Failed in CONDITION
SS = 10	CP = 40	        Deduce simple_part
SS = 10	CP = 40	          Predict Failed in CONDITION
SS = 12	CP = 40	          Deduce terminal_symbol
SS = 13	CP = 40	            Match  slit
SS = 13	CP = 40	            Accept slit
SS = 12	CP = 41	          Accept terminal_symbol
SS = 10	CP = 41	        Accept simple_part
SS = 8	CP = 41	      Accept part
SS = 8	CP = 41	      Match  ,
SS = 8	CP = 41	      Reject ,
SS = 7	CP = 41	      Predict Failed: part
SS = 6	CP = 41	    Accept term
SS = 5	CP = 41	    Match  |
SS = 5	CP = 41	    Accept |
SS = 6	CP = 42	    Deduce term
SS = 7	CP = 42	      Deduce part
SS = 7	CP = 42	        Predict Failed in CONDITION
SS = 7	CP = 42	        Predict Failed in CONDITION
SS = 7	CP = 42	        Predict Failed in CONDITION
SS = 9	CP = 42	        Deduce simple_part
SS = 9	CP = 42	          Predict Failed in CONDITION
SS = 11	CP = 42	          Deduce terminal_symbol
SS = 11	CP = 42	            Predict Failed in CONDITION
SS = 11	CP = 42	            Predict Failed in CONDITION
SS = 12	CP = 42	            Match  token
SS = 12	CP = 42	            Accept token
SS = 11	CP = 43	          Accept terminal_symbol
SS = 9	CP = 43	        Accept simple_part
SS = 7	CP = 43	      Accept part
SS = 8	CP = 43	      Match  ,
SS = 8	CP = 43	      Reject ,
SS = 8	CP = 43	      Deduce part
SS = 8	CP = 43	        Predict Failed in CONDITION
SS = 8	CP = 43	        Predict Failed in CONDITION
SS = 8	CP = 43	        Predict Failed in CONDITION
SS = 10	CP = 43	        Deduce simple_part
SS = 10	CP = 43	          Predict Failed in CONDITION
SS = 12	CP = 43	          Deduce terminal_symbol
SS = 13	CP = 43	            Match  slit
SS = 13	CP = 43	            Accept slit
SS = 12	CP = 44	          Accept terminal_symbol
SS = 10	CP = 44	        Accept simple_part
SS = 8	CP = 44	      Accept part
SS = 8	CP = 44	      Match  ,
SS = 8	CP = 44	      Reject ,
SS = 8	CP = 44	      Deduce part
SS = 8	CP = 44	        Predict Failed in CONDITION
SS = 8	CP = 44	        Predict Failed in CONDITION
SS = 8	CP = 44	        Predict Failed in CONDITION
SS = 10	CP = 44	        Deduce simple_part
SS = 10	CP = 44	          Predict Failed in CONDITION
SS = 12	CP = 44	          Deduce terminal_symbol
SS = 13	CP = 44	            Match  slit
SS = 13	CP = 44	            Accept slit
SS = 12	CP = 45	          Accept terminal_symbol
SS = 10	CP = 45	        Accept simple_part
SS = 8	CP = 45	      Accept part
SS = 8	CP = 45	      Match  ,
SS = 8	CP = 45	      Reject ,
SS = 7	CP = 45	      Predict Failed: part
SS = 6	CP = 45	    Accept term
SS = 5	CP = 45	    Match  |
SS = 5	CP = 45	    Reject |
SS = 4	CP = 45	  Accept declaration
SS = 4	CP = 45	  Deduce end_op
SS = 5	CP = 45	    Match  ;
SS = 5	CP = 45	    Accept ;
SS = 4	CP = 46	  Accept end_op
SS = 3	CP = 46	Accept statement
SS = 3	CP = 46	Deduce statement
SS = 4	CP = 46	  Deduce non_terminal_symbol
SS = 4	CP = 46	    Match  id
SS = 4	CP = 46	    Accept id
SS = 4	CP = 47	  Accept non_terminal_symbol
SS = 4	CP = 47	  Deduce assign_op
SS = 5	CP = 47	    Match  ::=
SS = 5	CP = 47	    Accept ::=
SS = 4	CP = 48	  Accept assign_op
SS = 4	CP = 48	  Deduce declaration
SS = 5	CP = 48	    Deduce term
SS = 6	CP = 48	      Deduce part
SS = 6	CP = 48	        Predict Failed in CONDITION
SS = 6	CP = 48	        Predict Failed in CONDITION
SS = 6	CP = 48	        Predict Failed in CONDITION
SS = 8	CP = 48	        Deduce simple_part
SS = 10	CP = 48	          Deduce right_non_terminal_symbol
SS = 11	CP = 48	            Deduce non_terminal_symbol
SS = 11	CP = 48	              Match  id
SS = 11	CP = 48	              Accept id
SS = 11	CP = 49	            Accept non_terminal_symbol
SS = 10	CP = 49	          Accept right_non_terminal_symbol
SS = 8	CP = 49	        Accept simple_part
SS = 6	CP = 49	      Accept part
SS = 7	CP = 49	      Match  ,
SS = 7	CP = 49	      Reject ,
SS = 6	CP = 49	      Predict Failed: part
SS = 5	CP = 49	    Accept term
SS = 5	CP = 49	    Match  |
SS = 5	CP = 49	    Reject |
SS = 4	CP = 49	  Accept declaration
SS = 4	CP = 49	  Deduce end_op
SS = 5	CP = 49	    Match  ;
SS = 5	CP = 49	    Accept ;
SS = 4	CP = 50	  Accept end_op
SS = 3	CP = 50	Accept statement
SS = 3	CP = 50	Deduce statement
SS = 4	CP = 50	  Deduce non_terminal_symbol
SS = 4	CP = 50	    Match  id
SS = 4	CP = 50	    Accept id
SS = 4	CP = 51	  Accept non_terminal_symbol
SS = 4	CP = 51	  Deduce assign_op
SS = 5	CP = 51	    Match  ::=
SS = 5	CP = 51	    Accept ::=
SS = 4	CP = 52	  Accept assign_op
SS = 4	CP = 52	  Deduce declaration
SS = 5	CP = 52	    Deduce term
SS = 6	CP = 52	      Deduce part
SS = 6	CP = 52	        Predict Failed in CONDITION
SS = 6	CP = 52	        Predict Failed in CONDITION
SS = 6	CP = 52	        Predict Failed in CONDITION
SS = 8	CP = 52	        Deduce simple_part
SS = 10	CP = 52	          Deduce right_non_terminal_symbol
SS = 11	CP = 52	            Deduce non_terminal_symbol
SS = 11	CP = 52	              Match  id
SS = 11	CP = 52	              Accept id
SS = 11	CP = 53	            Accept non_terminal_symbol
SS = 10	CP = 53	          Accept right_non_terminal_symbol
SS = 8	CP = 53	        Accept simple_part
SS = 6	CP = 53	      Accept part
SS = 7	CP = 53	      Match  ,
SS = 7	CP = 53	      Reject ,
SS = 7	CP = 53	      Deduce part
SS = 9	CP = 53	        Deduce repeat_part
SS = 9	CP = 53	          Match  {
SS = 9	CP = 53	          Accept {
SS = 10	CP = 54	          Deduce declaration
SS = 11	CP = 54	            Deduce term
SS = 12	CP = 54	              Deduce part
SS = 12	CP = 54	                Predict Failed in CONDITION
SS = 12	CP = 54	                Predict Failed in CONDITION
SS = 12	CP = 54	                Predict Failed in CONDITION
SS = 14	CP = 54	                Deduce simple_part
SS = 14	CP = 54	                  Predict Failed in CONDITION
SS = 16	CP = 54	                  Deduce terminal_symbol
SS = 17	CP = 54	                    Match  slit
SS = 17	CP = 54	                    Accept slit
SS = 16	CP = 55	                  Accept terminal_symbol
SS = 14	CP = 55	                Accept simple_part
SS = 12	CP = 55	              Accept part
SS = 13	CP = 55	              Match  ,
SS = 13	CP = 55	              Reject ,
SS = 13	CP = 55	              Deduce part
SS = 13	CP = 55	                Predict Failed in CONDITION
SS = 13	CP = 55	                Predict Failed in CONDITION
SS = 13	CP = 55	                Predict Failed in CONDITION
SS = 15	CP = 55	                Deduce simple_part
SS = 17	CP = 55	                  Deduce right_non_terminal_symbol
SS = 18	CP = 55	                    Deduce non_terminal_symbol
SS = 18	CP = 55	                      Match  id
SS = 18	CP = 55	                      Accept id
SS = 18	CP = 56	                    Accept non_terminal_symbol
SS = 17	CP = 56	                  Accept right_non_terminal_symbol
SS = 15	CP = 56	                Accept simple_part
SS = 13	CP = 56	              Accept part
SS = 13	CP = 56	              Match  ,
SS = 13	CP = 56	              Reject ,
SS = 12	CP = 56	              Predict Failed: part
SS = 11	CP = 56	            Accept term
SS = 11	CP = 56	            Match  |
SS = 11	CP = 56	            Reject |
SS = 10	CP = 56	          Accept declaration
SS = 9	CP = 56	          Match  }
SS = 9	CP = 56	          Accept }
SS = 9	CP = 57	        Accept repeat_part
SS = 7	CP = 57	      Accept part
SS = 7	CP = 57	      Match  ,
SS = 7	CP = 57	      Reject ,
SS = 6	CP = 57	      Predict Failed: part
SS = 5	CP = 57	    Accept term
SS = 5	CP = 57	    Match  |
SS = 5	CP = 57	    Reject |
SS = 4	CP = 57	  Accept declaration
SS = 4	CP = 57	  Deduce end_op
SS = 5	CP = 57	    Match  ;
SS = 5	CP = 57	    Accept ;
SS = 4	CP = 58	  Accept end_op
SS = 3	CP = 58	Accept statement
SS = 3	CP = 58	Deduce statement
SS = 4	CP = 58	  Deduce non_terminal_symbol
SS = 4	CP = 58	    Match  id
SS = 4	CP = 58	    Accept id
SS = 4	CP = 59	  Accept non_terminal_symbol
SS = 4	CP = 59	  Deduce assign_op
SS = 5	CP = 59	    Match  ::=
SS = 5	CP = 59	    Accept ::=
SS = 4	CP = 60	  Accept assign_op
SS = 4	CP = 60	  Deduce declaration
SS = 5	CP = 60	    Deduce term
SS = 6	CP = 60	      Deduce part
SS = 6	CP = 60	        Predict Failed in CONDITION
SS = 6	CP = 60	        Predict Failed in CONDITION
SS = 6	CP = 60	        Predict Failed in CONDITION
SS = 8	CP = 60	        Deduce simple_part
SS = 10	CP = 60	          Deduce right_non_terminal_symbol
SS = 11	CP = 60	            Deduce non_terminal_symbol
SS = 11	CP = 60	              Match  id
SS = 11	CP = 60	              Accept id
SS = 11	CP = 61	            Accept non_terminal_symbol
SS = 10	CP = 61	          Accept right_non_terminal_symbol
SS = 8	CP = 61	        Accept simple_part
SS = 6	CP = 61	      Accept part
SS = 7	CP = 61	      Match  ,
SS = 7	CP = 61	      Reject ,
SS = 7	CP = 61	      Deduce part
SS = 7	CP = 61	        Predict Failed in CONDITION
SS = 7	CP = 61	        Predict Failed in CONDITION
SS = 7	CP = 61	        Predict Failed in CONDITION
SS = 9	CP = 61	        Deduce simple_part
SS = 9	CP = 61	          Predict Failed in CONDITION
SS = 11	CP = 61	          Deduce terminal_symbol
SS = 11	CP = 61	            Predict Failed in CONDITION
SS = 11	CP = 61	            Predict Failed in CONDITION
SS = 12	CP = 61	            Match  token
SS = 12	CP = 61	            Accept token
SS = 11	CP = 62	          Accept terminal_symbol
SS = 9	CP = 62	        Accept simple_part
SS = 7	CP = 62	      Accept part
SS = 7	CP = 62	      Match  ,
SS = 7	CP = 62	      Reject ,
SS = 6	CP = 62	      Predict Failed: part
SS = 5	CP = 62	    Accept term
SS = 5	CP = 62	    Match  |
SS = 5	CP = 62	    Reject |
SS = 4	CP = 62	  Accept declaration
SS = 4	CP = 62	  Deduce end_op
SS = 5	CP = 62	    Match  ;
SS = 5	CP = 62	    Accept ;
SS = 4	CP = 63	  Accept end_op
SS = 3	CP = 63	Accept statement
SS = 3	CP = 63	Deduce statement
SS = 4	CP = 63	  Deduce non_terminal_symbol
SS = 4	CP = 63	    Match  id
SS = 4	CP = 63	    Accept id
SS = 4	CP = 64	  Accept non_terminal_symbol
SS = 4	CP = 64	  Deduce assign_op
SS = 5	CP = 64	    Match  ::=
SS = 5	CP = 64	    Accept ::=
SS = 4	CP = 65	  Accept assign_op
SS = 4	CP = 65	  Deduce declaration
SS = 5	CP = 65	    Deduce term
SS = 6	CP = 65	      Deduce part
SS = 6	CP = 65	        Predict Failed in CONDITION
SS = 6	CP = 65	        Predict Failed in CONDITION
SS = 6	CP = 65	        Predict Failed in CONDITION
SS = 8	CP = 65	        Deduce simple_part
SS = 10	CP = 65	          Deduce right_non_terminal_symbol
SS = 11	CP = 65	            Deduce non_terminal_symbol
SS = 11	CP = 65	              Match  id
SS = 11	CP = 65	              Accept id
SS = 11	CP = 66	            Accept non_terminal_symbol
SS = 10	CP = 66	          Accept right_non_terminal_symbol
SS = 8	CP = 66	        Accept simple_part
SS = 6	CP = 66	      Accept part
SS = 7	CP = 66	      Match  ,
SS = 7	CP = 66	      Reject ,
SS = 6	CP = 66	      Predict Failed: part
SS = 5	CP = 66	    Accept term
SS = 5	CP = 66	    Match  |
SS = 5	CP = 66	    Reject |
SS = 4	CP = 66	  Accept declaration
SS = 4	CP = 66	  Deduce end_op
SS = 5	CP = 66	    Match  ;
SS = 5	CP = 66	    Accept ;
SS = 4	CP = 67	  Accept end_op
SS = 3	CP = 67	Accept statement
SS = 3	CP = 67	Deduce statement
SS = 4	CP = 67	  Deduce non_terminal_symbol
SS = 4	CP = 67	    Match  id
SS = 4	CP = 67	    Accept id
SS = 4	CP = 68	  Accept non_terminal_symbol
SS = 4	CP = 68	  Deduce assign_op
SS = 5	CP = 68	    Match  ::=
SS = 5	CP = 68	    Accept ::=
SS = 4	CP = 69	  Accept assign_op
SS = 4	CP = 69	  Deduce declaration
SS = 5	CP = 69	    Deduce term
SS = 6	CP = 69	      Deduce part
SS = 6	CP = 69	        Predict Failed in CONDITION
SS = 6	CP = 69	        Predict Failed in CONDITION
SS = 6	CP = 69	        Predict Failed in CONDITION
SS = 8	CP = 69	        Deduce simple_part
SS = 8	CP = 69	          Predict Failed in CONDITION
SS = 10	CP = 69	          Deduce terminal_symbol
SS = 11	CP = 69	            Match  slit
SS = 11	CP = 69	            Accept slit
SS = 10	CP = 70	          Accept terminal_symbol
SS = 8	CP = 70	        Accept simple_part
SS = 6	CP = 70	      Accept part
SS = 7	CP = 70	      Match  ,
SS = 7	CP = 70	      Reject ,
SS = 7	CP = 70	      Deduce part
SS = 9	CP = 70	        Deduce repeat_part
SS = 9	CP = 70	          Match  {
SS = 9	CP = 70	          Accept {
SS = 10	CP = 71	          Deduce declaration
SS = 11	CP = 71	            Deduce term
SS = 12	CP = 71	              Deduce part
SS = 12	CP = 71	                Predict Failed in CONDITION
SS = 12	CP = 71	                Predict Failed in CONDITION
SS = 12	CP = 71	                Predict Failed in CONDITION
SS = 14	CP = 71	                Deduce simple_part
SS = 16	CP = 71	                  Deduce right_non_terminal_symbol
SS = 17	CP = 71	                    Deduce non_terminal_symbol
SS = 17	CP = 71	                      Match  id
SS = 17	CP = 71	                      Accept id
SS = 17	CP = 72	                    Accept non_terminal_symbol
SS = 16	CP = 72	                  Accept right_non_terminal_symbol
SS = 14	CP = 72	                Accept simple_part
SS = 12	CP = 72	              Accept part
SS = 13	CP = 72	              Match  ,
SS = 13	CP = 72	              Reject ,
SS = 12	CP = 72	              Predict Failed: part
SS = 11	CP = 72	            Accept term
SS = 11	CP = 72	            Match  |
SS = 11	CP = 72	            Accept |
SS = 12	CP = 73	            Deduce term
SS = 13	CP = 73	              Deduce part
SS = 13	CP = 73	                Predict Failed in CONDITION
SS = 13	CP = 73	                Predict Failed in CONDITION
SS = 13	CP = 73	                Predict Failed in CONDITION
SS = 15	CP = 73	                Deduce simple_part
SS = 17	CP = 73	                  Deduce right_non_terminal_symbol
SS = 18	CP = 73	                    Deduce non_terminal_symbol
SS = 18	CP = 73	                      Match  id
SS = 18	CP = 73	                      Accept id
SS = 18	CP = 74	                    Accept non_terminal_symbol
SS = 17	CP = 74	                  Accept right_non_terminal_symbol
SS = 15	CP = 74	                Accept simple_part
SS = 13	CP = 74	              Accept part
SS = 14	CP = 74	              Match  ,
SS = 14	CP = 74	              Reject ,
SS = 13	CP = 74	              Predict Failed: part
SS = 12	CP = 74	            Accept term
SS = 11	CP = 74	            Match  |
SS = 11	CP = 74	            Reject |
SS = 10	CP = 74	          Accept declaration
SS = 9	CP = 74	          Match  }
SS = 9	CP = 74	          Accept }
SS = 9	CP = 75	        Accept repeat_part
SS = 7	CP = 75	      Accept part
SS = 7	CP = 75	      Match  ,
SS = 7	CP = 75	      Reject ,
SS = 7	CP = 75	      Deduce part
SS = 7	CP = 75	        Predict Failed in CONDITION
SS = 7	CP = 75	        Predict Failed in CONDITION
SS = 7	CP = 75	        Predict Failed in CONDITION
SS = 9	CP = 75	        Deduce simple_part
SS = 9	CP = 75	          Predict Failed in CONDITION
SS = 11	CP = 75	          Deduce terminal_symbol
SS = 12	CP = 75	            Match  slit
SS = 12	CP = 75	            Accept slit
SS = 11	CP = 76	          Accept terminal_symbol
SS = 9	CP = 76	        Accept simple_part
SS = 7	CP = 76	      Accept part
SS = 7	CP = 76	      Match  ,
SS = 7	CP = 76	      Reject ,
SS = 6	CP = 76	      Predict Failed: part
SS = 5	CP = 76	    Accept term
SS = 5	CP = 76	    Match  |
SS = 5	CP = 76	    Reject |
SS = 4	CP = 76	  Accept declaration
SS = 4	CP = 76	  Deduce end_op
SS = 5	CP = 76	    Match  ;
SS = 5	CP = 76	    Accept ;
SS = 4	CP = 77	  Accept end_op
SS = 3	CP = 77	Accept statement
SS = 3	CP = 77	Deduce statement
SS = 4	CP = 77	  Deduce non_terminal_symbol
SS = 4	CP = 77	    Match  id
SS = 4	CP = 77	    Accept id
SS = 4	CP = 78	  Accept non_terminal_symbol
SS = 4	CP = 78	  Deduce assign_op
SS = 5	CP = 78	    Match  ::=
SS = 5	CP = 78	    Accept ::=
SS = 4	CP = 79	  Accept assign_op
SS = 4	CP = 79	  Deduce declaration
SS = 5	CP = 79	    Deduce term
SS = 6	CP = 79	      Deduce part
SS = 6	CP = 79	        Predict Failed in CONDITION
SS = 6	CP = 79	        Predict Failed in CONDITION
SS = 6	CP = 79	        Predict Failed in CONDITION
SS = 8	CP = 79	        Deduce simple_part
SS = 10	CP = 79	          Deduce right_non_terminal_symbol
SS = 11	CP = 79	            Deduce non_terminal_symbol
SS = 11	CP = 79	              Match  id
SS = 11	CP = 79	              Accept id
SS = 11	CP = 80	            Accept non_terminal_symbol
SS = 10	CP = 80	          Accept right_non_terminal_symbol
SS = 8	CP = 80	        Accept simple_part
SS = 6	CP = 80	      Accept part
SS = 7	CP = 80	      Match  ,
SS = 7	CP = 80	      Reject ,
SS = 7	CP = 80	      Deduce part
SS = 7	CP = 80	        Predict Failed in CONDITION
SS = 7	CP = 80	        Predict Failed in CONDITION
SS = 7	CP = 80	        Predict Failed in CONDITION
SS = 9	CP = 80	        Deduce simple_part
SS = 11	CP = 80	          Deduce right_non_terminal_symbol
SS = 12	CP = 80	            Deduce non_terminal_symbol
SS = 12	CP = 80	              Match  id
SS = 12	CP = 80	              Accept id
SS = 12	CP = 81	            Accept non_terminal_symbol
SS = 11	CP = 81	          Accept right_non_terminal_symbol
SS = 9	CP = 81	        Accept simple_part
SS = 7	CP = 81	      Accept part
SS = 7	CP = 81	      Match  ,
SS = 7	CP = 81	      Reject ,
SS = 7	CP = 81	      Deduce part
SS = 7	CP = 81	        Predict Failed in CONDITION
SS = 7	CP = 81	        Predict Failed in CONDITION
SS = 7	CP = 81	        Predict Failed in CONDITION
SS = 9	CP = 81	        Deduce simple_part
SS = 9	CP = 81	          Predict Failed in CONDITION
SS = 11	CP = 81	          Deduce terminal_symbol
SS = 12	CP = 81	            Match  slit
SS = 12	CP = 81	            Accept slit
SS = 11	CP = 82	          Accept terminal_symbol
SS = 9	CP = 82	        Accept simple_part
SS = 7	CP = 82	      Accept part
SS = 7	CP = 82	      Match  ,
SS = 7	CP = 82	      Reject ,
SS = 6	CP = 82	      Predict Failed: part
SS = 5	CP = 82	    Accept term
SS = 5	CP = 82	    Match  |
SS = 5	CP = 82	    Reject |
SS = 4	CP = 82	  Accept declaration
SS = 4	CP = 82	  Deduce end_op
SS = 5	CP = 82	    Match  ;
SS = 5	CP = 82	    Accept ;
SS = 4	CP = 83	  Accept end_op
SS = 3	CP = 83	Accept statement
SS = 3	CP = 83	Deduce statement
SS = 4	CP = 83	  Deduce non_terminal_symbol
SS = 4	CP = 83	    Match  id
SS = 4	CP = 83	    Accept id
SS = 4	CP = 84	  Accept non_terminal_symbol
SS = 4	CP = 84	  Deduce assign_op
SS = 5	CP = 84	    Match  ::=
SS = 5	CP = 84	    Accept ::=
SS = 4	CP = 85	  Accept assign_op
SS = 4	CP = 85	  Deduce declaration
SS = 5	CP = 85	    Deduce term
SS = 6	CP = 85	      Deduce part
SS = 6	CP = 85	        Predict Failed in CONDITION
SS = 6	CP = 85	        Predict Failed in CONDITION
SS = 6	CP = 85	        Predict Failed in CONDITION
SS = 8	CP = 85	        Deduce simple_part
SS = 10	CP = 85	          Deduce right_non_terminal_symbol
SS = 11	CP = 85	            Deduce non_terminal_symbol
SS = 11	CP = 85	              Match  id
SS = 11	CP = 85	              Accept id
SS = 11	CP = 86	            Accept non_terminal_symbol
SS = 10	CP = 86	          Accept right_non_terminal_symbol
SS = 8	CP = 86	        Accept simple_part
SS = 6	CP = 86	      Accept part
SS = 7	CP = 86	      Match  ,
SS = 7	CP = 86	      Reject ,
SS = 7	CP = 86	      Deduce part
SS = 7	CP = 86	        Predict Failed in CONDITION
SS = 7	CP = 86	        Predict Failed in CONDITION
SS = 9	CP = 86	        Deduce alternative_part
SS = 9	CP = 86	          Match  [
SS = 9	CP = 86	          Accept [
SS = 10	CP = 87	          Deduce declaration
SS = 11	CP = 87	            Deduce term
SS = 12	CP = 87	              Deduce part
SS = 12	CP = 87	                Predict Failed in CONDITION
SS = 12	CP = 87	                Predict Failed in CONDITION
SS = 12	CP = 87	                Predict Failed in CONDITION
SS = 14	CP = 87	                Deduce simple_part
SS = 14	CP = 87	                  Predict Failed in CONDITION
SS = 16	CP = 87	                  Deduce terminal_symbol
SS = 17	CP = 87	                    Match  slit
SS = 17	CP = 87	                    Accept slit
SS = 16	CP = 88	                  Accept terminal_symbol
SS = 14	CP = 88	                Accept simple_part
SS = 12	CP = 88	              Accept part
SS = 13	CP = 88	              Match  ,
SS = 13	CP = 88	              Reject ,
SS = 13	CP = 88	              Deduce part
SS = 13	CP = 88	                Predict Failed in CONDITION
SS = 13	CP = 88	                Predict Failed in CONDITION
SS = 13	CP = 88	                Predict Failed in CONDITION
SS = 15	CP = 88	                Deduce simple_part
SS = 17	CP = 88	                  Deduce right_non_terminal_symbol
SS = 18	CP = 88	                    Deduce non_terminal_symbol
SS = 18	CP = 88	                      Match  id
SS = 18	CP = 88	                      Accept id
SS = 18	CP = 89	                    Accept non_terminal_symbol
SS = 17	CP = 89	                  Accept right_non_terminal_symbol
SS = 15	CP = 89	                Accept simple_part
SS = 13	CP = 89	              Accept part
SS = 13	CP = 89	              Match  ,
SS = 13	CP = 89	              Reject ,
SS = 12	CP = 89	              Predict Failed: part
SS = 11	CP = 89	            Accept term
SS = 11	CP = 89	            Match  |
SS = 11	CP = 89	            Reject |
SS = 10	CP = 89	          Accept declaration
SS = 9	CP = 89	          Match  ]
SS = 9	CP = 89	          Accept ]
SS = 9	CP = 90	        Accept alternative_part
SS = 7	CP = 90	      Accept part
SS = 7	CP = 90	      Match  ,
SS = 7	CP = 90	      Reject ,
SS = 6	CP = 90	      Predict Failed: part
SS = 5	CP = 90	    Accept term
SS = 5	CP = 90	    Match  |
SS = 5	CP = 90	    Reject |
SS = 4	CP = 90	  Accept declaration
SS = 4	CP = 90	  Deduce end_op
SS = 5	CP = 90	    Match  ;
SS = 5	CP = 90	    Accept ;
SS = 4	CP = 91	  Accept end_op
SS = 3	CP = 91	Accept statement
SS = 3	CP = 91	Deduce statement
SS = 4	CP = 91	  Deduce non_terminal_symbol
SS = 4	CP = 91	    Match  id
SS = 4	CP = 91	    Accept id
SS = 4	CP = 92	  Accept non_terminal_symbol
SS = 4	CP = 92	  Deduce assign_op
SS = 5	CP = 92	    Match  ::=
SS = 5	CP = 92	    Accept ::=
SS = 4	CP = 93	  Accept assign_op
SS = 4	CP = 93	  Deduce declaration
SS = 5	CP = 93	    Deduce term
SS = 6	CP = 93	      Deduce part
SS = 6	CP = 93	        Predict Failed in CONDITION
SS = 6	CP = 93	        Predict Failed in CONDITION
SS = 6	CP = 93	        Predict Failed in CONDITION
SS = 8	CP = 93	        Deduce simple_part
SS = 10	CP = 93	          Deduce right_non_terminal_symbol
SS = 11	CP = 93	            Deduce non_terminal_symbol
SS = 11	CP = 93	              Match  id
SS = 11	CP = 93	              Accept id
SS = 11	CP = 94	            Accept non_terminal_symbol
SS = 10	CP = 94	          Accept right_non_terminal_symbol
SS = 8	CP = 94	        Accept simple_part
SS = 6	CP = 94	      Accept part
SS = 7	CP = 94	      Match  ,
SS = 7	CP = 94	      Reject ,
SS = 6	CP = 94	      Predict Failed: part
SS = 5	CP = 94	    Accept term
SS = 5	CP = 94	    Match  |
SS = 5	CP = 94	    Accept |
SS = 6	CP = 95	    Deduce term
SS = 7	CP = 95	      Deduce part
SS = 7	CP = 95	        Predict Failed in CONDITION
SS = 7	CP = 95	        Predict Failed in CONDITION
SS = 7	CP = 95	        Predict Failed in CONDITION
SS = 9	CP = 95	        Deduce simple_part
SS = 9	CP = 95	          Predict Failed in CONDITION
SS = 11	CP = 95	          Deduce terminal_symbol
SS = 12	CP = 95	            Match  slit
SS = 12	CP = 95	            Accept slit
SS = 11	CP = 96	          Accept terminal_symbol
SS = 9	CP = 96	        Accept simple_part
SS = 7	CP = 96	      Accept part
SS = 8	CP = 96	      Match  ,
SS = 8	CP = 96	      Reject ,
SS = 8	CP = 96	      Deduce part
SS = 8	CP = 96	        Predict Failed in CONDITION
SS = 8	CP = 96	        Predict Failed in CONDITION
SS = 8	CP = 96	        Predict Failed in CONDITION
SS = 10	CP = 96	        Deduce simple_part
SS = 12	CP = 96	          Deduce right_non_terminal_symbol
SS = 13	CP = 96	            Deduce non_terminal_symbol
SS = 13	CP = 96	              Match  id
SS = 13	CP = 96	              Accept id
SS = 13	CP = 97	            Accept non_terminal_symbol
SS = 12	CP = 97	          Accept right_non_terminal_symbol
SS = 10	CP = 97	        Accept simple_part
SS = 8	CP = 97	      Accept part
SS = 8	CP = 97	      Match  ,
SS = 8	CP = 97	      Reject ,
SS = 8	CP = 97	      Deduce part
SS = 8	CP = 97	        Predict Failed in CONDITION
SS = 8	CP = 97	        Predict Failed in CONDITION
SS = 10	CP = 97	        Deduce alternative_part
SS = 10	CP = 97	          Match  [
SS = 10	CP = 97	          Accept [
SS = 11	CP = 98	          Deduce declaration
SS = 12	CP = 98	            Deduce term
SS = 13	CP = 98	              Deduce part
SS = 13	CP = 98	                Predict Failed in CONDITION
SS = 13	CP = 98	                Predict Failed in CONDITION
SS = 13	CP = 98	                Predict Failed in CONDITION
SS = 15	CP = 98	                Deduce simple_part
SS = 15	CP = 98	                  Predict Failed in CONDITION
SS = 17	CP = 98	                  Deduce terminal_symbol
SS = 18	CP = 98	                    Match  slit
SS = 18	CP = 98	                    Accept slit
SS = 17	CP = 99	                  Accept terminal_symbol
SS = 15	CP = 99	                Accept simple_part
SS = 13	CP = 99	              Accept part
SS = 14	CP = 99	              Match  ,
SS = 14	CP = 99	              Reject ,
SS = 13	CP = 99	              Predict Failed: part
SS = 12	CP = 99	            Accept term
SS = 12	CP = 99	            Match  |
SS = 12	CP = 99	            Reject |
SS = 11	CP = 99	          Accept declaration
SS = 10	CP = 99	          Match  ]
SS = 10	CP = 99	          Accept ]
SS = 10	CP = 100	        Accept alternative_part
SS = 8	CP = 100	      Accept part
SS = 8	CP = 100	      Match  ,
SS = 8	CP = 100	      Reject ,
SS = 8	CP = 100	      Deduce part
SS = 8	CP = 100	        Predict Failed in CONDITION
SS = 8	CP = 100	        Predict Failed in CONDITION
SS = 8	CP = 100	        Predict Failed in CONDITION
SS = 10	CP = 100	        Deduce simple_part
SS = 10	CP = 100	          Predict Failed in CONDITION
SS = 12	CP = 100	          Deduce terminal_symbol
SS = 13	CP = 100	            Match  slit
SS = 13	CP = 100	            Accept slit
SS = 12	CP = 101	          Accept terminal_symbol
SS = 10	CP = 101	        Accept simple_part
SS = 8	CP = 101	      Accept part
SS = 8	CP = 101	      Match  ,
SS = 8	CP = 101	      Reject ,
SS = 7	CP = 101	      Predict Failed: part
SS = 6	CP = 101	    Accept term
SS = 5	CP = 101	    Match  |
SS = 5	CP = 101	    Reject |
SS = 4	CP = 101	  Accept declaration
SS = 4	CP = 101	  Deduce end_op
SS = 5	CP = 101	    Match  ;
SS = 5	CP = 101	    Accept ;
SS = 4	CP = 102	  Accept end_op
SS = 3	CP = 102	Accept statement
SS = 3	CP = 102	Deduce statement
SS = 4	CP = 102	  Deduce non_terminal_symbol
SS = 4	CP = 102	    Match  id
SS = 4	CP = 102	    Accept id
SS = 4	CP = 103	  Accept non_terminal_symbol
SS = 4	CP = 103	  Deduce assign_op
SS = 5	CP = 103	    Match  ::=
SS = 5	CP = 103	    Accept ::=
SS = 4	CP = 104	  Accept assign_op
SS = 4	CP = 104	  Deduce declaration
SS = 5	CP = 104	    Deduce term
SS = 6	CP = 104	      Deduce part
SS = 6	CP = 104	        Predict Failed in CONDITION
SS = 6	CP = 104	        Predict Failed in CONDITION
SS = 6	CP = 104	        Predict Failed in CONDITION
SS = 8	CP = 104	        Deduce simple_part
SS = 10	CP = 104	          Deduce right_non_terminal_symbol
SS = 11	CP = 104	            Deduce non_terminal_symbol
SS = 11	CP = 104	              Match  id
SS = 11	CP = 104	              Accept id
SS = 11	CP = 105	            Accept non_terminal_symbol
SS = 10	CP = 105	          Accept right_non_terminal_symbol
SS = 8	CP = 105	        Accept simple_part
SS = 6	CP = 105	      Accept part
SS = 7	CP = 105	      Match  ,
SS = 7	CP = 105	      Reject ,
SS = 7	CP = 105	      Deduce part
SS = 9	CP = 105	        Deduce repeat_part
SS = 9	CP = 105	          Match  {
SS = 9	CP = 105	          Accept {
SS = 10	CP = 106	          Deduce declaration
SS = 11	CP = 106	            Deduce term
SS = 12	CP = 106	              Deduce part
SS = 12	CP = 106	                Predict Failed in CONDITION
SS = 12	CP = 106	                Predict Failed in CONDITION
SS = 12	CP = 106	                Predict Failed in CONDITION
SS = 14	CP = 106	                Deduce simple_part
SS = 14	CP = 106	                  Predict Failed in CONDITION
SS = 16	CP = 106	                  Deduce terminal_symbol
SS = 17	CP = 106	                    Match  slit
SS = 17	CP = 106	                    Accept slit
SS = 16	CP = 107	                  Accept terminal_symbol
SS = 14	CP = 107	                Accept simple_part
SS = 12	CP = 107	              Accept part
SS = 13	CP = 107	              Match  ,
SS = 13	CP = 107	              Reject ,
SS = 13	CP = 107	              Deduce part
SS = 13	CP = 107	                Predict Failed in CONDITION
SS = 13	CP = 107	                Predict Failed in CONDITION
SS = 13	CP = 107	                Predict Failed in CONDITION
SS = 15	CP = 107	                Deduce simple_part
SS = 17	CP = 107	                  Deduce right_non_terminal_symbol
SS = 18	CP = 107	                    Deduce non_terminal_symbol
SS = 18	CP = 107	                      Match  id
SS = 18	CP = 107	                      Accept id
SS = 18	CP = 108	                    Accept non_terminal_symbol
SS = 17	CP = 108	                  Accept right_non_terminal_symbol
SS = 15	CP = 108	                Accept simple_part
SS = 13	CP = 108	              Accept part
SS = 13	CP = 108	              Match  ,
SS = 13	CP = 108	              Reject ,
SS = 12	CP = 108	              Predict Failed: part
SS = 11	CP = 108	            Accept term
SS = 11	CP = 108	            Match  |
SS = 11	CP = 108	            Reject |
SS = 10	CP = 108	          Accept declaration
SS = 9	CP = 108	          Match  }
SS = 9	CP = 108	          Accept }
SS = 9	CP = 109	        Accept repeat_part
SS = 7	CP = 109	      Accept part
SS = 7	CP = 109	      Match  ,
SS = 7	CP = 109	      Reject ,
SS = 6	CP = 109	      Predict Failed: part
SS = 5	CP = 109	    Accept term
SS = 5	CP = 109	    Match  |
SS = 5	CP = 109	    Reject |
SS = 4	CP = 109	  Accept declaration
SS = 4	CP = 109	  Deduce end_op
SS = 5	CP = 109	    Match  ;
SS = 5	CP = 109	    Accept ;
SS = 4	CP = 110	  Accept end_op
SS = 3	CP = 110	Accept statement
SS = 3	CP = 110	Deduce statement
SS = 4	CP = 110	  Deduce non_terminal_symbol
SS = 4	CP = 110	    Match  id
SS = 4	CP = 110	    Accept id
SS = 4	CP = 111	  Accept non_terminal_symbol
SS = 4	CP = 111	  Deduce assign_op
SS = 5	CP = 111	    Match  ::=
SS = 5	CP = 111	    Accept ::=
SS = 4	CP = 112	  Accept assign_op
SS = 4	CP = 112	  Deduce declaration
SS = 5	CP = 112	    Deduce term
SS = 6	CP = 112	      Deduce part
SS = 6	CP = 112	        Predict Failed in CONDITION
SS = 6	CP = 112	        Predict Failed in CONDITION
SS = 6	CP = 112	        Predict Failed in CONDITION
SS = 8	CP = 112	        Deduce simple_part
SS = 10	CP = 112	          Deduce right_non_terminal_symbol
SS = 11	CP = 112	            Deduce non_terminal_symbol
SS = 11	CP = 112	              Match  id
SS = 11	CP = 112	              Accept id
SS = 11	CP = 113	            Accept non_terminal_symbol
SS = 10	CP = 113	          Accept right_non_terminal_symbol
SS = 8	CP = 113	        Accept simple_part
SS = 6	CP = 113	      Accept part
SS = 7	CP = 113	      Match  ,
SS = 7	CP = 113	      Reject ,
SS = 6	CP = 113	      Predict Failed: part
SS = 5	CP = 113	    Accept term
SS = 5	CP = 113	    Match  |
SS = 5	CP = 113	    Accept |
SS = 6	CP = 114	    Deduce term
SS = 7	CP = 114	      Deduce part
SS = 7	CP = 114	        Predict Failed in CONDITION
SS = 7	CP = 114	        Predict Failed in CONDITION
SS = 7	CP = 114	        Predict Failed in CONDITION
SS = 9	CP = 114	        Deduce simple_part
SS = 11	CP = 114	          Deduce right_non_terminal_symbol
SS = 12	CP = 114	            Deduce non_terminal_symbol
SS = 12	CP = 114	              Match  id
SS = 12	CP = 114	              Accept id
SS = 12	CP = 115	            Accept non_terminal_symbol
SS = 11	CP = 115	          Accept right_non_terminal_symbol
SS = 9	CP = 115	        Accept simple_part
SS = 7	CP = 115	      Accept part
SS = 8	CP = 115	      Match  ,
SS = 8	CP = 115	      Reject ,
SS = 7	CP = 115	      Predict Failed: part
SS = 6	CP = 115	    Accept term
SS = 5	CP = 115	    Match  |
SS = 5	CP = 115	    Accept |
SS = 6	CP = 116	    Deduce term
SS = 7	CP = 116	      Deduce part
SS = 7	CP = 116	        Predict Failed in CONDITION
SS = 7	CP = 116	        Predict Failed in CONDITION
SS = 7	CP = 116	        Predict Failed in CONDITION
SS = 9	CP = 116	        Deduce simple_part
SS = 11	CP = 116	          Deduce right_non_terminal_symbol
SS = 12	CP = 116	            Deduce non_terminal_symbol
SS = 12	CP = 116	              Match  id
SS = 12	CP = 116	              Accept id
SS = 12	CP = 117	            Accept non_terminal_symbol
SS = 11	CP = 117	          Accept right_non_terminal_symbol
SS = 9	CP = 117	        Accept simple_part
SS = 7	CP = 117	      Accept part
SS = 8	CP = 117	      Match  ,
SS = 8	CP = 117	      Reject ,
SS = 7	CP = 117	      Predict Failed: part
SS = 6	CP = 117	    Accept term
SS = 5	CP = 117	    Match  |
SS = 5	CP = 117	    Accept |
SS = 6	CP = 118	    Deduce term
SS = 7	CP = 118	      Deduce part
SS = 7	CP = 118	        Predict Failed in CONDITION
SS = 7	CP = 118	        Predict Failed in CONDITION
SS = 7	CP = 118	        Predict Failed in CONDITION
SS = 9	CP = 118	        Deduce simple_part
SS = 11	CP = 118	          Deduce right_non_terminal_symbol
SS = 12	CP = 118	            Deduce non_terminal_symbol
SS = 12	CP = 118	              Match  id
SS = 12	CP = 118	              Accept id
SS = 12	CP = 119	            Accept non_terminal_symbol
SS = 11	CP = 119	          Accept right_non_terminal_symbol
SS = 9	CP = 119	        Accept simple_part
SS = 7	CP = 119	      Accept part
SS = 8	CP = 119	      Match  ,
SS = 8	CP = 119	      Reject ,
SS = 7	CP = 119	      Predict Failed: part
SS = 6	CP = 119	    Accept term
SS = 5	CP = 119	    Match  |
SS = 5	CP = 119	    Accept |
SS = 6	CP = 120	    Deduce term
SS = 7	CP = 120	      Deduce part
SS = 7	CP = 120	        Predict Failed in CONDITION
SS = 7	CP = 120	        Predict Failed in CONDITION
SS = 7	CP = 120	        Predict Failed in CONDITION
SS = 9	CP = 120	        Deduce simple_part
SS = 11	CP = 120	          Deduce right_non_terminal_symbol
SS = 12	CP = 120	            Deduce non_terminal_symbol
SS = 12	CP = 120	              Match  id
SS = 12	CP = 120	              Accept id
SS = 12	CP = 121	            Accept non_terminal_symbol
SS = 11	CP = 121	          Accept right_non_terminal_symbol
SS = 9	CP = 121	        Accept simple_part
SS = 7	CP = 121	      Accept part
SS = 8	CP = 121	      Match  ,
SS = 8	CP = 121	      Reject ,
SS = 7	CP = 121	      Predict Failed: part
SS = 6	CP = 121	    Accept term
SS = 5	CP = 121	    Match  |
SS = 5	CP = 121	    Reject |
SS = 4	CP = 121	  Accept declaration
SS = 4	CP = 121	  Deduce end_op
SS = 5	CP = 121	    Match  ;
SS = 5	CP = 121	    Accept ;
SS = 4	CP = 122	  Accept end_op
SS = 3	CP = 122	Accept statement
SS = 3	CP = 122	Deduce statement
SS = 4	CP = 122	  Deduce non_terminal_symbol
SS = 4	CP = 122	    Match  id
SS = 4	CP = 122	    Accept id
SS = 4	CP = 123	  Accept non_terminal_symbol
SS = 4	CP = 123	  Deduce assign_op
SS = 5	CP = 123	    Match  ::=
SS = 5	CP = 123	    Accept ::=
SS = 4	CP = 124	  Accept assign_op
SS = 4	CP = 124	  Deduce declaration
SS = 5	CP = 124	    Deduce term
SS = 6	CP = 124	      Deduce part
SS = 6	CP = 124	        Predict Failed in CONDITION
SS = 6	CP = 124	        Predict Failed in CONDITION
SS = 6	CP = 124	        Predict Failed in CONDITION
SS = 8	CP = 124	        Deduce simple_part
SS = 8	CP = 124	          Predict Failed in CONDITION
SS = 10	CP = 124	          Deduce terminal_symbol
SS = 11	CP = 124	            Match  slit
SS = 11	CP = 124	            Accept slit
SS = 10	CP = 125	          Accept terminal_symbol
SS = 8	CP = 125	        Accept simple_part
SS = 6	CP = 125	      Accept part
SS = 7	CP = 125	      Match  ,
SS = 7	CP = 125	      Reject ,
SS = 6	CP = 125	      Predict Failed: part
SS = 5	CP = 125	    Accept term
SS = 5	CP = 125	    Match  |
SS = 5	CP = 125	    Accept |
SS = 6	CP = 126	    Deduce term
SS = 7	CP = 126	      Deduce part
SS = 7	CP = 126	        Predict Failed in CONDITION
SS = 7	CP = 126	        Predict Failed in CONDITION
SS = 7	CP = 126	        Predict Failed in CONDITION
SS = 9	CP = 126	        Deduce simple_part
SS = 11	CP = 126	          Deduce right_non_terminal_symbol
SS = 12	CP = 126	            Deduce non_terminal_symbol
SS = 12	CP = 126	              Match  id
SS = 12	CP = 126	              Accept id
SS = 12	CP = 127	            Accept non_terminal_symbol
SS = 11	CP = 127	          Accept right_non_terminal_symbol
SS = 9	CP = 127	        Accept simple_part
SS = 7	CP = 127	      Accept part
SS = 8	CP = 127	      Match  ,
SS = 8	CP = 127	      Reject ,
SS = 8	CP = 127	      Deduce part
SS = 8	CP = 127	        Predict Failed in CONDITION
SS = 8	CP = 127	        Predict Failed in CONDITION
SS = 8	CP = 127	        Predict Failed in CONDITION
SS = 10	CP = 127	        Deduce simple_part
SS = 10	CP = 127	          Predict Failed in CONDITION
SS = 12	CP = 127	          Deduce terminal_symbol
SS = 13	CP = 127	            Match  slit
SS = 13	CP = 127	            Accept slit
SS = 12	CP = 128	          Accept terminal_symbol
SS = 10	CP = 128	        Accept simple_part
SS = 8	CP = 128	      Accept part
SS = 8	CP = 128	      Match  ,
SS = 8	CP = 128	      Reject ,
SS = 7	CP = 128	      Predict Failed: part
SS = 6	CP = 128	    Accept term
SS = 5	CP = 128	    Match  |
SS = 5	CP = 128	    Reject |
SS = 4	CP = 128	  Accept declaration
SS = 4	CP = 128	  Deduce end_op
SS = 5	CP = 128	    Match  ;
SS = 5	CP = 128	    Accept ;
SS = 4	CP = 129	  Accept end_op
SS = 3	CP = 129	Accept statement
SS = 3	CP = 129	Deduce statement
SS = 4	CP = 129	  Deduce non_terminal_symbol
SS = 4	CP = 129	    Match  id
SS = 4	CP = 129	    Accept id
SS = 4	CP = 130	  Accept non_terminal_symbol
SS = 4	CP = 130	  Deduce assign_op
SS = 5	CP = 130	    Match  ::=
SS = 5	CP = 130	    Accept ::=
SS = 4	CP = 131	  Accept assign_op
SS = 4	CP = 131	  Deduce declaration
SS = 5	CP = 131	    Deduce term
SS = 6	CP = 131	      Deduce part
SS = 6	CP = 131	        Predict Failed in CONDITION
SS = 6	CP = 131	        Predict Failed in CONDITION
SS = 6	CP = 131	        Predict Failed in CONDITION
SS = 8	CP = 131	        Deduce simple_part
SS = 8	CP = 131	          Predict Failed in CONDITION
SS = 10	CP = 131	          Deduce terminal_symbol
SS = 11	CP = 131	            Match  slit
SS = 11	CP = 131	            Accept slit
SS = 10	CP = 132	          Accept terminal_symbol
SS = 8	CP = 132	        Accept simple_part
SS = 6	CP = 132	      Accept part
SS = 7	CP = 132	      Match  ,
SS = 7	CP = 132	      Reject ,
SS = 7	CP = 132	      Deduce part
SS = 7	CP = 132	        Predict Failed in CONDITION
SS = 7	CP = 132	        Predict Failed in CONDITION
SS = 7	CP = 132	        Predict Failed in CONDITION
SS = 9	CP = 132	        Deduce simple_part
SS = 9	CP = 132	          Predict Failed in CONDITION
SS = 11	CP = 132	          Deduce terminal_symbol
SS = 12	CP = 132	            Match  slit
SS = 12	CP = 132	            Accept slit
SS = 11	CP = 133	          Accept terminal_symbol
SS = 9	CP = 133	        Accept simple_part
SS = 7	CP = 133	      Accept part
SS = 7	CP = 133	      Match  ,
SS = 7	CP = 133	      Reject ,
SS = 7	CP = 133	      Deduce part
SS = 7	CP = 133	        Predict Failed in CONDITION
SS = 7	CP = 133	        Predict Failed in CONDITION
SS = 7	CP = 133	        Predict Failed in CONDITION
SS = 9	CP = 133	        Deduce simple_part
SS = 11	CP = 133	          Deduce right_non_terminal_symbol
SS = 12	CP = 133	            Deduce non_terminal_symbol
SS = 12	CP = 133	              Match  id
SS = 12	CP = 133	              Accept id
SS = 12	CP = 134	            Accept non_terminal_symbol
SS = 11	CP = 134	          Accept right_non_terminal_symbol
SS = 9	CP = 134	        Accept simple_part
SS = 7	CP = 134	      Accept part
SS = 7	CP = 134	      Match  ,
SS = 7	CP = 134	      Reject ,
SS = 7	CP = 134	      Deduce part
SS = 7	CP = 134	        Predict Failed in CONDITION
SS = 7	CP = 134	        Predict Failed in CONDITION
SS = 7	CP = 134	        Predict Failed in CONDITION
SS = 9	CP = 134	        Deduce simple_part
SS = 9	CP = 134	          Predict Failed in CONDITION
SS = 11	CP = 134	          Deduce terminal_symbol
SS = 12	CP = 134	            Match  slit
SS = 12	CP = 134	            Accept slit
SS = 11	CP = 135	          Accept terminal_symbol
SS = 9	CP = 135	        Accept simple_part
SS = 7	CP = 135	      Accept part
SS = 7	CP = 135	      Match  ,
SS = 7	CP = 135	      Reject ,
SS = 7	CP = 135	      Deduce part
SS = 7	CP = 135	        Predict Failed in CONDITION
SS = 7	CP = 135	        Predict Failed in CONDITION
SS = 7	CP = 135	        Predict Failed in CONDITION
SS = 9	CP = 135	        Deduce simple_part
SS = 11	CP = 135	          Deduce right_non_terminal_symbol
SS = 12	CP = 135	            Deduce non_terminal_symbol
SS = 12	CP = 135	              Match  id
SS = 12	CP = 135	              Accept id
SS = 12	CP = 136	            Accept non_terminal_symbol
SS = 11	CP = 136	          Accept right_non_terminal_symbol
SS = 9	CP = 136	        Accept simple_part
SS = 7	CP = 136	      Accept part
SS = 7	CP = 136	      Match  ,
SS = 7	CP = 136	      Reject ,
SS = 7	CP = 136	      Deduce part
SS = 7	CP = 136	        Predict Failed in CONDITION
SS = 7	CP = 136	        Predict Failed in CONDITION
SS = 9	CP = 136	        Deduce alternative_part
SS = 9	CP = 136	          Match  [
SS = 9	CP = 136	          Accept [
SS = 10	CP = 137	          Deduce declaration
SS = 11	CP = 137	            Deduce term
SS = 12	CP = 137	              Deduce part
SS = 12	CP = 137	                Predict Failed in CONDITION
SS = 12	CP = 137	                Predict Failed in CONDITION
SS = 12	CP = 137	                Predict Failed in CONDITION
SS = 14	CP = 137	                Deduce simple_part
SS = 14	CP = 137	                  Predict Failed in CONDITION
SS = 16	CP = 137	                  Deduce terminal_symbol
SS = 17	CP = 137	                    Match  slit
SS = 17	CP = 137	                    Accept slit
SS = 16	CP = 138	                  Accept terminal_symbol
SS = 14	CP = 138	                Accept simple_part
SS = 12	CP = 138	              Accept part
SS = 13	CP = 138	              Match  ,
SS = 13	CP = 138	              Reject ,
SS = 13	CP = 138	              Deduce part
SS = 13	CP = 138	                Predict Failed in CONDITION
SS = 13	CP = 138	                Predict Failed in CONDITION
SS = 13	CP = 138	                Predict Failed in CONDITION
SS = 15	CP = 138	                Deduce simple_part
SS = 17	CP = 138	                  Deduce right_non_terminal_symbol
SS = 18	CP = 138	                    Deduce non_terminal_symbol
SS = 18	CP = 138	                      Match  id
SS = 18	CP = 138	                      Accept id
SS = 18	CP = 139	                    Accept non_terminal_symbol
SS = 17	CP = 139	                  Accept right_non_terminal_symbol
SS = 15	CP = 139	                Accept simple_part
SS = 13	CP = 139	              Accept part
SS = 13	CP = 139	              Match  ,
SS = 13	CP = 139	              Reject ,
SS = 12	CP = 139	              Predict Failed: part
SS = 11	CP = 139	            Accept term
SS = 11	CP = 139	            Match  |
SS = 11	CP = 139	            Reject |
SS = 10	CP = 139	          Accept declaration
SS = 9	CP = 139	          Match  ]
SS = 9	CP = 139	          Accept ]
SS = 9	CP = 140	        Accept alternative_part
SS = 7	CP = 140	      Accept part
SS = 7	CP = 140	      Match  ,
SS = 7	CP = 140	      Reject ,
SS = 6	CP = 140	      Predict Failed: part
SS = 5	CP = 140	    Accept term
SS = 5	CP = 140	    Match  |
SS = 5	CP = 140	    Reject |
SS = 4	CP = 140	  Accept declaration
SS = 4	CP = 140	  Deduce end_op
SS = 5	CP = 140	    Match  ;
SS = 5	CP = 140	    Accept ;
SS = 4	CP = 141	  Accept end_op
SS = 3	CP = 141	Accept statement
SS = 3	CP = 141	Deduce statement
SS = 4	CP = 141	  Deduce non_terminal_symbol
SS = 4	CP = 141	    Match  id
SS = 4	CP = 141	    Accept id
SS = 4	CP = 142	  Accept non_terminal_symbol
SS = 4	CP = 142	  Deduce assign_op
SS = 5	CP = 142	    Match  ::=
SS = 5	CP = 142	    Accept ::=
SS = 4	CP = 143	  Accept assign_op
SS = 4	CP = 143	  Deduce declaration
SS = 5	CP = 143	    Deduce term
SS = 6	CP = 143	      Deduce part
SS = 6	CP = 143	        Predict Failed in CONDITION
SS = 6	CP = 143	        Predict Failed in CONDITION
SS = 6	CP = 143	        Predict Failed in CONDITION
SS = 8	CP = 143	        Deduce simple_part
SS = 8	CP = 143	          Predict Failed in CONDITION
SS = 10	CP = 143	          Deduce terminal_symbol
SS = 11	CP = 143	            Match  slit
SS = 11	CP = 143	            Accept slit
SS = 10	CP = 144	          Accept terminal_symbol
SS = 8	CP = 144	        Accept simple_part
SS = 6	CP = 144	      Accept part
SS = 7	CP = 144	      Match  ,
SS = 7	CP = 144	      Reject ,
SS = 7	CP = 144	      Deduce part
SS = 7	CP = 144	        Predict Failed in CONDITION
SS = 7	CP = 144	        Predict Failed in CONDITION
SS = 7	CP = 144	        Predict Failed in CONDITION
SS = 9	CP = 144	        Deduce simple_part
SS = 9	CP = 144	          Predict Failed in CONDITION
SS = 11	CP = 144	          Deduce terminal_symbol
SS = 12	CP = 144	            Match  slit
SS = 12	CP = 144	            Accept slit
SS = 11	CP = 145	          Accept terminal_symbol
SS = 9	CP = 145	        Accept simple_part
SS = 7	CP = 145	      Accept part
SS = 7	CP = 145	      Match  ,
SS = 7	CP = 145	      Reject ,
SS = 7	CP = 145	      Deduce part
SS = 7	CP = 145	        Predict Failed in CONDITION
SS = 7	CP = 145	        Predict Failed in CONDITION
SS = 9	CP = 145	        Deduce alternative_part
SS = 9	CP = 145	          Match  [
SS = 9	CP = 145	          Accept [
SS = 10	CP = 146	          Deduce declaration
SS = 11	CP = 146	            Deduce term
SS = 12	CP = 146	              Deduce part
SS = 12	CP = 146	                Predict Failed in CONDITION
SS = 12	CP = 146	                Predict Failed in CONDITION
SS = 14	CP = 146	                Deduce alternative_part
SS = 14	CP = 146	                  Match  [
SS = 14	CP = 146	                  Accept [
SS = 15	CP = 147	                  Deduce declaration
SS = 16	CP = 147	                    Deduce term
SS = 17	CP = 147	                      Deduce part
SS = 17	CP = 147	                        Predict Failed in CONDITION
SS = 17	CP = 147	                        Predict Failed in CONDITION
SS = 17	CP = 147	                        Predict Failed in CONDITION
SS = 19	CP = 147	                        Deduce simple_part
SS = 21	CP = 147	                          Deduce right_non_terminal_symbol
SS = 22	CP = 147	                            Deduce non_terminal_symbol
SS = 22	CP = 147	                              Match  id
SS = 22	CP = 147	                              Accept id
SS = 22	CP = 148	                            Accept non_terminal_symbol
SS = 21	CP = 148	                          Accept right_non_terminal_symbol
SS = 19	CP = 148	                        Accept simple_part
SS = 17	CP = 148	                      Accept part
SS = 18	CP = 148	                      Match  ,
SS = 18	CP = 148	                      Reject ,
SS = 17	CP = 148	                      Predict Failed: part
SS = 16	CP = 148	                    Accept term
SS = 16	CP = 148	                    Match  |
SS = 16	CP = 148	                    Reject |
SS = 15	CP = 148	                  Accept declaration
SS = 14	CP = 148	                  Match  ]
SS = 14	CP = 148	                  Accept ]
SS = 14	CP = 149	                Accept alternative_part
SS = 12	CP = 149	              Accept part
SS = 13	CP = 149	              Match  ,
SS = 13	CP = 149	              Reject ,
SS = 13	CP = 149	              Deduce part
SS = 13	CP = 149	                Predict Failed in CONDITION
SS = 13	CP = 149	                Predict Failed in CONDITION
SS = 13	CP = 149	                Predict Failed in CONDITION
SS = 15	CP = 149	                Deduce simple_part
SS = 17	CP = 149	                  Deduce right_non_terminal_symbol
SS = 18	CP = 149	                    Deduce non_terminal_symbol
SS = 18	CP = 149	                      Match  id
SS = 18	CP = 149	                      Accept id
SS = 18	CP = 150	                    Accept non_terminal_symbol
SS = 17	CP = 150	                  Accept right_non_terminal_symbol
SS = 15	CP = 150	                Accept simple_part
SS = 13	CP = 150	              Accept part
SS = 13	CP = 150	              Match  ,
SS = 13	CP = 150	              Reject ,
SS = 12	CP = 150	              Predict Failed: part
SS = 11	CP = 150	            Accept term
SS = 11	CP = 150	            Match  |
SS = 11	CP = 150	            Reject |
SS = 10	CP = 150	          Accept declaration
SS = 9	CP = 150	          Match  ]
SS = 9	CP = 150	          Accept ]
SS = 9	CP = 151	        Accept alternative_part
SS = 7	CP = 151	      Accept part
SS = 7	CP = 151	      Match  ,
SS = 7	CP = 151	      Reject ,
SS = 7	CP = 151	      Deduce part
SS = 7	CP = 151	        Predict Failed in CONDITION
SS = 7	CP = 151	        Predict Failed in CONDITION
SS = 7	CP = 151	        Predict Failed in CONDITION
SS = 9	CP = 151	        Deduce simple_part
SS = 9	CP = 151	          Predict Failed in CONDITION
SS = 11	CP = 151	          Deduce terminal_symbol
SS = 12	CP = 151	            Match  slit
SS = 12	CP = 151	            Accept slit
SS = 11	CP = 152	          Accept terminal_symbol
SS = 9	CP = 152	        Accept simple_part
SS = 7	CP = 152	      Accept part
SS = 7	CP = 152	      Match  ,
SS = 7	CP = 152	      Reject ,
SS = 7	CP = 152	      Deduce part
SS = 7	CP = 152	        Predict Failed in CONDITION
SS = 7	CP = 152	        Predict Failed in CONDITION
SS = 9	CP = 152	        Deduce alternative_part
SS = 9	CP = 152	          Match  [
SS = 9	CP = 152	          Accept [
SS = 10	CP = 153	          Deduce declaration
SS = 11	CP = 153	            Deduce term
SS = 12	CP = 153	              Deduce part
SS = 12	CP = 153	                Predict Failed in CONDITION
SS = 12	CP = 153	                Predict Failed in CONDITION
SS = 12	CP = 153	                Predict Failed in CONDITION
SS = 14	CP = 153	                Deduce simple_part
SS = 16	CP = 153	                  Deduce right_non_terminal_symbol
SS = 17	CP = 153	                    Deduce non_terminal_symbol
SS = 17	CP = 153	                      Match  id
SS = 17	CP = 153	                      Accept id
SS = 17	CP = 154	                    Accept non_terminal_symbol
SS = 16	CP = 154	                  Accept right_non_terminal_symbol
SS = 14	CP = 154	                Accept simple_part
SS = 12	CP = 154	              Accept part
SS = 13	CP = 154	              Match  ,
SS = 13	CP = 154	              Reject ,
SS = 12	CP = 154	              Predict Failed: part
SS = 11	CP = 154	            Accept term
SS = 11	CP = 154	            Match  |
SS = 11	CP = 154	            Reject |
SS = 10	CP = 154	          Accept declaration
SS = 9	CP = 154	          Match  ]
SS = 9	CP = 154	          Accept ]
SS = 9	CP = 155	        Accept alternative_part
SS = 7	CP = 155	      Accept part
SS = 7	CP = 155	      Match  ,
SS = 7	CP = 155	      Reject ,
SS = 7	CP = 155	      Deduce part
SS = 7	CP = 155	        Predict Failed in CONDITION
SS = 7	CP = 155	        Predict Failed in CONDITION
SS = 7	CP = 155	        Predict Failed in CONDITION
SS = 9	CP = 155	        Deduce simple_part
SS = 9	CP = 155	          Predict Failed in CONDITION
SS = 11	CP = 155	          Deduce terminal_symbol
SS = 12	CP = 155	            Match  slit
SS = 12	CP = 155	            Accept slit
SS = 11	CP = 156	          Accept terminal_symbol
SS = 9	CP = 156	        Accept simple_part
SS = 7	CP = 156	      Accept part
SS = 7	CP = 156	      Match  ,
SS = 7	CP = 156	      Reject ,
SS = 7	CP = 156	      Deduce part
SS = 7	CP = 156	        Predict Failed in CONDITION
SS = 7	CP = 156	        Predict Failed in CONDITION
SS = 9	CP = 156	        Deduce alternative_part
SS = 9	CP = 156	          Match  [
SS = 9	CP = 156	          Accept [
SS = 10	CP = 157	          Deduce declaration
SS = 11	CP = 157	            Deduce term
SS = 12	CP = 157	              Deduce part
SS = 12	CP = 157	                Predict Failed in CONDITION
SS = 12	CP = 157	                Predict Failed in CONDITION
SS = 12	CP = 157	                Predict Failed in CONDITION
SS = 14	CP = 157	                Deduce simple_part
SS = 16	CP = 157	                  Deduce right_non_terminal_symbol
SS = 17	CP = 157	                    Deduce non_terminal_symbol
SS = 17	CP = 157	                      Match  id
SS = 17	CP = 157	                      Accept id
SS = 17	CP = 158	                    Accept non_terminal_symbol
SS = 16	CP = 158	                  Accept right_non_terminal_symbol
SS = 14	CP = 158	                Accept simple_part
SS = 12	CP = 158	              Accept part
SS = 13	CP = 158	              Match  ,
SS = 13	CP = 158	              Reject ,
SS = 12	CP = 158	              Predict Failed: part
SS = 11	CP = 158	            Accept term
SS = 11	CP = 158	            Match  |
SS = 11	CP = 158	            Reject |
SS = 10	CP = 158	          Accept declaration
SS = 9	CP = 158	          Match  ]
SS = 9	CP = 158	          Accept ]
SS = 9	CP = 159	        Accept alternative_part
SS = 7	CP = 159	      Accept part
SS = 7	CP = 159	      Match  ,
SS = 7	CP = 159	      Reject ,
SS = 7	CP = 159	      Deduce part
SS = 7	CP = 159	        Predict Failed in CONDITION
SS = 7	CP = 159	        Predict Failed in CONDITION
SS = 7	CP = 159	        Predict Failed in CONDITION
SS = 9	CP = 159	        Deduce simple_part
SS = 9	CP = 159	          Predict Failed in CONDITION
SS = 11	CP = 159	          Deduce terminal_symbol
SS = 12	CP = 159	            Match  slit
SS = 12	CP = 159	            Accept slit
SS = 11	CP = 160	          Accept terminal_symbol
SS = 9	CP = 160	        Accept simple_part
SS = 7	CP = 160	      Accept part
SS = 7	CP = 160	      Match  ,
SS = 7	CP = 160	      Reject ,
SS = 7	CP = 160	      Deduce part
SS = 7	CP = 160	        Predict Failed in CONDITION
SS = 7	CP = 160	        Predict Failed in CONDITION
SS = 7	CP = 160	        Predict Failed in CONDITION
SS = 9	CP = 160	        Deduce simple_part
SS = 11	CP = 160	          Deduce right_non_terminal_symbol
SS = 12	CP = 160	            Deduce non_terminal_symbol
SS = 12	CP = 160	              Match  id
SS = 12	CP = 160	              Accept id
SS = 12	CP = 161	            Accept non_terminal_symbol
SS = 11	CP = 161	          Accept right_non_terminal_symbol
SS = 9	CP = 161	        Accept simple_part
SS = 7	CP = 161	      Accept part
SS = 7	CP = 161	      Match  ,
SS = 7	CP = 161	      Reject ,
SS = 6	CP = 161	      Predict Failed: part
SS = 5	CP = 161	    Accept term
SS = 5	CP = 161	    Match  |
SS = 5	CP = 161	    Reject |
SS = 4	CP = 161	  Accept declaration
SS = 4	CP = 161	  Deduce end_op
SS = 5	CP = 161	    Match  ;
SS = 5	CP = 161	    Accept ;
SS = 4	CP = 162	  Accept end_op
SS = 3	CP = 162	Accept statement
SS = 3	CP = 162	Deduce statement
SS = 4	CP = 162	  Deduce non_terminal_symbol
SS = 4	CP = 162	    Match  id
SS = 4	CP = 162	    Accept id
SS = 4	CP = 163	  Accept non_terminal_symbol
SS = 4	CP = 163	  Deduce assign_op
SS = 5	CP = 163	    Match  ::=
SS = 5	CP = 163	    Accept ::=
SS = 4	CP = 164	  Accept assign_op
SS = 4	CP = 164	  Deduce declaration
SS = 5	CP = 164	    Deduce term
SS = 6	CP = 164	      Deduce part
SS = 6	CP = 164	        Predict Failed in CONDITION
SS = 6	CP = 164	        Predict Failed in CONDITION
SS = 6	CP = 164	        Predict Failed in CONDITION
SS = 8	CP = 164	        Deduce simple_part
SS = 8	CP = 164	          Predict Failed in CONDITION
SS = 10	CP = 164	          Deduce terminal_symbol
SS = 11	CP = 164	            Match  slit
SS = 11	CP = 164	            Accept slit
SS = 10	CP = 165	          Accept terminal_symbol
SS = 8	CP = 165	        Accept simple_part
SS = 6	CP = 165	      Accept part
SS = 7	CP = 165	      Match  ,
SS = 7	CP = 165	      Reject ,
SS = 7	CP = 165	      Deduce part
SS = 7	CP = 165	        Predict Failed in CONDITION
SS = 7	CP = 165	        Predict Failed in CONDITION
SS = 7	CP = 165	        Predict Failed in CONDITION
SS = 9	CP = 165	        Deduce simple_part
SS = 11	CP = 165	          Deduce right_non_terminal_symbol
SS = 12	CP = 165	            Deduce non_terminal_symbol
SS = 12	CP = 165	              Match  id
SS = 12	CP = 165	              Accept id
SS = 12	CP = 166	            Accept non_terminal_symbol
SS = 11	CP = 166	          Accept right_non_terminal_symbol
SS = 9	CP = 166	        Accept simple_part
SS = 7	CP = 166	      Accept part
SS = 7	CP = 166	      Match  ,
SS = 7	CP = 166	      Reject ,
SS = 6	CP = 166	      Predict Failed: part
SS = 5	CP = 166	    Accept term
SS = 5	CP = 166	    Match  |
SS = 5	CP = 166	    Reject |
SS = 4	CP = 166	  Accept declaration
SS = 4	CP = 166	  Deduce end_op
SS = 5	CP = 166	    Match  ;
SS = 5	CP = 166	    Accept ;
SS = 4	CP = 167	  Accept end_op
SS = 3	CP = 167	Accept statement
SS = 3	CP = 167	Deduce statement
SS = 4	CP = 167	  Deduce non_terminal_symbol
SS = 4	CP = 167	    Match  id
SS = 4	CP = 167	    Accept id
SS = 4	CP = 168	  Accept non_terminal_symbol
SS = 4	CP = 168	  Deduce assign_op
SS = 5	CP = 168	    Match  ::=
SS = 5	CP = 168	    Accept ::=
SS = 4	CP = 169	  Accept assign_op
SS = 4	CP = 169	  Deduce declaration
SS = 5	CP = 169	    Deduce term
SS = 6	CP = 169	      Deduce part
SS = 6	CP = 169	        Predict Failed in CONDITION
SS = 6	CP = 169	        Predict Failed in CONDITION
SS = 6	CP = 169	        Predict Failed in CONDITION
SS = 8	CP = 169	        Deduce simple_part
SS = 10	CP = 169	          Deduce right_non_terminal_symbol
SS = 11	CP = 169	            Deduce non_terminal_symbol
SS = 11	CP = 169	              Match  id
SS = 11	CP = 169	              Accept id
SS = 11	CP = 170	            Accept non_terminal_symbol
SS = 10	CP = 170	          Accept right_non_terminal_symbol
SS = 8	CP = 170	        Accept simple_part
SS = 6	CP = 170	      Accept part
SS = 7	CP = 170	      Match  ,
SS = 7	CP = 170	      Reject ,
SS = 7	CP = 170	      Deduce part
SS = 9	CP = 170	        Deduce repeat_part
SS = 9	CP = 170	          Match  {
SS = 9	CP = 170	          Accept {
SS = 10	CP = 171	          Deduce declaration
SS = 11	CP = 171	            Deduce term
SS = 12	CP = 171	              Deduce part
SS = 12	CP = 171	                Predict Failed in CONDITION
SS = 12	CP = 171	                Predict Failed in CONDITION
SS = 12	CP = 171	                Predict Failed in CONDITION
SS = 14	CP = 171	                Deduce simple_part
SS = 14	CP = 171	                  Predict Failed in CONDITION
SS = 16	CP = 171	                  Deduce terminal_symbol
SS = 17	CP = 171	                    Match  slit
SS = 17	CP = 171	                    Accept slit
SS = 16	CP = 172	                  Accept terminal_symbol
SS = 14	CP = 172	                Accept simple_part
SS = 12	CP = 172	              Accept part
SS = 13	CP = 172	              Match  ,
SS = 13	CP = 172	              Reject ,
SS = 13	CP = 172	              Deduce part
SS = 13	CP = 172	                Predict Failed in CONDITION
SS = 13	CP = 172	                Predict Failed in CONDITION
SS = 13	CP = 172	                Predict Failed in CONDITION
SS = 15	CP = 172	                Deduce simple_part
SS = 17	CP = 172	                  Deduce right_non_terminal_symbol
SS = 18	CP = 172	                    Deduce non_terminal_symbol
SS = 18	CP = 172	                      Match  id
SS = 18	CP = 172	                      Accept id
SS = 18	CP = 173	                    Accept non_terminal_symbol
SS = 17	CP = 173	                  Accept right_non_terminal_symbol
SS = 15	CP = 173	                Accept simple_part
SS = 13	CP = 173	              Accept part
SS = 13	CP = 173	              Match  ,
SS = 13	CP = 173	              Reject ,
SS = 12	CP = 173	              Predict Failed: part
SS = 11	CP = 173	            Accept term
SS = 11	CP = 173	            Match  |
SS = 11	CP = 173	            Reject |
SS = 10	CP = 173	          Accept declaration
SS = 9	CP = 173	          Match  }
SS = 9	CP = 173	          Accept }
SS = 9	CP = 174	        Accept repeat_part
SS = 7	CP = 174	      Accept part
SS = 7	CP = 174	      Match  ,
SS = 7	CP = 174	      Reject ,
SS = 6	CP = 174	      Predict Failed: part
SS = 5	CP = 174	    Accept term
SS = 5	CP = 174	    Match  |
SS = 5	CP = 174	    Reject |
SS = 4	CP = 174	  Accept declaration
SS = 4	CP = 174	  Deduce end_op
SS = 5	CP = 174	    Match  ;
SS = 5	CP = 174	    Accept ;
SS = 4	CP = 175	  Accept end_op
SS = 3	CP = 175	Accept statement
SS = 3	CP = 175	Deduce statement
SS = 4	CP = 175	  Deduce non_terminal_symbol
SS = 4	CP = 175	    Match  id
SS = 4	CP = 175	    Accept id
SS = 4	CP = 176	  Accept non_terminal_symbol
SS = 4	CP = 176	  Deduce assign_op
SS = 5	CP = 176	    Match  ::=
SS = 5	CP = 176	    Accept ::=
SS = 4	CP = 177	  Accept assign_op
SS = 4	CP = 177	  Deduce declaration
SS = 5	CP = 177	    Deduce term
SS = 6	CP = 177	      Deduce part
SS = 6	CP = 177	        Predict Failed in CONDITION
SS = 6	CP = 177	        Predict Failed in CONDITION
SS = 6	CP = 177	        Predict Failed in CONDITION
SS = 8	CP = 177	        Deduce simple_part
SS = 10	CP = 177	          Deduce right_non_terminal_symbol
SS = 11	CP = 177	            Deduce non_terminal_symbol
SS = 11	CP = 177	              Match  id
SS = 11	CP = 177	              Accept id
SS = 11	CP = 178	            Accept non_terminal_symbol
SS = 10	CP = 178	          Accept right_non_terminal_symbol
SS = 8	CP = 178	        Accept simple_part
SS = 6	CP = 178	      Accept part
SS = 7	CP = 178	      Match  ,
SS = 7	CP = 178	      Reject ,
SS = 7	CP = 178	      Deduce part
SS = 7	CP = 178	        Predict Failed in CONDITION
SS = 7	CP = 178	        Predict Failed in CONDITION
SS = 9	CP = 178	        Deduce alternative_part
SS = 9	CP = 178	          Match  [
SS = 9	CP = 178	          Accept [
SS = 10	CP = 179	          Deduce declaration
SS = 11	CP = 179	            Deduce term
SS = 12	CP = 179	              Deduce part
SS = 12	CP = 179	                Predict Failed in CONDITION
SS = 12	CP = 179	                Predict Failed in CONDITION
SS = 12	CP = 179	                Predict Failed in CONDITION
SS = 14	CP = 179	                Deduce simple_part
SS = 16	CP = 179	                  Deduce right_non_terminal_symbol
SS = 17	CP = 179	                    Deduce non_terminal_symbol
SS = 17	CP = 179	                      Match  id
SS = 17	CP = 179	                      Accept id
SS = 17	CP = 180	                    Accept non_terminal_symbol
SS = 16	CP = 180	                  Accept right_non_terminal_symbol
SS = 14	CP = 180	                Accept simple_part
SS = 12	CP = 180	              Accept part
SS = 13	CP = 180	              Match  ,
SS = 13	CP = 180	              Reject ,
SS = 13	CP = 180	              Deduce part
SS = 13	CP = 180	                Predict Failed in CONDITION
SS = 13	CP = 180	                Predict Failed in CONDITION
SS = 13	CP = 180	                Predict Failed in CONDITION
SS = 15	CP = 180	                Deduce simple_part
SS = 17	CP = 180	                  Deduce right_non_terminal_symbol
SS = 18	CP = 180	                    Deduce non_terminal_symbol
SS = 18	CP = 180	                      Match  id
SS = 18	CP = 180	                      Accept id
SS = 18	CP = 181	                    Accept non_terminal_symbol
SS = 17	CP = 181	                  Accept right_non_terminal_symbol
SS = 15	CP = 181	                Accept simple_part
SS = 13	CP = 181	              Accept part
SS = 13	CP = 181	              Match  ,
SS = 13	CP = 181	              Reject ,
SS = 12	CP = 181	              Predict Failed: part
SS = 11	CP = 181	            Accept term
SS = 11	CP = 181	            Match  |
SS = 11	CP = 181	            Reject |
SS = 10	CP = 181	          Accept declaration
SS = 9	CP = 181	          Match  ]
SS = 9	CP = 181	          Accept ]
SS = 9	CP = 182	        Accept alternative_part
SS = 7	CP = 182	      Accept part
SS = 7	CP = 182	      Match  ,
SS = 7	CP = 182	      Reject ,
SS = 6	CP = 182	      Predict Failed: part
SS = 5	CP = 182	    Accept term
SS = 5	CP = 182	    Match  |
SS = 5	CP = 182	    Reject |
SS = 4	CP = 182	  Accept declaration
SS = 4	CP = 182	  Deduce end_op
SS = 5	CP = 182	    Match  ;
SS = 5	CP = 182	    Accept ;
SS = 4	CP = 183	  Accept end_op
SS = 3	CP = 183	Accept statement
SS = 3	CP = 183	Deduce statement
SS = 4	CP = 183	  Deduce non_terminal_symbol
SS = 4	CP = 183	    Match  id
SS = 4	CP = 183	    Accept id
SS = 4	CP = 184	  Accept non_terminal_symbol
SS = 4	CP = 184	  Deduce assign_op
SS = 5	CP = 184	    Match  ::=
SS = 5	CP = 184	    Accept ::=
SS = 4	CP = 185	  Accept assign_op
SS = 4	CP = 185	  Deduce declaration
SS = 5	CP = 185	    Deduce term
SS = 6	CP = 185	      Deduce part
SS = 6	CP = 185	        Predict Failed in CONDITION
SS = 6	CP = 185	        Predict Failed in CONDITION
SS = 6	CP = 185	        Predict Failed in CONDITION
SS = 8	CP = 185	        Deduce simple_part
SS = 8	CP = 185	          Predict Failed in CONDITION
SS = 10	CP = 185	          Deduce terminal_symbol
SS = 11	CP = 185	            Match  slit
SS = 11	CP = 185	            Accept slit
SS = 10	CP = 186	          Accept terminal_symbol
SS = 8	CP = 186	        Accept simple_part
SS = 6	CP = 186	      Accept part
SS = 7	CP = 186	      Match  ,
SS = 7	CP = 186	      Reject ,
SS = 6	CP = 186	      Predict Failed: part
SS = 5	CP = 186	    Accept term
SS = 5	CP = 186	    Match  |
SS = 5	CP = 186	    Accept |
SS = 6	CP = 187	    Deduce term
SS = 7	CP = 187	      Deduce part
SS = 7	CP = 187	        Predict Failed in CONDITION
SS = 7	CP = 187	        Predict Failed in CONDITION
SS = 7	CP = 187	        Predict Failed in CONDITION
SS = 9	CP = 187	        Deduce simple_part
SS = 9	CP = 187	          Predict Failed in CONDITION
SS = 11	CP = 187	          Deduce terminal_symbol
SS = 12	CP = 187	            Match  slit
SS = 12	CP = 187	            Accept slit
SS = 11	CP = 188	          Accept terminal_symbol
SS = 9	CP = 188	        Accept simple_part
SS = 7	CP = 188	      Accept part
SS = 8	CP = 188	      Match  ,
SS = 8	CP = 188	      Reject ,
SS = 7	CP = 188	      Predict Failed: part
SS = 6	CP = 188	    Accept term
SS = 5	CP = 188	    Match  |
SS = 5	CP = 188	    Accept |
SS = 6	CP = 189	    Deduce term
SS = 7	CP = 189	      Deduce part
SS = 7	CP = 189	        Predict Failed in CONDITION
SS = 7	CP = 189	        Predict Failed in CONDITION
SS = 7	CP = 189	        Predict Failed in CONDITION
SS = 9	CP = 189	        Deduce simple_part
SS = 9	CP = 189	          Predict Failed in CONDITION
SS = 11	CP = 189	          Deduce terminal_symbol
SS = 12	CP = 189	            Match  slit
SS = 12	CP = 189	            Accept slit
SS = 11	CP = 190	          Accept terminal_symbol
SS = 9	CP = 190	        Accept simple_part
SS = 7	CP = 190	      Accept part
SS = 8	CP = 190	      Match  ,
SS = 8	CP = 190	      Reject ,
SS = 7	CP = 190	      Predict Failed: part
SS = 6	CP = 190	    Accept term
SS = 5	CP = 190	    Match  |
SS = 5	CP = 190	    Accept |
SS = 6	CP = 191	    Deduce term
SS = 7	CP = 191	      Deduce part
SS = 7	CP = 191	        Predict Failed in CONDITION
SS = 7	CP = 191	        Predict Failed in CONDITION
SS = 7	CP = 191	        Predict Failed in CONDITION
SS = 9	CP = 191	        Deduce simple_part
SS = 9	CP = 191	          Predict Failed in CONDITION
SS = 11	CP = 191	          Deduce terminal_symbol
SS = 12	CP = 191	            Match  slit
SS = 12	CP = 191	            Accept slit
SS = 11	CP = 192	          Accept terminal_symbol
SS = 9	CP = 192	        Accept simple_part
SS = 7	CP = 192	      Accept part
SS = 8	CP = 192	      Match  ,
SS = 8	CP = 192	      Reject ,
SS = 7	CP = 192	      Predict Failed: part
SS = 6	CP = 192	    Accept term
SS = 5	CP = 192	    Match  |
SS = 5	CP = 192	    Accept |
SS = 6	CP = 193	    Deduce term
SS = 7	CP = 193	      Deduce part
SS = 7	CP = 193	        Predict Failed in CONDITION
SS = 7	CP = 193	        Predict Failed in CONDITION
SS = 7	CP = 193	        Predict Failed in CONDITION
SS = 9	CP = 193	        Deduce simple_part
SS = 9	CP = 193	          Predict Failed in CONDITION
SS = 11	CP = 193	          Deduce terminal_symbol
SS = 12	CP = 193	            Match  slit
SS = 12	CP = 193	            Accept slit
SS = 11	CP = 194	          Accept terminal_symbol
SS = 9	CP = 194	        Accept simple_part
SS = 7	CP = 194	      Accept part
SS = 8	CP = 194	      Match  ,
SS = 8	CP = 194	      Reject ,
SS = 7	CP = 194	      Predict Failed: part
SS = 6	CP = 194	    Accept term
SS = 5	CP = 194	    Match  |
SS = 5	CP = 194	    Reject |
SS = 4	CP = 194	  Accept declaration
SS = 4	CP = 194	  Deduce end_op
SS = 5	CP = 194	    Match  ;
SS = 5	CP = 194	    Accept ;
SS = 4	CP = 195	  Accept end_op
SS = 3	CP = 195	Accept statement
SS = 3	CP = 195	Deduce statement
SS = 4	CP = 195	  Deduce non_terminal_symbol
SS = 4	CP = 195	    Match  id
SS = 4	CP = 195	    Accept id
SS = 4	CP = 196	  Accept non_terminal_symbol
SS = 4	CP = 196	  Deduce assign_op
SS = 5	CP = 196	    Match  ::=
SS = 5	CP = 196	    Accept ::=
SS = 4	CP = 197	  Accept assign_op
SS = 4	CP = 197	  Deduce declaration
SS = 5	CP = 197	    Deduce term
SS = 6	CP = 197	      Deduce part
SS = 6	CP = 197	        Predict Failed in CONDITION
SS = 6	CP = 197	        Predict Failed in CONDITION
SS = 6	CP = 197	        Predict Failed in CONDITION
SS = 8	CP = 197	        Deduce simple_part
SS = 10	CP = 197	          Deduce right_non_terminal_symbol
SS = 11	CP = 197	            Deduce non_terminal_symbol
SS = 11	CP = 197	              Match  id
SS = 11	CP = 197	              Accept id
SS = 11	CP = 198	            Accept non_terminal_symbol
SS = 10	CP = 198	          Accept right_non_terminal_symbol
SS = 8	CP = 198	        Accept simple_part
SS = 6	CP = 198	      Accept part
SS = 7	CP = 198	      Match  ,
SS = 7	CP = 198	      Reject ,
SS = 7	CP = 198	      Deduce part
SS = 7	CP = 198	        Predict Failed in CONDITION
SS = 7	CP = 198	        Predict Failed in CONDITION
SS = 9	CP = 198	        Deduce alternative_part
SS = 9	CP = 198	          Match  [
SS = 9	CP = 198	          Accept [
SS = 10	CP = 199	          Deduce declaration
SS = 11	CP = 199	            Deduce term
SS = 12	CP = 199	              Deduce part
SS = 12	CP = 199	                Predict Failed in CONDITION
SS = 12	CP = 199	                Predict Failed in CONDITION
SS = 12	CP = 199	                Predict Failed in CONDITION
SS = 14	CP = 199	                Deduce simple_part
SS = 16	CP = 199	                  Deduce right_non_terminal_symbol
SS = 17	CP = 199	                    Deduce non_terminal_symbol
SS = 17	CP = 199	                      Match  id
SS = 17	CP = 199	                      Accept id
SS = 17	CP = 200	                    Accept non_terminal_symbol
SS = 16	CP = 200	                  Accept right_non_terminal_symbol
SS = 14	CP = 200	                Accept simple_part
SS = 12	CP = 200	              Accept part
SS = 13	CP = 200	              Match  ,
SS = 13	CP = 200	              Reject ,
SS = 13	CP = 200	              Deduce part
SS = 13	CP = 200	                Predict Failed in CONDITION
SS = 13	CP = 200	                Predict Failed in CONDITION
SS = 13	CP = 200	                Predict Failed in CONDITION
SS = 15	CP = 200	                Deduce simple_part
SS = 17	CP = 200	                  Deduce right_non_terminal_symbol
SS = 18	CP = 200	                    Deduce non_terminal_symbol
SS = 18	CP = 200	                      Match  id
SS = 18	CP = 200	                      Accept id
SS = 18	CP = 201	                    Accept non_terminal_symbol
SS = 17	CP = 201	                  Accept right_non_terminal_symbol
SS = 15	CP = 201	                Accept simple_part
SS = 13	CP = 201	              Accept part
SS = 13	CP = 201	              Match  ,
SS = 13	CP = 201	              Reject ,
SS = 12	CP = 201	              Predict Failed: part
SS = 11	CP = 201	            Accept term
SS = 11	CP = 201	            Match  |
SS = 11	CP = 201	            Reject |
SS = 10	CP = 201	          Accept declaration
SS = 9	CP = 201	          Match  ]
SS = 9	CP = 201	          Accept ]
SS = 9	CP = 202	        Accept alternative_part
SS = 7	CP = 202	      Accept part
SS = 7	CP = 202	      Match  ,
SS = 7	CP = 202	      Reject ,
SS = 6	CP = 202	      Predict Failed: part
SS = 5	CP = 202	    Accept term
SS = 5	CP = 202	    Match  |
SS = 5	CP = 202	    Reject |
SS = 4	CP = 202	  Accept declaration
SS = 4	CP = 202	  Deduce end_op
SS = 5	CP = 202	    Match  ;
SS = 5	CP = 202	    Accept ;
SS = 4	CP = 203	  Accept end_op
SS = 3	CP = 203	Accept statement
SS = 3	CP = 203	Deduce statement
SS = 4	CP = 203	  Deduce non_terminal_symbol
SS = 4	CP = 203	    Match  id
SS = 4	CP = 203	    Accept id
SS = 4	CP = 204	  Accept non_terminal_symbol
SS = 4	CP = 204	  Deduce assign_op
SS = 5	CP = 204	    Match  ::=
SS = 5	CP = 204	    Accept ::=
SS = 4	CP = 205	  Accept assign_op
SS = 4	CP = 205	  Deduce declaration
SS = 5	CP = 205	    Deduce term
SS = 6	CP = 205	      Deduce part
SS = 6	CP = 205	        Predict Failed in CONDITION
SS = 6	CP = 205	        Predict Failed in CONDITION
SS = 6	CP = 205	        Predict Failed in CONDITION
SS = 8	CP = 205	        Deduce simple_part
SS = 8	CP = 205	          Predict Failed in CONDITION
SS = 10	CP = 205	          Deduce terminal_symbol
SS = 11	CP = 205	            Match  slit
SS = 11	CP = 205	            Accept slit
SS = 10	CP = 206	          Accept terminal_symbol
SS = 8	CP = 206	        Accept simple_part
SS = 6	CP = 206	      Accept part
SS = 7	CP = 206	      Match  ,
SS = 7	CP = 206	      Reject ,
SS = 6	CP = 206	      Predict Failed: part
SS = 5	CP = 206	    Accept term
SS = 5	CP = 206	    Match  |
SS = 5	CP = 206	    Accept |
SS = 6	CP = 207	    Deduce term
SS = 7	CP = 207	      Deduce part
SS = 7	CP = 207	        Predict Failed in CONDITION
SS = 7	CP = 207	        Predict Failed in CONDITION
SS = 7	CP = 207	        Predict Failed in CONDITION
SS = 9	CP = 207	        Deduce simple_part
SS = 9	CP = 207	          Predict Failed in CONDITION
SS = 11	CP = 207	          Deduce terminal_symbol
SS = 12	CP = 207	            Match  slit
SS = 12	CP = 207	            Accept slit
SS = 11	CP = 208	          Accept terminal_symbol
SS = 9	CP = 208	        Accept simple_part
SS = 7	CP = 208	      Accept part
SS = 8	CP = 208	      Match  ,
SS = 8	CP = 208	      Reject ,
SS = 7	CP = 208	      Predict Failed: part
SS = 6	CP = 208	    Accept term
SS = 5	CP = 208	    Match  |
SS = 5	CP = 208	    Reject |
SS = 4	CP = 208	  Accept declaration
SS = 4	CP = 208	  Deduce end_op
SS = 5	CP = 208	    Match  ;
SS = 5	CP = 208	    Accept ;
SS = 4	CP = 209	  Accept end_op
SS = 3	CP = 209	Accept statement
SS = 3	CP = 209	Deduce statement
SS = 4	CP = 209	  Deduce non_terminal_symbol
SS = 4	CP = 209	    Match  id
SS = 4	CP = 209	    Accept id
SS = 4	CP = 210	  Accept non_terminal_symbol
SS = 4	CP = 210	  Deduce assign_op
SS = 5	CP = 210	    Match  ::=
SS = 5	CP = 210	    Accept ::=
SS = 4	CP = 211	  Accept assign_op
SS = 4	CP = 211	  Deduce declaration
SS = 5	CP = 211	    Deduce term
SS = 6	CP = 211	      Deduce part
SS = 6	CP = 211	        Predict Failed in CONDITION
SS = 6	CP = 211	        Predict Failed in CONDITION
SS = 6	CP = 211	        Predict Failed in CONDITION
SS = 8	CP = 211	        Deduce simple_part
SS = 10	CP = 211	          Deduce right_non_terminal_symbol
SS = 11	CP = 211	            Deduce non_terminal_symbol
SS = 11	CP = 211	              Match  id
SS = 11	CP = 211	              Accept id
SS = 11	CP = 212	            Accept non_terminal_symbol
SS = 10	CP = 212	          Accept right_non_terminal_symbol
SS = 8	CP = 212	        Accept simple_part
SS = 6	CP = 212	      Accept part
SS = 7	CP = 212	      Match  ,
SS = 7	CP = 212	      Reject ,
SS = 7	CP = 212	      Deduce part
SS = 7	CP = 212	        Predict Failed in CONDITION
SS = 7	CP = 212	        Predict Failed in CONDITION
SS = 9	CP = 212	        Deduce alternative_part
SS = 9	CP = 212	          Match  [
SS = 9	CP = 212	          Accept [
SS = 10	CP = 213	          Deduce declaration
SS = 11	CP = 213	            Deduce term
SS = 12	CP = 213	              Deduce part
SS = 12	CP = 213	                Predict Failed in CONDITION
SS = 12	CP = 213	                Predict Failed in CONDITION
SS = 12	CP = 213	                Predict Failed in CONDITION
SS = 14	CP = 213	                Deduce simple_part
SS = 16	CP = 213	                  Deduce right_non_terminal_symbol
SS = 17	CP = 213	                    Deduce non_terminal_symbol
SS = 17	CP = 213	                      Match  id
SS = 17	CP = 213	                      Accept id
SS = 17	CP = 214	                    Accept non_terminal_symbol
SS = 16	CP = 214	                  Accept right_non_terminal_symbol
SS = 14	CP = 214	                Accept simple_part
SS = 12	CP = 214	              Accept part
SS = 13	CP = 214	              Match  ,
SS = 13	CP = 214	              Reject ,
SS = 13	CP = 214	              Deduce part
SS = 13	CP = 214	                Predict Failed in CONDITION
SS = 13	CP = 214	                Predict Failed in CONDITION
SS = 13	CP = 214	                Predict Failed in CONDITION
SS = 15	CP = 214	                Deduce simple_part
SS = 17	CP = 214	                  Deduce right_non_terminal_symbol
SS = 18	CP = 214	                    Deduce non_terminal_symbol
SS = 18	CP = 214	                      Match  id
SS = 18	CP = 214	                      Accept id
SS = 18	CP = 215	                    Accept non_terminal_symbol
SS = 17	CP = 215	                  Accept right_non_terminal_symbol
SS = 15	CP = 215	                Accept simple_part
SS = 13	CP = 215	              Accept part
SS = 13	CP = 215	              Match  ,
SS = 13	CP = 215	              Reject ,
SS = 12	CP = 215	              Predict Failed: part
SS = 11	CP = 215	            Accept term
SS = 11	CP = 215	            Match  |
SS = 11	CP = 215	            Reject |
SS = 10	CP = 215	          Accept declaration
SS = 9	CP = 215	          Match  ]
SS = 9	CP = 215	          Accept ]
SS = 9	CP = 216	        Accept alternative_part
SS = 7	CP = 216	      Accept part
SS = 7	CP = 216	      Match  ,
SS = 7	CP = 216	      Reject ,
SS = 6	CP = 216	      Predict Failed: part
SS = 5	CP = 216	    Accept term
SS = 5	CP = 216	    Match  |
SS = 5	CP = 216	    Reject |
SS = 4	CP = 216	  Accept declaration
SS = 4	CP = 216	  Deduce end_op
SS = 5	CP = 216	    Match  ;
SS = 5	CP = 216	    Accept ;
SS = 4	CP = 217	  Accept end_op
SS = 3	CP = 217	Accept statement
SS = 3	CP = 217	Deduce statement
SS = 4	CP = 217	  Deduce non_terminal_symbol
SS = 4	CP = 217	    Match  id
SS = 4	CP = 217	    Accept id
SS = 4	CP = 218	  Accept non_terminal_symbol
SS = 4	CP = 218	  Deduce assign_op
SS = 5	CP = 218	    Match  ::=
SS = 5	CP = 218	    Accept ::=
SS = 4	CP = 219	  Accept assign_op
SS = 4	CP = 219	  Deduce declaration
SS = 5	CP = 219	    Deduce term
SS = 6	CP = 219	      Deduce part
SS = 6	CP = 219	        Predict Failed in CONDITION
SS = 6	CP = 219	        Predict Failed in CONDITION
SS = 6	CP = 219	        Predict Failed in CONDITION
SS = 8	CP = 219	        Deduce simple_part
SS = 8	CP = 219	          Predict Failed in CONDITION
SS = 10	CP = 219	          Deduce terminal_symbol
SS = 11	CP = 219	            Match  slit
SS = 11	CP = 219	            Accept slit
SS = 10	CP = 220	          Accept terminal_symbol
SS = 8	CP = 220	        Accept simple_part
SS = 6	CP = 220	      Accept part
SS = 7	CP = 220	      Match  ,
SS = 7	CP = 220	      Reject ,
SS = 6	CP = 220	      Predict Failed: part
SS = 5	CP = 220	    Accept term
SS = 5	CP = 220	    Match  |
SS = 5	CP = 220	    Accept |
SS = 6	CP = 221	    Deduce term
SS = 7	CP = 221	      Deduce part
SS = 7	CP = 221	        Predict Failed in CONDITION
SS = 7	CP = 221	        Predict Failed in CONDITION
SS = 7	CP = 221	        Predict Failed in CONDITION
SS = 9	CP = 221	        Deduce simple_part
SS = 9	CP = 221	          Predict Failed in CONDITION
SS = 11	CP = 221	          Deduce terminal_symbol
SS = 12	CP = 221	            Match  slit
SS = 12	CP = 221	            Accept slit
SS = 11	CP = 222	          Accept terminal_symbol
SS = 9	CP = 222	        Accept simple_part
SS = 7	CP = 222	      Accept part
SS = 8	CP = 222	      Match  ,
SS = 8	CP = 222	      Reject ,
SS = 7	CP = 222	      Predict Failed: part
SS = 6	CP = 222	    Accept term
SS = 5	CP = 222	    Match  |
SS = 5	CP = 222	    Accept |
SS = 6	CP = 223	    Deduce term
SS = 7	CP = 223	      Deduce part
SS = 7	CP = 223	        Predict Failed in CONDITION
SS = 7	CP = 223	        Predict Failed in CONDITION
SS = 7	CP = 223	        Predict Failed in CONDITION
SS = 9	CP = 223	        Deduce simple_part
SS = 9	CP = 223	          Predict Failed in CONDITION
SS = 11	CP = 223	          Deduce terminal_symbol
SS = 12	CP = 223	            Match  slit
SS = 12	CP = 223	            Accept slit
SS = 11	CP = 224	          Accept terminal_symbol
SS = 9	CP = 224	        Accept simple_part
SS = 7	CP = 224	      Accept part
SS = 8	CP = 224	      Match  ,
SS = 8	CP = 224	      Reject ,
SS = 7	CP = 224	      Predict Failed: part
SS = 6	CP = 224	    Accept term
SS = 5	CP = 224	    Match  |
SS = 5	CP = 224	    Accept |
SS = 6	CP = 225	    Deduce term
SS = 7	CP = 225	      Deduce part
SS = 7	CP = 225	        Predict Failed in CONDITION
SS = 7	CP = 225	        Predict Failed in CONDITION
SS = 7	CP = 225	        Predict Failed in CONDITION
SS = 9	CP = 225	        Deduce simple_part
SS = 9	CP = 225	          Predict Failed in CONDITION
SS = 11	CP = 225	          Deduce terminal_symbol
SS = 12	CP = 225	            Match  slit
SS = 12	CP = 225	            Accept slit
SS = 11	CP = 226	          Accept terminal_symbol
SS = 9	CP = 226	        Accept simple_part
SS = 7	CP = 226	      Accept part
SS = 8	CP = 226	      Match  ,
SS = 8	CP = 226	      Reject ,
SS = 7	CP = 226	      Predict Failed: part
SS = 6	CP = 226	    Accept term
SS = 5	CP = 226	    Match  |
SS = 5	CP = 226	    Reject |
SS = 4	CP = 226	  Accept declaration
SS = 4	CP = 226	  Deduce end_op
SS = 5	CP = 226	    Match  ;
SS = 5	CP = 226	    Accept ;
SS = 4	CP = 227	  Accept end_op
SS = 3	CP = 227	Accept statement
SS = 3	CP = 227	Deduce statement
SS = 4	CP = 227	  Deduce non_terminal_symbol
SS = 4	CP = 227	    Match  id
SS = 4	CP = 227	    Accept id
SS = 4	CP = 228	  Accept non_terminal_symbol
SS = 4	CP = 228	  Deduce assign_op
SS = 5	CP = 228	    Match  ::=
SS = 5	CP = 228	    Accept ::=
SS = 4	CP = 229	  Accept assign_op
SS = 4	CP = 229	  Deduce declaration
SS = 5	CP = 229	    Deduce term
SS = 6	CP = 229	      Deduce part
SS = 6	CP = 229	        Predict Failed in CONDITION
SS = 6	CP = 229	        Predict Failed in CONDITION
SS = 6	CP = 229	        Predict Failed in CONDITION
SS = 8	CP = 229	        Deduce simple_part
SS = 10	CP = 229	          Deduce right_non_terminal_symbol
SS = 11	CP = 229	            Deduce non_terminal_symbol
SS = 11	CP = 229	              Match  id
SS = 11	CP = 229	              Accept id
SS = 11	CP = 230	            Accept non_terminal_symbol
SS = 10	CP = 230	          Accept right_non_terminal_symbol
SS = 8	CP = 230	        Accept simple_part
SS = 6	CP = 230	      Accept part
SS = 7	CP = 230	      Match  ,
SS = 7	CP = 230	      Reject ,
SS = 7	CP = 230	      Deduce part
SS = 7	CP = 230	        Predict Failed in CONDITION
SS = 7	CP = 230	        Predict Failed in CONDITION
SS = 9	CP = 230	        Deduce alternative_part
SS = 9	CP = 230	          Match  [
SS = 9	CP = 230	          Accept [
SS = 10	CP = 231	          Deduce declaration
SS = 11	CP = 231	            Deduce term
SS = 12	CP = 231	              Deduce part
SS = 12	CP = 231	                Predict Failed in CONDITION
SS = 12	CP = 231	                Predict Failed in CONDITION
SS = 12	CP = 231	                Predict Failed in CONDITION
SS = 14	CP = 231	                Deduce simple_part
SS = 16	CP = 231	                  Deduce right_non_terminal_symbol
SS = 17	CP = 231	                    Deduce non_terminal_symbol
SS = 17	CP = 231	                      Match  id
SS = 17	CP = 231	                      Accept id
SS = 17	CP = 232	                    Accept non_terminal_symbol
SS = 16	CP = 232	                  Accept right_non_terminal_symbol
SS = 14	CP = 232	                Accept simple_part
SS = 12	CP = 232	              Accept part
SS = 13	CP = 232	              Match  ,
SS = 13	CP = 232	              Reject ,
SS = 13	CP = 232	              Deduce part
SS = 13	CP = 232	                Predict Failed in CONDITION
SS = 13	CP = 232	                Predict Failed in CONDITION
SS = 13	CP = 232	                Predict Failed in CONDITION
SS = 15	CP = 232	                Deduce simple_part
SS = 17	CP = 232	                  Deduce right_non_terminal_symbol
SS = 18	CP = 232	                    Deduce non_terminal_symbol
SS = 18	CP = 232	                      Match  id
SS = 18	CP = 232	                      Accept id
SS = 18	CP = 233	                    Accept non_terminal_symbol
SS = 17	CP = 233	                  Accept right_non_terminal_symbol
SS = 15	CP = 233	                Accept simple_part
SS = 13	CP = 233	              Accept part
SS = 13	CP = 233	              Match  ,
SS = 13	CP = 233	              Reject ,
SS = 12	CP = 233	              Predict Failed: part
SS = 11	CP = 233	            Accept term
SS = 11	CP = 233	            Match  |
SS = 11	CP = 233	            Reject |
SS = 10	CP = 233	          Accept declaration
SS = 9	CP = 233	          Match  ]
SS = 9	CP = 233	          Accept ]
SS = 9	CP = 234	        Accept alternative_part
SS = 7	CP = 234	      Accept part
SS = 7	CP = 234	      Match  ,
SS = 7	CP = 234	      Reject ,
SS = 6	CP = 234	      Predict Failed: part
SS = 5	CP = 234	    Accept term
SS = 5	CP = 234	    Match  |
SS = 5	CP = 234	    Reject |
SS = 4	CP = 234	  Accept declaration
SS = 4	CP = 234	  Deduce end_op
SS = 5	CP = 234	    Match  ;
SS = 5	CP = 234	    Accept ;
SS = 4	CP = 235	  Accept end_op
SS = 3	CP = 235	Accept statement
SS = 3	CP = 235	Deduce statement
SS = 4	CP = 235	  Deduce non_terminal_symbol
SS = 4	CP = 235	    Match  id
SS = 4	CP = 235	    Accept id
SS = 4	CP = 236	  Accept non_terminal_symbol
SS = 4	CP = 236	  Deduce assign_op
SS = 5	CP = 236	    Match  ::=
SS = 5	CP = 236	    Accept ::=
SS = 4	CP = 237	  Accept assign_op
SS = 4	CP = 237	  Deduce declaration
SS = 5	CP = 237	    Deduce term
SS = 6	CP = 237	      Deduce part
SS = 6	CP = 237	        Predict Failed in CONDITION
SS = 6	CP = 237	        Predict Failed in CONDITION
SS = 6	CP = 237	        Predict Failed in CONDITION
SS = 8	CP = 237	        Deduce simple_part
SS = 8	CP = 237	          Predict Failed in CONDITION
SS = 10	CP = 237	          Deduce terminal_symbol
SS = 11	CP = 237	            Match  slit
SS = 11	CP = 237	            Accept slit
SS = 10	CP = 238	          Accept terminal_symbol
SS = 8	CP = 238	        Accept simple_part
SS = 6	CP = 238	      Accept part
SS = 7	CP = 238	      Match  ,
SS = 7	CP = 238	      Reject ,
SS = 6	CP = 238	      Predict Failed: part
SS = 5	CP = 238	    Accept term
SS = 5	CP = 238	    Match  |
SS = 5	CP = 238	    Accept |
SS = 6	CP = 239	    Deduce term
SS = 7	CP = 239	      Deduce part
SS = 7	CP = 239	        Predict Failed in CONDITION
SS = 7	CP = 239	        Predict Failed in CONDITION
SS = 7	CP = 239	        Predict Failed in CONDITION
SS = 9	CP = 239	        Deduce simple_part
SS = 9	CP = 239	          Predict Failed in CONDITION
SS = 11	CP = 239	          Deduce terminal_symbol
SS = 12	CP = 239	            Match  slit
SS = 12	CP = 239	            Accept slit
SS = 11	CP = 240	          Accept terminal_symbol
SS = 9	CP = 240	        Accept simple_part
SS = 7	CP = 240	      Accept part
SS = 8	CP = 240	      Match  ,
SS = 8	CP = 240	      Reject ,
SS = 7	CP = 240	      Predict Failed: part
SS = 6	CP = 240	    Accept term
SS = 5	CP = 240	    Match  |
SS = 5	CP = 240	    Reject |
SS = 4	CP = 240	  Accept declaration
SS = 4	CP = 240	  Deduce end_op
SS = 5	CP = 240	    Match  ;
SS = 5	CP = 240	    Accept ;
SS = 4	CP = 241	  Accept end_op
SS = 3	CP = 241	Accept statement
SS = 3	CP = 241	Deduce statement
SS = 4	CP = 241	  Deduce non_terminal_symbol
SS = 4	CP = 241	    Match  id
SS = 4	CP = 241	    Accept id
SS = 4	CP = 242	  Accept non_terminal_symbol
SS = 4	CP = 242	  Deduce assign_op
SS = 5	CP = 242	    Match  ::=
SS = 5	CP = 242	    Accept ::=
SS = 4	CP = 243	  Accept assign_op
SS = 4	CP = 243	  Deduce declaration
SS = 5	CP = 243	    Deduce term
SS = 6	CP = 243	      Deduce part
SS = 6	CP = 243	        Predict Failed in CONDITION
SS = 6	CP = 243	        Predict Failed in CONDITION
SS = 6	CP = 243	        Predict Failed in CONDITION
SS = 8	CP = 243	        Deduce simple_part
SS = 10	CP = 243	          Deduce right_non_terminal_symbol
SS = 11	CP = 243	            Deduce non_terminal_symbol
SS = 11	CP = 243	              Match  id
SS = 11	CP = 243	              Accept id
SS = 11	CP = 244	            Accept non_terminal_symbol
SS = 10	CP = 244	          Accept right_non_terminal_symbol
SS = 8	CP = 244	        Accept simple_part
SS = 6	CP = 244	      Accept part
SS = 7	CP = 244	      Match  ,
SS = 7	CP = 244	      Reject ,
SS = 7	CP = 244	      Deduce part
SS = 7	CP = 244	        Predict Failed in CONDITION
SS = 7	CP = 244	        Predict Failed in CONDITION
SS = 9	CP = 244	        Deduce alternative_part
SS = 9	CP = 244	          Match  [
SS = 9	CP = 244	          Accept [
SS = 10	CP = 245	          Deduce declaration
SS = 11	CP = 245	            Deduce term
SS = 12	CP = 245	              Deduce part
SS = 12	CP = 245	                Predict Failed in CONDITION
SS = 12	CP = 245	                Predict Failed in CONDITION
SS = 12	CP = 245	                Predict Failed in CONDITION
SS = 14	CP = 245	                Deduce simple_part
SS = 16	CP = 245	                  Deduce right_non_terminal_symbol
SS = 17	CP = 245	                    Deduce non_terminal_symbol
SS = 17	CP = 245	                      Match  id
SS = 17	CP = 245	                      Accept id
SS = 17	CP = 246	                    Accept non_terminal_symbol
SS = 16	CP = 246	                  Accept right_non_terminal_symbol
SS = 14	CP = 246	                Accept simple_part
SS = 12	CP = 246	              Accept part
SS = 13	CP = 246	              Match  ,
SS = 13	CP = 246	              Reject ,
SS = 13	CP = 246	              Deduce part
SS = 13	CP = 246	                Predict Failed in CONDITION
SS = 13	CP = 246	                Predict Failed in CONDITION
SS = 13	CP = 246	                Predict Failed in CONDITION
SS = 15	CP = 246	                Deduce simple_part
SS = 17	CP = 246	                  Deduce right_non_terminal_symbol
SS = 18	CP = 246	                    Deduce non_terminal_symbol
SS = 18	CP = 246	                      Match  id
SS = 18	CP = 246	                      Accept id
SS = 18	CP = 247	                    Accept non_terminal_symbol
SS = 17	CP = 247	                  Accept right_non_terminal_symbol
SS = 15	CP = 247	                Accept simple_part
SS = 13	CP = 247	              Accept part
SS = 13	CP = 247	              Match  ,
SS = 13	CP = 247	              Reject ,
SS = 12	CP = 247	              Predict Failed: part
SS = 11	CP = 247	            Accept term
SS = 11	CP = 247	            Match  |
SS = 11	CP = 247	            Reject |
SS = 10	CP = 247	          Accept declaration
SS = 9	CP = 247	          Match  ]
SS = 9	CP = 247	          Accept ]
SS = 9	CP = 248	        Accept alternative_part
SS = 7	CP = 248	      Accept part
SS = 7	CP = 248	      Match  ,
SS = 7	CP = 248	      Reject ,
SS = 6	CP = 248	      Predict Failed: part
SS = 5	CP = 248	    Accept term
SS = 5	CP = 248	    Match  |
SS = 5	CP = 248	    Reject |
SS = 4	CP = 248	  Accept declaration
SS = 4	CP = 248	  Deduce end_op
SS = 5	CP = 248	    Match  ;
SS = 5	CP = 248	    Accept ;
SS = 4	CP = 249	  Accept end_op
SS = 3	CP = 249	Accept statement
SS = 3	CP = 249	Deduce statement
SS = 4	CP = 249	  Deduce non_terminal_symbol
SS = 4	CP = 249	    Match  id
SS = 4	CP = 249	    Accept id
SS = 4	CP = 250	  Accept non_terminal_symbol
SS = 4	CP = 250	  Deduce assign_op
SS = 5	CP = 250	    Match  ::=
SS = 5	CP = 250	    Accept ::=
SS = 4	CP = 251	  Accept assign_op
SS = 4	CP = 251	  Deduce declaration
SS = 5	CP = 251	    Deduce term
SS = 6	CP = 251	      Deduce part
SS = 6	CP = 251	        Predict Failed in CONDITION
SS = 6	CP = 251	        Predict Failed in CONDITION
SS = 6	CP = 251	        Predict Failed in CONDITION
SS = 8	CP = 251	        Deduce simple_part
SS = 8	CP = 251	          Predict Failed in CONDITION
SS = 10	CP = 251	          Deduce terminal_symbol
SS = 11	CP = 251	            Match  slit
SS = 11	CP = 251	            Accept slit
SS = 10	CP = 252	          Accept terminal_symbol
SS = 8	CP = 252	        Accept simple_part
SS = 6	CP = 252	      Accept part
SS = 7	CP = 252	      Match  ,
SS = 7	CP = 252	      Reject ,
SS = 6	CP = 252	      Predict Failed: part
SS = 5	CP = 252	    Accept term
SS = 5	CP = 252	    Match  |
SS = 5	CP = 252	    Accept |
SS = 6	CP = 253	    Deduce term
SS = 7	CP = 253	      Deduce part
SS = 7	CP = 253	        Predict Failed in CONDITION
SS = 7	CP = 253	        Predict Failed in CONDITION
SS = 7	CP = 253	        Predict Failed in CONDITION
SS = 9	CP = 253	        Deduce simple_part
SS = 9	CP = 253	          Predict Failed in CONDITION
SS = 11	CP = 253	          Deduce terminal_symbol
SS = 12	CP = 253	            Match  slit
SS = 12	CP = 253	            Accept slit
SS = 11	CP = 254	          Accept terminal_symbol
SS = 9	CP = 254	        Accept simple_part
SS = 7	CP = 254	      Accept part
SS = 8	CP = 254	      Match  ,
SS = 8	CP = 254	      Reject ,
SS = 7	CP = 254	      Predict Failed: part
SS = 6	CP = 254	    Accept term
SS = 5	CP = 254	    Match  |
SS = 5	CP = 254	    Reject |
SS = 4	CP = 254	  Accept declaration
SS = 4	CP = 254	  Deduce end_op
SS = 5	CP = 254	    Match  ;
SS = 5	CP = 254	    Accept ;
SS = 4	CP = 255	  Accept end_op
SS = 3	CP = 255	Accept statement
SS = 3	CP = 255	Deduce statement
SS = 4	CP = 255	  Deduce non_terminal_symbol
SS = 4	CP = 255	    Match  id
SS = 4	CP = 255	    Accept id
SS = 4	CP = 256	  Accept non_terminal_symbol
SS = 4	CP = 256	  Deduce assign_op
SS = 5	CP = 256	    Match  ::=
SS = 5	CP = 256	    Accept ::=
SS = 4	CP = 257	  Accept assign_op
SS = 4	CP = 257	  Deduce declaration
SS = 5	CP = 257	    Deduce term
SS = 6	CP = 257	      Deduce part
SS = 6	CP = 257	        Predict Failed in CONDITION
SS = 6	CP = 257	        Predict Failed in CONDITION
SS = 6	CP = 257	        Predict Failed in CONDITION
SS = 8	CP = 257	        Deduce simple_part
SS = 10	CP = 257	          Deduce right_non_terminal_symbol
SS = 11	CP = 257	            Deduce non_terminal_symbol
SS = 11	CP = 257	              Match  id
SS = 11	CP = 257	              Accept id
SS = 11	CP = 258	            Accept non_terminal_symbol
SS = 10	CP = 258	          Accept right_non_terminal_symbol
SS = 8	CP = 258	        Accept simple_part
SS = 6	CP = 258	      Accept part
SS = 7	CP = 258	      Match  ,
SS = 7	CP = 258	      Reject ,
SS = 7	CP = 258	      Deduce part
SS = 7	CP = 258	        Predict Failed in CONDITION
SS = 7	CP = 258	        Predict Failed in CONDITION
SS = 7	CP = 258	        Predict Failed in CONDITION
SS = 9	CP = 258	        Deduce simple_part
SS = 11	CP = 258	          Deduce right_non_terminal_symbol
SS = 12	CP = 258	            Deduce non_terminal_symbol
SS = 12	CP = 258	              Match  id
SS = 12	CP = 258	              Accept id
SS = 12	CP = 259	            Accept non_terminal_symbol
SS = 11	CP = 259	          Accept right_non_terminal_symbol
SS = 9	CP = 259	        Accept simple_part
SS = 7	CP = 259	      Accept part
SS = 7	CP = 259	      Match  ,
SS = 7	CP = 259	      Reject ,
SS = 6	CP = 259	      Predict Failed: part
SS = 5	CP = 259	    Accept term
SS = 5	CP = 259	    Match  |
SS = 5	CP = 259	    Accept |
SS = 6	CP = 260	    Deduce term
SS = 7	CP = 260	      Deduce part
SS = 7	CP = 260	        Predict Failed in CONDITION
SS = 7	CP = 260	        Predict Failed in CONDITION
SS = 7	CP = 260	        Predict Failed in CONDITION
SS = 9	CP = 260	        Deduce simple_part
SS = 11	CP = 260	          Deduce right_non_terminal_symbol
SS = 12	CP = 260	            Deduce non_terminal_symbol
SS = 12	CP = 260	              Match  id
SS = 12	CP = 260	              Accept id
SS = 12	CP = 261	            Accept non_terminal_symbol
SS = 11	CP = 261	          Accept right_non_terminal_symbol
SS = 9	CP = 261	        Accept simple_part
SS = 7	CP = 261	      Accept part
SS = 8	CP = 261	      Match  ,
SS = 8	CP = 261	      Reject ,
SS = 7	CP = 261	      Predict Failed: part
SS = 6	CP = 261	    Accept term
SS = 5	CP = 261	    Match  |
SS = 5	CP = 261	    Reject |
SS = 4	CP = 261	  Accept declaration
SS = 4	CP = 261	  Deduce end_op
SS = 5	CP = 261	    Match  ;
SS = 5	CP = 261	    Accept ;
SS = 4	CP = 262	  Accept end_op
SS = 3	CP = 262	Accept statement
SS = 3	CP = 262	Deduce statement
SS = 4	CP = 262	  Deduce non_terminal_symbol
SS = 4	CP = 262	    Match  id
SS = 4	CP = 262	    Accept id
SS = 4	CP = 263	  Accept non_terminal_symbol
SS = 4	CP = 263	  Deduce assign_op
SS = 5	CP = 263	    Match  ::=
SS = 5	CP = 263	    Accept ::=
SS = 4	CP = 264	  Accept assign_op
SS = 4	CP = 264	  Deduce declaration
SS = 5	CP = 264	    Deduce term
SS = 6	CP = 264	      Deduce part
SS = 6	CP = 264	        Predict Failed in CONDITION
SS = 6	CP = 264	        Predict Failed in CONDITION
SS = 6	CP = 264	        Predict Failed in CONDITION
SS = 8	CP = 264	        Deduce simple_part
SS = 8	CP = 264	          Predict Failed in CONDITION
SS = 10	CP = 264	          Deduce terminal_symbol
SS = 11	CP = 264	            Match  slit
SS = 11	CP = 264	            Accept slit
SS = 10	CP = 265	          Accept terminal_symbol
SS = 8	CP = 265	        Accept simple_part
SS = 6	CP = 265	      Accept part
SS = 7	CP = 265	      Match  ,
SS = 7	CP = 265	      Reject ,
SS = 6	CP = 265	      Predict Failed: part
SS = 5	CP = 265	    Accept term
SS = 5	CP = 265	    Match  |
SS = 5	CP = 265	    Accept |
SS = 6	CP = 266	    Deduce term
SS = 7	CP = 266	      Deduce part
SS = 7	CP = 266	        Predict Failed in CONDITION
SS = 7	CP = 266	        Predict Failed in CONDITION
SS = 7	CP = 266	        Predict Failed in CONDITION
SS = 9	CP = 266	        Deduce simple_part
SS = 9	CP = 266	          Predict Failed in CONDITION
SS = 11	CP = 266	          Deduce terminal_symbol
SS = 12	CP = 266	            Match  slit
SS = 12	CP = 266	            Accept slit
SS = 11	CP = 267	          Accept terminal_symbol
SS = 9	CP = 267	        Accept simple_part
SS = 7	CP = 267	      Accept part
SS = 8	CP = 267	      Match  ,
SS = 8	CP = 267	      Reject ,
SS = 7	CP = 267	      Predict Failed: part
SS = 6	CP = 267	    Accept term
SS = 5	CP = 267	    Match  |
SS = 5	CP = 267	    Accept |
SS = 6	CP = 268	    Deduce term
SS = 7	CP = 268	      Deduce part
SS = 7	CP = 268	        Predict Failed in CONDITION
SS = 7	CP = 268	        Predict Failed in CONDITION
SS = 7	CP = 268	        Predict Failed in CONDITION
SS = 9	CP = 268	        Deduce simple_part
SS = 9	CP = 268	          Predict Failed in CONDITION
SS = 11	CP = 268	          Deduce terminal_symbol
SS = 12	CP = 268	            Match  slit
SS = 12	CP = 268	            Accept slit
SS = 11	CP = 269	          Accept terminal_symbol
SS = 9	CP = 269	        Accept simple_part
SS = 7	CP = 269	      Accept part
SS = 8	CP = 269	      Match  ,
SS = 8	CP = 269	      Reject ,
SS = 7	CP = 269	      Predict Failed: part
SS = 6	CP = 269	    Accept term
SS = 5	CP = 269	    Match  |
SS = 5	CP = 269	    Reject |
SS = 4	CP = 269	  Accept declaration
SS = 4	CP = 269	  Deduce end_op
SS = 5	CP = 269	    Match  ;
SS = 5	CP = 269	    Accept ;
SS = 4	CP = 270	  Accept end_op
SS = 3	CP = 270	Accept statement
SS = 3	CP = 270	Deduce statement
SS = 4	CP = 270	  Deduce non_terminal_symbol
SS = 4	CP = 270	    Match  id
SS = 4	CP = 270	    Accept id
SS = 4	CP = 271	  Accept non_terminal_symbol
SS = 4	CP = 271	  Deduce assign_op
SS = 5	CP = 271	    Match  ::=
SS = 5	CP = 271	    Accept ::=
SS = 4	CP = 272	  Accept assign_op
SS = 4	CP = 272	  Deduce declaration
SS = 5	CP = 272	    Deduce term
SS = 6	CP = 272	      Deduce part
SS = 6	CP = 272	        Predict Failed in CONDITION
SS = 6	CP = 272	        Predict Failed in CONDITION
SS = 6	CP = 272	        Predict Failed in CONDITION
SS = 8	CP = 272	        Deduce simple_part
SS = 10	CP = 272	          Deduce right_non_terminal_symbol
SS = 11	CP = 272	            Deduce non_terminal_symbol
SS = 11	CP = 272	              Match  id
SS = 11	CP = 272	              Accept id
SS = 11	CP = 273	            Accept non_terminal_symbol
SS = 10	CP = 273	          Accept right_non_terminal_symbol
SS = 8	CP = 273	        Accept simple_part
SS = 6	CP = 273	      Accept part
SS = 7	CP = 273	      Match  ,
SS = 7	CP = 273	      Reject ,
SS = 6	CP = 273	      Predict Failed: part
SS = 5	CP = 273	    Accept term
SS = 5	CP = 273	    Match  |
SS = 5	CP = 273	    Accept |
SS = 6	CP = 274	    Deduce term
SS = 7	CP = 274	      Deduce part
SS = 7	CP = 274	        Predict Failed in CONDITION
SS = 7	CP = 274	        Predict Failed in CONDITION
SS = 7	CP = 274	        Predict Failed in CONDITION
SS = 9	CP = 274	        Deduce simple_part
SS = 11	CP = 274	          Deduce right_non_terminal_symbol
SS = 12	CP = 274	            Deduce non_terminal_symbol
SS = 12	CP = 274	              Match  id
SS = 12	CP = 274	              Accept id
SS = 12	CP = 275	            Accept non_terminal_symbol
SS = 11	CP = 275	          Accept right_non_terminal_symbol
SS = 9	CP = 275	        Accept simple_part
SS = 7	CP = 275	      Accept part
SS = 8	CP = 275	      Match  ,
SS = 8	CP = 275	      Reject ,
SS = 8	CP = 275	      Deduce part
SS = 8	CP = 275	        Predict Failed in CONDITION
SS = 8	CP = 275	        Predict Failed in CONDITION
SS = 8	CP = 275	        Predict Failed in CONDITION
SS = 10	CP = 275	        Deduce simple_part
SS = 10	CP = 275	          Predict Failed in CONDITION
SS = 12	CP = 275	          Deduce terminal_symbol
SS = 13	CP = 275	            Match  slit
SS = 13	CP = 275	            Accept slit
SS = 12	CP = 276	          Accept terminal_symbol
SS = 10	CP = 276	        Accept simple_part
SS = 8	CP = 276	      Accept part
SS = 8	CP = 276	      Match  ,
SS = 8	CP = 276	      Reject ,
SS = 8	CP = 276	      Deduce part
SS = 8	CP = 276	        Predict Failed in CONDITION
SS = 8	CP = 276	        Predict Failed in CONDITION
SS = 8	CP = 276	        Predict Failed in CONDITION
SS = 10	CP = 276	        Deduce simple_part
SS = 12	CP = 276	          Deduce right_non_terminal_symbol
SS = 13	CP = 276	            Deduce non_terminal_symbol
SS = 13	CP = 276	              Match  id
SS = 13	CP = 276	              Accept id
SS = 13	CP = 277	            Accept non_terminal_symbol
SS = 12	CP = 277	          Accept right_non_terminal_symbol
SS = 10	CP = 277	        Accept simple_part
SS = 8	CP = 277	      Accept part
SS = 8	CP = 277	      Match  ,
SS = 8	CP = 277	      Reject ,
SS = 8	CP = 277	      Deduce part
SS = 8	CP = 277	        Predict Failed in CONDITION
SS = 8	CP = 277	        Predict Failed in CONDITION
SS = 8	CP = 277	        Predict Failed in CONDITION
SS = 10	CP = 277	        Deduce simple_part
SS = 10	CP = 277	          Predict Failed in CONDITION
SS = 12	CP = 277	          Deduce terminal_symbol
SS = 13	CP = 277	            Match  slit
SS = 13	CP = 277	            Accept slit
SS = 12	CP = 278	          Accept terminal_symbol
SS = 10	CP = 278	        Accept simple_part
SS = 8	CP = 278	      Accept part
SS = 8	CP = 278	      Match  ,
SS = 8	CP = 278	      Reject ,
SS = 7	CP = 278	      Predict Failed: part
SS = 6	CP = 278	    Accept term
SS = 5	CP = 278	    Match  |
SS = 5	CP = 278	    Accept |
SS = 6	CP = 279	    Deduce term
SS = 7	CP = 279	      Deduce part
SS = 7	CP = 279	        Predict Failed in CONDITION
SS = 7	CP = 279	        Predict Failed in CONDITION
SS = 7	CP = 279	        Predict Failed in CONDITION
SS = 9	CP = 279	        Deduce simple_part
SS = 11	CP = 279	          Deduce right_non_terminal_symbol
SS = 12	CP = 279	            Deduce non_terminal_symbol
SS = 12	CP = 279	              Match  id
SS = 12	CP = 279	              Accept id
SS = 12	CP = 280	            Accept non_terminal_symbol
SS = 11	CP = 280	          Accept right_non_terminal_symbol
SS = 9	CP = 280	        Accept simple_part
SS = 7	CP = 280	      Accept part
SS = 8	CP = 280	      Match  ,
SS = 8	CP = 280	      Reject ,
SS = 8	CP = 280	      Deduce part
SS = 8	CP = 280	        Predict Failed in CONDITION
SS = 8	CP = 280	        Predict Failed in CONDITION
SS = 8	CP = 280	        Predict Failed in CONDITION
SS = 10	CP = 280	        Deduce simple_part
SS = 10	CP = 280	          Predict Failed in CONDITION
SS = 12	CP = 280	          Deduce terminal_symbol
SS = 13	CP = 280	            Match  slit
SS = 13	CP = 280	            Accept slit
SS = 12	CP = 281	          Accept terminal_symbol
SS = 10	CP = 281	        Accept simple_part
SS = 8	CP = 281	      Accept part
SS = 8	CP = 281	      Match  ,
SS = 8	CP = 281	      Reject ,
SS = 8	CP = 281	      Deduce part
SS = 8	CP = 281	        Predict Failed in CONDITION
SS = 8	CP = 281	        Predict Failed in CONDITION
SS = 8	CP = 281	        Predict Failed in CONDITION
SS = 10	CP = 281	        Deduce simple_part
SS = 10	CP = 281	          Predict Failed in CONDITION
SS = 12	CP = 281	          Deduce terminal_symbol
SS = 13	CP = 281	            Match  slit
SS = 13	CP = 281	            Accept slit
SS = 12	CP = 282	          Accept terminal_symbol
SS = 10	CP = 282	        Accept simple_part
SS = 8	CP = 282	      Accept part
SS = 8	CP = 282	      Match  ,
SS = 8	CP = 282	      Reject ,
SS = 7	CP = 282	      Predict Failed: part
SS = 6	CP = 282	    Accept term
SS = 5	CP = 282	    Match  |
SS = 5	CP = 282	    Accept |
SS = 6	CP = 283	    Deduce term
SS = 7	CP = 283	      Deduce part
SS = 7	CP = 283	        Predict Failed in CONDITION
SS = 7	CP = 283	        Predict Failed in CONDITION
SS = 7	CP = 283	        Predict Failed in CONDITION
SS = 9	CP = 283	        Deduce simple_part
SS = 11	CP = 283	          Deduce right_non_terminal_symbol
SS = 12	CP = 283	            Deduce non_terminal_symbol
SS = 12	CP = 283	              Match  id
SS = 12	CP = 283	              Accept id
SS = 12	CP = 284	            Accept non_terminal_symbol
SS = 11	CP = 284	          Accept right_non_terminal_symbol
SS = 9	CP = 284	        Accept simple_part
SS = 7	CP = 284	      Accept part
SS = 8	CP = 284	      Match  ,
SS = 8	CP = 284	      Reject ,
SS = 8	CP = 284	      Deduce part
SS = 8	CP = 284	        Predict Failed in CONDITION
SS = 8	CP = 284	        Predict Failed in CONDITION
SS = 8	CP = 284	        Predict Failed in CONDITION
SS = 10	CP = 284	        Deduce simple_part
SS = 10	CP = 284	          Predict Failed in CONDITION
SS = 12	CP = 284	          Deduce terminal_symbol
SS = 13	CP = 284	            Match  slit
SS = 13	CP = 284	            Accept slit
SS = 12	CP = 285	          Accept terminal_symbol
SS = 10	CP = 285	        Accept simple_part
SS = 8	CP = 285	      Accept part
SS = 8	CP = 285	      Match  ,
SS = 8	CP = 285	      Reject ,
SS = 8	CP = 285	      Deduce part
SS = 8	CP = 285	        Predict Failed in CONDITION
SS = 8	CP = 285	        Predict Failed in CONDITION
SS = 8	CP = 285	        Predict Failed in CONDITION
SS = 10	CP = 285	        Deduce simple_part
SS = 12	CP = 285	          Deduce right_non_terminal_symbol
SS = 13	CP = 285	            Deduce non_terminal_symbol
SS = 13	CP = 285	              Match  id
SS = 13	CP = 285	              Accept id
SS = 13	CP = 286	            Accept non_terminal_symbol
SS = 12	CP = 286	          Accept right_non_terminal_symbol
SS = 10	CP = 286	        Accept simple_part
SS = 8	CP = 286	      Accept part
SS = 8	CP = 286	      Match  ,
SS = 8	CP = 286	      Reject ,
SS = 8	CP = 286	      Deduce part
SS = 10	CP = 286	        Deduce repeat_part
SS = 10	CP = 286	          Match  {
SS = 10	CP = 286	          Accept {
SS = 11	CP = 287	          Deduce declaration
SS = 12	CP = 287	            Deduce term
SS = 13	CP = 287	              Deduce part
SS = 13	CP = 287	                Predict Failed in CONDITION
SS = 13	CP = 287	                Predict Failed in CONDITION
SS = 13	CP = 287	                Predict Failed in CONDITION
SS = 15	CP = 287	                Deduce simple_part
SS = 15	CP = 287	                  Predict Failed in CONDITION
SS = 17	CP = 287	                  Deduce terminal_symbol
SS = 18	CP = 287	                    Match  slit
SS = 18	CP = 287	                    Accept slit
SS = 17	CP = 288	                  Accept terminal_symbol
SS = 15	CP = 288	                Accept simple_part
SS = 13	CP = 288	              Accept part
SS = 14	CP = 288	              Match  ,
SS = 14	CP = 288	              Reject ,
SS = 14	CP = 288	              Deduce part
SS = 14	CP = 288	                Predict Failed in CONDITION
SS = 14	CP = 288	                Predict Failed in CONDITION
SS = 14	CP = 288	                Predict Failed in CONDITION
SS = 16	CP = 288	                Deduce simple_part
SS = 18	CP = 288	                  Deduce right_non_terminal_symbol
SS = 19	CP = 288	                    Deduce non_terminal_symbol
SS = 19	CP = 288	                      Match  id
SS = 19	CP = 288	                      Accept id
SS = 19	CP = 289	                    Accept non_terminal_symbol
SS = 18	CP = 289	                  Accept right_non_terminal_symbol
SS = 16	CP = 289	                Accept simple_part
SS = 14	CP = 289	              Accept part
SS = 14	CP = 289	              Match  ,
SS = 14	CP = 289	              Reject ,
SS = 13	CP = 289	              Predict Failed: part
SS = 12	CP = 289	            Accept term
SS = 12	CP = 289	            Match  |
SS = 12	CP = 289	            Reject |
SS = 11	CP = 289	          Accept declaration
SS = 10	CP = 289	          Match  }
SS = 10	CP = 289	          Accept }
SS = 10	CP = 290	        Accept repeat_part
SS = 8	CP = 290	      Accept part
SS = 8	CP = 290	      Match  ,
SS = 8	CP = 290	      Reject ,
SS = 8	CP = 290	      Deduce part
SS = 8	CP = 290	        Predict Failed in CONDITION
SS = 8	CP = 290	        Predict Failed in CONDITION
SS = 8	CP = 290	        Predict Failed in CONDITION
SS = 10	CP = 290	        Deduce simple_part
SS = 10	CP = 290	          Predict Failed in CONDITION
SS = 12	CP = 290	          Deduce terminal_symbol
SS = 13	CP = 290	            Match  slit
SS = 13	CP = 290	            Accept slit
SS = 12	CP = 291	          Accept terminal_symbol
SS = 10	CP = 291	        Accept simple_part
SS = 8	CP = 291	      Accept part
SS = 8	CP = 291	      Match  ,
SS = 8	CP = 291	      Reject ,
SS = 7	CP = 291	      Predict Failed: part
SS = 6	CP = 291	    Accept term
SS = 5	CP = 291	    Match  |
SS = 5	CP = 291	    Accept |
SS = 6	CP = 292	    Deduce term
SS = 7	CP = 292	      Deduce part
SS = 7	CP = 292	        Predict Failed in CONDITION
SS = 7	CP = 292	        Predict Failed in CONDITION
SS = 7	CP = 292	        Predict Failed in CONDITION
SS = 9	CP = 292	        Deduce simple_part
SS = 11	CP = 292	          Deduce right_non_terminal_symbol
SS = 12	CP = 292	            Deduce non_terminal_symbol
SS = 12	CP = 292	              Match  id
SS = 12	CP = 292	              Accept id
SS = 12	CP = 293	            Accept non_terminal_symbol
SS = 11	CP = 293	          Accept right_non_terminal_symbol
SS = 9	CP = 293	        Accept simple_part
SS = 7	CP = 293	      Accept part
SS = 8	CP = 293	      Match  ,
SS = 8	CP = 293	      Reject ,
SS = 8	CP = 293	      Deduce part
SS = 8	CP = 293	        Predict Failed in CONDITION
SS = 8	CP = 293	        Predict Failed in CONDITION
SS = 8	CP = 293	        Predict Failed in CONDITION
SS = 10	CP = 293	        Deduce simple_part
SS = 10	CP = 293	          Predict Failed in CONDITION
SS = 12	CP = 293	          Deduce terminal_symbol
SS = 13	CP = 293	            Match  slit
SS = 13	CP = 293	            Accept slit
SS = 12	CP = 294	          Accept terminal_symbol
SS = 10	CP = 294	        Accept simple_part
SS = 8	CP = 294	      Accept part
SS = 8	CP = 294	      Match  ,
SS = 8	CP = 294	      Reject ,
SS = 8	CP = 294	      Deduce part
SS = 8	CP = 294	        Predict Failed in CONDITION
SS = 8	CP = 294	        Predict Failed in CONDITION
SS = 8	CP = 294	        Predict Failed in CONDITION
SS = 10	CP = 294	        Deduce simple_part
SS = 10	CP = 294	          Predict Failed in CONDITION
SS = 12	CP = 294	          Deduce terminal_symbol
SS = 12	CP = 294	            Predict Failed in CONDITION
SS = 12	CP = 294	            Predict Failed in CONDITION
SS = 13	CP = 294	            Match  token
SS = 13	CP = 294	            Accept token
SS = 12	CP = 295	          Accept terminal_symbol
SS = 10	CP = 295	        Accept simple_part
SS = 8	CP = 295	      Accept part
SS = 8	CP = 295	      Match  ,
SS = 8	CP = 295	      Reject ,
SS = 7	CP = 295	      Predict Failed: part
SS = 6	CP = 295	    Accept term
SS = 5	CP = 295	    Match  |
SS = 5	CP = 295	    Accept |
SS = 6	CP = 296	    Deduce term
SS = 7	CP = 296	      Deduce part
SS = 7	CP = 296	        Predict Failed in CONDITION
SS = 7	CP = 296	        Predict Failed in CONDITION
SS = 7	CP = 296	        Predict Failed in CONDITION
SS = 9	CP = 296	        Deduce simple_part
SS = 11	CP = 296	          Deduce right_non_terminal_symbol
SS = 12	CP = 296	            Deduce non_terminal_symbol
SS = 12	CP = 296	              Match  id
SS = 12	CP = 296	              Accept id
SS = 12	CP = 297	            Accept non_terminal_symbol
SS = 11	CP = 297	          Accept right_non_terminal_symbol
SS = 9	CP = 297	        Accept simple_part
SS = 7	CP = 297	      Accept part
SS = 8	CP = 297	      Match  ,
SS = 8	CP = 297	      Reject ,
SS = 8	CP = 297	      Deduce part
SS = 8	CP = 297	        Predict Failed in CONDITION
SS = 8	CP = 297	        Predict Failed in CONDITION
SS = 8	CP = 297	        Predict Failed in CONDITION
SS = 10	CP = 297	        Deduce simple_part
SS = 12	CP = 297	          Deduce right_non_terminal_symbol
SS = 13	CP = 297	            Deduce non_terminal_symbol
SS = 13	CP = 297	              Match  id
SS = 13	CP = 297	              Accept id
SS = 13	CP = 298	            Accept non_terminal_symbol
SS = 12	CP = 298	          Accept right_non_terminal_symbol
SS = 10	CP = 298	        Accept simple_part
SS = 8	CP = 298	      Accept part
SS = 8	CP = 298	      Match  ,
SS = 8	CP = 298	      Reject ,
SS = 7	CP = 298	      Predict Failed: part
SS = 6	CP = 298	    Accept term
SS = 5	CP = 298	    Match  |
SS = 5	CP = 298	    Reject |
SS = 4	CP = 298	  Accept declaration
SS = 4	CP = 298	  Deduce end_op
SS = 5	CP = 298	    Match  ;
SS = 5	CP = 298	    Accept ;
SS = 4	CP = 299	  Accept end_op
SS = 3	CP = 299	Accept statement
SS = 3	CP = 299	Deduce statement
SS = 4	CP = 299	  Deduce non_terminal_symbol
SS = 4	CP = 299	    Match  id
SS = 4	CP = 299	    Accept id
SS = 4	CP = 300	  Accept non_terminal_symbol
SS = 4	CP = 300	  Deduce assign_op
SS = 5	CP = 300	    Match  ::=
SS = 5	CP = 300	    Accept ::=
SS = 4	CP = 301	  Accept assign_op
SS = 4	CP = 301	  Deduce declaration
SS = 5	CP = 301	    Deduce term
SS = 6	CP = 301	      Deduce part
SS = 6	CP = 301	        Predict Failed in CONDITION
SS = 6	CP = 301	        Predict Failed in CONDITION
SS = 6	CP = 301	        Predict Failed in CONDITION
SS = 8	CP = 301	        Deduce simple_part
SS = 8	CP = 301	          Predict Failed in CONDITION
SS = 10	CP = 301	          Deduce terminal_symbol
SS = 11	CP = 301	            Match  slit
SS = 11	CP = 301	            Accept slit
SS = 10	CP = 302	          Accept terminal_symbol
SS = 8	CP = 302	        Accept simple_part
SS = 6	CP = 302	      Accept part
SS = 7	CP = 302	      Match  ,
SS = 7	CP = 302	      Reject ,
SS = 6	CP = 302	      Predict Failed: part
SS = 5	CP = 302	    Accept term
SS = 5	CP = 302	    Match  |
SS = 5	CP = 302	    Accept |
SS = 6	CP = 303	    Deduce term
SS = 7	CP = 303	      Deduce part
SS = 7	CP = 303	        Predict Failed in CONDITION
SS = 7	CP = 303	        Predict Failed in CONDITION
SS = 7	CP = 303	        Predict Failed in CONDITION
SS = 9	CP = 303	        Deduce simple_part
SS = 9	CP = 303	          Predict Failed in CONDITION
SS = 11	CP = 303	          Deduce terminal_symbol
SS = 12	CP = 303	            Match  slit
SS = 12	CP = 303	            Accept slit
SS = 11	CP = 304	          Accept terminal_symbol
SS = 9	CP = 304	        Accept simple_part
SS = 7	CP = 304	      Accept part
SS = 8	CP = 304	      Match  ,
SS = 8	CP = 304	      Reject ,
SS = 7	CP = 304	      Predict Failed: part
SS = 6	CP = 304	    Accept term
SS = 5	CP = 304	    Match  |
SS = 5	CP = 304	    Reject |
SS = 4	CP = 304	  Accept declaration
SS = 4	CP = 304	  Deduce end_op
SS = 5	CP = 304	    Match  ;
SS = 5	CP = 304	    Accept ;
SS = 4	CP = 305	  Accept end_op
SS = 3	CP = 305	Accept statement
SS = 3	CP = 305	Deduce statement
SS = 4	CP = 305	  Deduce non_terminal_symbol
SS = 4	CP = 305	    Match  id
SS = 4	CP = 305	    Accept id
SS = 4	CP = 306	  Accept non_terminal_symbol
SS = 4	CP = 306	  Deduce assign_op
SS = 5	CP = 306	    Match  ::=
SS = 5	CP = 306	    Accept ::=
SS = 4	CP = 307	  Accept assign_op
SS = 4	CP = 307	  Deduce declaration
SS = 5	CP = 307	    Deduce term
SS = 6	CP = 307	      Deduce part
SS = 6	CP = 307	        Predict Failed in CONDITION
SS = 6	CP = 307	        Predict Failed in CONDITION
SS = 6	CP = 307	        Predict Failed in CONDITION
SS = 8	CP = 307	        Deduce simple_part
SS = 8	CP = 307	          Predict Failed in CONDITION
SS = 10	CP = 307	          Deduce terminal_symbol
SS = 10	CP = 307	            Predict Failed in CONDITION
SS = 10	CP = 307	            Predict Failed in CONDITION
SS = 11	CP = 307	            Match  token
SS = 11	CP = 307	            Accept token
SS = 10	CP = 308	          Accept terminal_symbol
SS = 8	CP = 308	        Accept simple_part
SS = 6	CP = 308	      Accept part
SS = 7	CP = 308	      Match  ,
SS = 7	CP = 308	      Reject ,
SS = 6	CP = 308	      Predict Failed: part
SS = 5	CP = 308	    Accept term
SS = 5	CP = 308	    Match  |
SS = 5	CP = 308	    Accept |
SS = 6	CP = 309	    Deduce term
SS = 7	CP = 309	      Deduce part
SS = 7	CP = 309	        Predict Failed in CONDITION
SS = 7	CP = 309	        Predict Failed in CONDITION
SS = 7	CP = 309	        Predict Failed in CONDITION
SS = 9	CP = 309	        Deduce simple_part
SS = 9	CP = 309	          Predict Failed in CONDITION
SS = 11	CP = 309	          Deduce terminal_symbol
SS = 11	CP = 309	            Predict Failed in CONDITION
SS = 11	CP = 309	            Predict Failed in CONDITION
SS = 12	CP = 309	            Match  token
SS = 12	CP = 309	            Accept token
SS = 11	CP = 310	          Accept terminal_symbol
SS = 9	CP = 310	        Accept simple_part
SS = 7	CP = 310	      Accept part
SS = 8	CP = 310	      Match  ,
SS = 8	CP = 310	      Reject ,
SS = 7	CP = 310	      Predict Failed: part
SS = 6	CP = 310	    Accept term
SS = 5	CP = 310	    Match  |
SS = 5	CP = 310	    Accept |
SS = 6	CP = 311	    Deduce term
SS = 7	CP = 311	      Deduce part
SS = 7	CP = 311	        Predict Failed in CONDITION
SS = 7	CP = 311	        Predict Failed in CONDITION
SS = 7	CP = 311	        Predict Failed in CONDITION
SS = 9	CP = 311	        Deduce simple_part
SS = 9	CP = 311	          Predict Failed in CONDITION
SS = 11	CP = 311	          Deduce terminal_symbol
SS = 12	CP = 311	            Match  slit
SS = 12	CP = 311	            Accept slit
SS = 11	CP = 312	          Accept terminal_symbol
SS = 9	CP = 312	        Accept simple_part
SS = 7	CP = 312	      Accept part
SS = 8	CP = 312	      Match  ,
SS = 8	CP = 312	      Reject ,
SS = 8	CP = 312	      Deduce part
SS = 8	CP = 312	        Predict Failed in CONDITION
SS = 8	CP = 312	        Predict Failed in CONDITION
SS = 8	CP = 312	        Predict Failed in CONDITION
SS = 10	CP = 312	        Deduce simple_part
SS = 12	CP = 312	          Deduce right_non_terminal_symbol
SS = 13	CP = 312	            Deduce non_terminal_symbol
SS = 13	CP = 312	              Match  id
SS = 13	CP = 312	              Accept id
SS = 13	CP = 313	            Accept non_terminal_symbol
SS = 12	CP = 313	          Accept right_non_terminal_symbol
SS = 10	CP = 313	        Accept simple_part
SS = 8	CP = 313	      Accept part
SS = 8	CP = 313	      Match  ,
SS = 8	CP = 313	      Reject ,
SS = 8	CP = 313	      Deduce part
SS = 8	CP = 313	        Predict Failed in CONDITION
SS = 8	CP = 313	        Predict Failed in CONDITION
SS = 8	CP = 313	        Predict Failed in CONDITION
SS = 10	CP = 313	        Deduce simple_part
SS = 10	CP = 313	          Predict Failed in CONDITION
SS = 12	CP = 313	          Deduce terminal_symbol
SS = 13	CP = 313	            Match  slit
SS = 13	CP = 313	            Accept slit
SS = 12	CP = 314	          Accept terminal_symbol
SS = 10	CP = 314	        Accept simple_part
SS = 8	CP = 314	      Accept part
SS = 8	CP = 314	      Match  ,
SS = 8	CP = 314	      Reject ,
SS = 7	CP = 314	      Predict Failed: part
SS = 6	CP = 314	    Accept term
SS = 5	CP = 314	    Match  |
SS = 5	CP = 314	    Reject |
SS = 4	CP = 314	  Accept declaration
SS = 4	CP = 314	  Deduce end_op
SS = 5	CP = 314	    Match  ;
SS = 5	CP = 314	    Accept ;
SS = 4	CP = 315	  Accept end_op
SS = 3	CP = 315	Accept statement
SS = 3	CP = 315	Deduce statement
SS = 4	CP = 315	  Deduce non_terminal_symbol
SS = 4	CP = 315	    Match  id
SS = 4	CP = 315	    Accept id
SS = 4	CP = 316	  Accept non_terminal_symbol
SS = 4	CP = 316	  Deduce assign_op
SS = 5	CP = 316	    Match  ::=
SS = 5	CP = 316	    Accept ::=
SS = 4	CP = 317	  Accept assign_op
SS = 4	CP = 317	  Deduce declaration
SS = 5	CP = 317	    Deduce term
SS = 6	CP = 317	      Deduce part
SS = 6	CP = 317	        Predict Failed in CONDITION
SS = 6	CP = 317	        Predict Failed in CONDITION
SS = 6	CP = 317	        Predict Failed in CONDITION
SS = 8	CP = 317	        Deduce simple_part
SS = 8	CP = 317	          Predict Failed in CONDITION
SS = 10	CP = 317	          Deduce terminal_symbol
SS = 11	CP = 317	            Match  slit
SS = 11	CP = 317	            Accept slit
SS = 10	CP = 318	          Accept terminal_symbol
SS = 8	CP = 318	        Accept simple_part
SS = 6	CP = 318	      Accept part
SS = 7	CP = 318	      Match  ,
SS = 7	CP = 318	      Reject ,
SS = 7	CP = 318	      Deduce part
SS = 7	CP = 318	        Predict Failed in CONDITION
SS = 7	CP = 318	        Predict Failed in CONDITION
SS = 7	CP = 318	        Predict Failed in CONDITION
SS = 9	CP = 318	        Deduce simple_part
SS = 9	CP = 318	          Predict Failed in CONDITION
SS = 11	CP = 318	          Deduce terminal_symbol
SS = 11	CP = 318	            Predict Failed in CONDITION
SS = 11	CP = 318	            Predict Failed in CONDITION
SS = 12	CP = 318	            Match  token
SS = 12	CP = 318	            Accept token
SS = 11	CP = 319	          Accept terminal_symbol
SS = 9	CP = 319	        Accept simple_part
SS = 7	CP = 319	      Accept part
SS = 7	CP = 319	      Match  ,
SS = 7	CP = 319	      Reject ,
SS = 7	CP = 319	      Deduce part
SS = 7	CP = 319	        Predict Failed in CONDITION
SS = 7	CP = 319	        Predict Failed in CONDITION
SS = 7	CP = 319	        Predict Failed in CONDITION
SS = 9	CP = 319	        Deduce simple_part
SS = 9	CP = 319	          Predict Failed in CONDITION
SS = 11	CP = 319	          Deduce terminal_symbol
SS = 12	CP = 319	            Match  slit
SS = 12	CP = 319	            Accept slit
SS = 11	CP = 320	          Accept terminal_symbol
SS = 9	CP = 320	        Accept simple_part
SS = 7	CP = 320	      Accept part
SS = 7	CP = 320	      Match  ,
SS = 7	CP = 320	      Reject ,
SS = 7	CP = 320	      Deduce part
SS = 9	CP = 320	        Deduce repeat_part
SS = 9	CP = 320	          Match  {
SS = 9	CP = 320	          Accept {
SS = 10	CP = 321	          Deduce declaration
SS = 11	CP = 321	            Deduce term
SS = 12	CP = 321	              Deduce part
SS = 12	CP = 321	                Predict Failed in CONDITION
SS = 12	CP = 321	                Predict Failed in CONDITION
SS = 12	CP = 321	                Predict Failed in CONDITION
SS = 14	CP = 321	                Deduce simple_part
SS = 16	CP = 321	                  Deduce right_non_terminal_symbol
SS = 17	CP = 321	                    Deduce non_terminal_symbol
SS = 17	CP = 321	                      Match  id
SS = 17	CP = 321	                      Accept id
SS = 17	CP = 322	                    Accept non_terminal_symbol
SS = 16	CP = 322	                  Accept right_non_terminal_symbol
SS = 14	CP = 322	                Accept simple_part
SS = 12	CP = 322	              Accept part
SS = 13	CP = 322	              Match  ,
SS = 13	CP = 322	              Reject ,
SS = 12	CP = 322	              Predict Failed: part
SS = 11	CP = 322	            Accept term
SS = 11	CP = 322	            Match  |
SS = 11	CP = 322	            Reject |
SS = 10	CP = 322	          Accept declaration
SS = 9	CP = 322	          Match  }
SS = 9	CP = 322	          Accept }
SS = 9	CP = 323	        Accept repeat_part
SS = 7	CP = 323	      Accept part
SS = 7	CP = 323	      Match  ,
SS = 7	CP = 323	      Reject ,
SS = 7	CP = 323	      Deduce part
SS = 7	CP = 323	        Predict Failed in CONDITION
SS = 7	CP = 323	        Predict Failed in CONDITION
SS = 7	CP = 323	        Predict Failed in CONDITION
SS = 9	CP = 323	        Deduce simple_part
SS = 9	CP = 323	          Predict Failed in CONDITION
SS = 11	CP = 323	          Deduce terminal_symbol
SS = 12	CP = 323	            Match  slit
SS = 12	CP = 323	            Accept slit
SS = 11	CP = 324	          Accept terminal_symbol
SS = 9	CP = 324	        Accept simple_part
SS = 7	CP = 324	      Accept part
SS = 7	CP = 324	      Match  ,
SS = 7	CP = 324	      Reject ,
SS = 7	CP = 324	      Deduce part
SS = 7	CP = 324	        Predict Failed in CONDITION
SS = 7	CP = 324	        Predict Failed in CONDITION
SS = 9	CP = 324	        Deduce alternative_part
SS = 9	CP = 324	          Match  [
SS = 9	CP = 324	          Accept [
SS = 10	CP = 325	          Deduce declaration
SS = 11	CP = 325	            Deduce term
SS = 12	CP = 325	              Deduce part
SS = 12	CP = 325	                Predict Failed in CONDITION
SS = 12	CP = 325	                Predict Failed in CONDITION
SS = 12	CP = 325	                Predict Failed in CONDITION
SS = 14	CP = 325	                Deduce simple_part
SS = 14	CP = 325	                  Predict Failed in CONDITION
SS = 16	CP = 325	                  Deduce terminal_symbol
SS = 16	CP = 325	                    Predict Failed in CONDITION
SS = 16	CP = 325	                    Predict Failed in CONDITION
SS = 17	CP = 325	                    Match  token
SS = 17	CP = 325	                    Accept token
SS = 16	CP = 326	                  Accept terminal_symbol
SS = 14	CP = 326	                Accept simple_part
SS = 12	CP = 326	              Accept part
SS = 13	CP = 326	              Match  ,
SS = 13	CP = 326	              Reject ,
SS = 12	CP = 326	              Predict Failed: part
SS = 11	CP = 326	            Accept term
SS = 11	CP = 326	            Match  |
SS = 11	CP = 326	            Reject |
SS = 10	CP = 326	          Accept declaration
SS = 9	CP = 326	          Match  ]
SS = 9	CP = 326	          Accept ]
SS = 9	CP = 327	        Accept alternative_part
SS = 7	CP = 327	      Accept part
SS = 7	CP = 327	      Match  ,
SS = 7	CP = 327	      Reject ,
SS = 7	CP = 327	      Deduce part
SS = 7	CP = 327	        Predict Failed in CONDITION
SS = 7	CP = 327	        Predict Failed in CONDITION
SS = 7	CP = 327	        Predict Failed in CONDITION
SS = 9	CP = 327	        Deduce simple_part
SS = 9	CP = 327	          Predict Failed in CONDITION
SS = 11	CP = 327	          Deduce terminal_symbol
SS = 12	CP = 327	            Match  slit
SS = 12	CP = 327	            Accept slit
SS = 11	CP = 328	          Accept terminal_symbol
SS = 9	CP = 328	        Accept simple_part
SS = 7	CP = 328	      Accept part
SS = 7	CP = 328	      Match  ,
SS = 7	CP = 328	      Reject ,
SS = 6	CP = 328	      Predict Failed: part
SS = 5	CP = 328	    Accept term
SS = 5	CP = 328	    Match  |
SS = 5	CP = 328	    Reject |
SS = 4	CP = 328	  Accept declaration
SS = 4	CP = 328	  Deduce end_op
SS = 5	CP = 328	    Match  ;
SS = 5	CP = 328	    Accept ;
SS = 4	CP = 329	  Accept end_op
SS = 3	CP = 329	Accept statement
SS = 2	CP = 329	End Of File
Compile Time: 0.361s
begin
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "program"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> repeat_part
            repeat_part -> "{"
            repeat_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "external_declaration"
            repeat_part -> "}"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "external_declaration"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "function_declaration"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "declaration"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "struct_specifier"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "function_declaration"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "type_specifier"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "direct_declarator"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "compound_statement"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "type_specifier"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ID"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "direct_declarator"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ID"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "direct_declarator"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'['"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "']'"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "direct_declarator"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'['"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "constant_expression"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "']'"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ID"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'('"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "parameter_list"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "')'"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ID"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'('"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "')'"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "constant_expression"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "relat_expression"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "parameter_list"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "parameter_declaration"
        term -> part
          part -> repeat_part
            repeat_part -> "{"
            repeat_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "','"
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "parameter_declaration"
            repeat_part -> "}"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "parameter_declaration"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "declaration_specifier"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ID"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "declaration_specifier"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "type_specifier"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "compound_statement"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'{'"
        term -> part
          part -> repeat_part
            repeat_part -> "{"
            repeat_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "declaration"
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "statement"
            repeat_part -> "}"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'}'"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "declaration"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "type_specifier"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "init_declarator"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "';'"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "init_declarator"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "direct_declarator"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "'='"
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "initializer"
            alternative_part -> "]"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "initializer"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "assignment_expression"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'{'"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "initializer_list"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "','"
            alternative_part -> "]"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'}'"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "initializer_list"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "initializer"
        term -> part
          part -> repeat_part
            repeat_part -> "{"
            repeat_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "','"
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "initializer"
            repeat_part -> "}"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "statement"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "compound_statement"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "expression_statement"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "selection_statement"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "iteration_statement"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "return_statement"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "expression_statement"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "';'"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "expression"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "';'"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "selection_statement"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'if'"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'('"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "expression"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "')'"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "statement"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "'else'"
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "statement"
            alternative_part -> "]"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "iteration_statement"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'for'"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'('"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> alternative_part
                    alternative_part -> "["
                    alternative_part -> declaration
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> right_non_terminal_symbol
                              right_non_terminal_symbol -> non_terminal_symbol
                                non_terminal_symbol -> "type_specifier"
                    alternative_part -> "]"
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "init_declarator"
            alternative_part -> "]"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "';'"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "expression"
            alternative_part -> "]"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "';'"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "expression"
            alternative_part -> "]"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "')'"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "statement"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "return_statement"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'return'"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "expression_statement"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "expression"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "assignment_expression"
        term -> part
          part -> repeat_part
            repeat_part -> "{"
            repeat_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "','"
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "assignment_expression"
            repeat_part -> "}"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "assignment_expression"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "equality_expression"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "assign_op"
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "assignment_expression"
            alternative_part -> "]"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "assign_op"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'='"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'+='"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'-='"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'*='"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'/='"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "equality_expression"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "relat_expression"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "equal_op"
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "equality_expression"
            alternative_part -> "]"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "equal_op"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'=='"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'!='"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "relat_expression"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "additive_expression"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "relat_op"
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "relat_expression"
            alternative_part -> "]"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "relat_op"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'>'"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'<'"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'>='"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'<='"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "additive_expression"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "multiplicative_expression"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "add_op"
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "additive_expression"
            alternative_part -> "]"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "add_op"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'+'"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'-'"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "multiplicative_expression"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "unary_expression"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "mul_op"
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "multiplicative_expression"
            alternative_part -> "]"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "mul_op"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'*'"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'/'"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "unary_expression"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "sadd_op"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "unary_expression"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "postfix_expression"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "sadd_op"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'++'"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'--'"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'-'"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "postfix_expression"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "primary_expression"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "postfix_expression"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'['"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "expression"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "']'"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "postfix_expression"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'('"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "')'"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "postfix_expression"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'('"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "assignment_expression"
        term -> part
          part -> repeat_part
            repeat_part -> "{"
            repeat_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "','"
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "assignment_expression"
            repeat_part -> "}"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "')'"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "postfix_expression"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'.'"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ID"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "postfix_expression"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "post_op"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "post_op"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'++'"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'--'"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "primary_expression"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ID"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "NUMBER"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'('"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "expression"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "')'"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "struct_specifier"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'struct'"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ID"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'{'"
        term -> part
          part -> repeat_part
            repeat_part -> "{"
            repeat_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "declaration"
            repeat_part -> "}"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'}'"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "ID"
            alternative_part -> "]"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "';'"
    statement -> end_op
      end_op -> ";"
@begin
var lang_syntax = {
	"program" : {
		 syntax.repeat( syntax.ref(external_declaration))
	},
	"external_declaration" : {
		syntax.cond_or(
			{ syntax.ref(function_declaration) },
			{ syntax.ref(declaration) },
			{ syntax.ref(struct_specifier) }
		)
	},
	"function_declaration" : {
		 syntax.ref(type_specifier), syntax.ref(direct_declarator), syntax.ref(compound_statement)
	},
	"type_specifier" : {
		 syntax.token("ID")
	},
	"direct_declarator" : {
		syntax.cond_or(
			{ syntax.token("ID") },
			{ syntax.ref(direct_declarator), syntax.term("["), syntax.term("]") },
			{ syntax.ref(direct_declarator), syntax.term("["), syntax.ref(constant_expression), syntax.term("]") },
			{ syntax.token("ID"), syntax.term("("), syntax.ref(parameter_list), syntax.term(")") },
			{ syntax.token("ID"), syntax.term("("), syntax.term(")") }
		)
	},
	"constant_expression" : {
		 syntax.ref(relat_expression)
	},
	"parameter_list" : {
		 syntax.ref(parameter_declaration), syntax.repeat( syntax.term(","), syntax.ref(parameter_declaration))
	},
	"parameter_declaration" : {
		 syntax.ref(declaration_specifier), syntax.token("ID")
	},
	"declaration_specifier" : {
		 syntax.ref(type_specifier)
	},
	"compound_statement" : {
		 syntax.term("{"), syntax.repeat(syntax.cond_or(
			{ syntax.ref(declaration) },
			{ syntax.ref(statement) }
		)), syntax.term("}")
	},
	"declaration" : {
		 syntax.ref(type_specifier), syntax.ref(init_declarator), syntax.term(";")
	},
	"init_declarator" : {
		 syntax.ref(direct_declarator), [ syntax.term("="), syntax.ref(initializer) ]
	},
	"initializer" : {
		syntax.cond_or(
			{ syntax.ref(assignment_expression) },
			{ syntax.term("{"), syntax.ref(initializer_list), [ syntax.term(",") ], syntax.term("}") }
		)
	},
	"initializer_list" : {
		 syntax.ref(initializer), syntax.repeat( syntax.term(","), syntax.ref(initializer))
	},
	"statement" : {
		syntax.cond_or(
			{ syntax.ref(compound_statement) },
			{ syntax.ref(expression_statement) },
			{ syntax.ref(selection_statement) },
			{ syntax.ref(iteration_statement) },
			{ syntax.ref(return_statement) }
		)
	},
	"expression_statement" : {
		syntax.cond_or(
			{ syntax.term(";") },
			{ syntax.ref(expression), syntax.term(";") }
		)
	},
	"selection_statement" : {
		 syntax.term("if"), syntax.term("("), syntax.ref(expression), syntax.term(")"), syntax.ref(statement), [ syntax.term("else"), syntax.ref(statement) ]
	},
	"iteration_statement" : {
		 syntax.term("for"), syntax.term("("), [ [ syntax.ref(type_specifier) ], syntax.ref(init_declarator) ], syntax.term(";"), [ syntax.ref(expression) ], syntax.term(";"), [ syntax.ref(expression) ], syntax.term(")"), syntax.ref(statement)
	},
	"return_statement" : {
		 syntax.term("return"), syntax.ref(expression_statement)
	},
	"expression" : {
		 syntax.ref(assignment_expression), syntax.repeat( syntax.term(","), syntax.ref(assignment_expression))
	},
	"assignment_expression" : {
		 syntax.ref(equality_expression), [ syntax.ref(assign_op), syntax.ref(assignment_expression) ]
	},
	"assign_op" : {
		syntax.cond_or(
			{ syntax.term("=") },
			{ syntax.term("+=") },
			{ syntax.term("-=") },
			{ syntax.term("*=") },
			{ syntax.term("/=") }
		)
	},
	"equality_expression" : {
		 syntax.ref(relat_expression), [ syntax.ref(equal_op), syntax.ref(equality_expression) ]
	},
	"equal_op" : {
		syntax.cond_or(
			{ syntax.term("==") },
			{ syntax.term("!=") }
		)
	},
	"relat_expression" : {
		 syntax.ref(additive_expression), [ syntax.ref(relat_op), syntax.ref(relat_expression) ]
	},
	"relat_op" : {
		syntax.cond_or(
			{ syntax.term(">") },
			{ syntax.term("<") },
			{ syntax.term(">=") },
			{ syntax.term("<=") }
		)
	},
	"additive_expression" : {
		 syntax.ref(multiplicative_expression), [ syntax.ref(add_op), syntax.ref(additive_expression) ]
	},
	"add_op" : {
		syntax.cond_or(
			{ syntax.term("+") },
			{ syntax.term("-") }
		)
	},
	"multiplicative_expression" : {
		 syntax.ref(unary_expression), [ syntax.ref(mul_op), syntax.ref(multiplicative_expression) ]
	},
	"mul_op" : {
		syntax.cond_or(
			{ syntax.term("*") },
			{ syntax.term("/") }
		)
	},
	"unary_expression" : {
		syntax.cond_or(
			{ syntax.ref(sadd_op), syntax.ref(unary_expression) },
			{ syntax.ref(postfix_expression) }
		)
	},
	"sadd_op" : {
		syntax.cond_or(
			{ syntax.term("++") },
			{ syntax.term("--") },
			{ syntax.term("-") }
		)
	},
	"postfix_expression" : {
		syntax.cond_or(
			{ syntax.ref(primary_expression) },
			{ syntax.ref(postfix_expression), syntax.term("["), syntax.ref(expression), syntax.term("]") },
			{ syntax.ref(postfix_expression), syntax.term("("), syntax.term(")") },
			{ syntax.ref(postfix_expression), syntax.term("("), syntax.ref(assignment_expression), syntax.repeat( syntax.term(","), syntax.ref(assignment_expression)), syntax.term(")") },
			{ syntax.ref(postfix_expression), syntax.term("."), syntax.token("ID") },
			{ syntax.ref(postfix_expression), syntax.ref(post_op) }
		)
	},
	"post_op" : {
		syntax.cond_or(
			{ syntax.term("++") },
			{ syntax.term("--") }
		)
	},
	"primary_expression" : {
		syntax.cond_or(
			{ syntax.token("ID") },
			{ syntax.token("NUMBER") },
			{ syntax.term("("), syntax.ref(expression), syntax.term(")") }
		)
	}	"struct_specifier" : {
		 syntax.term("struct"), syntax.token("ID"), syntax.term("{"), syntax.repeat( syntax.ref(declaration)), syntax.term("}"), [ syntax.token("ID") ], syntax.term(";")
	}
}.to_hash_map()
@end
